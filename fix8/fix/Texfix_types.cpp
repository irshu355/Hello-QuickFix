//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2019-09-19 20:22:18 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-19 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16793600L
#error Texfix_types.cpp version 1.4.0 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// Texfix_types.cpp
//-------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <vector>
#include <map>
#include <list>
#include <set>
#include <iterator>
#include <algorithm>
#include <cerrno>
#include <string.h>
// f8 includes
#include <fix8/f8exception.hpp>
#include <fix8/hypersleep.hpp>
#include <fix8/mpmc.hpp>
#include <fix8/thread.hpp>
#include <fix8/f8types.hpp>
#include <fix8/f8utils.hpp>
#include <fix8/tickval.hpp>
#include <fix8/logger.hpp>
#include <fix8/traits.hpp>
#include <fix8/field.hpp>
#include <fix8/message.hpp>
#include "Texfix_types.hpp"
//-------------------------------------------------------------------------------------------------
namespace FIX8 {
namespace TEX {

namespace {

//-------------------------------------------------------------------------------------------------
const char AdvSide_realm[]  
   { 'B', 'S', 'T', 'X' };
const char *AdvSide_descriptions[]  
   { "BUY", "SELL", "TRADE", "CROSS" };
const f8String AdvTransType_realm[]  
   { "C", "N", "R" };
const char *AdvTransType_descriptions[]  
   { "ADVCANCEL", "ADVNEW", "ADVREPLACE" };
const char CommType_realm[]  
   { '1', '2', '3', '4', '5', '6' };
const char *CommType_descriptions[]  
   { "PER_UNIT", "PERCENT", "ABSOLUTE", "PCTWAIVEDCSHDISC", "PCTWAIVEDENUNITS", "PERBOND" };
const f8String ExecInst_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e" };
const char *ExecInst_descriptions[]  
   { "STAYOFFER", "NOTHELD", "WORK", "GOALONG", "OVERDAY", "HELD", "PARTNOTINIT", "STRICTSCALE", "TRYTOSCALE", "STAYBID", "NOCROSS", "OKCROSS", "CALLFIRST", "PERCVOL", "DNI", "DNR", "AON", "RESTATEONSYSFAIL", "INSTITONLY", "RESTATEONTRADINGHALT", "CANCELONTRADINGHALT", "LASTPEG", "MIDPRCPEG", "NONNEGO", "OPENPEG", "MARKPEG", "CANCELONSYSFAIL", "PRIMPEG", "SUSPEND", "CUSTDISPINST", "NETTING", "PEGVWAP", "TRADEALONG", "TRYTOSTOP", "CXLIFNOTBEST", "TRAILSTOPPEG", "STRICTLIMIT", "IGNOREPRICECHK", "PEGTOLIMIT", "WORKTOSTRATEGY" };
const char HandlInst_realm[]  
   { '1', '2', '3' };
const char *HandlInst_descriptions[]  
   { "AUTOEXECPRIV", "AUTOEXECPUB", "MANUAL" };
const f8String SecurityIDSource_realm[]  
   { "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J" };
const char *SecurityIDSource_descriptions[]  
   { "CUSIP", "SEDOL", "QUIK", "ISIN", "RIC", "ISOCURR", "ISOCOUNTRY", "EXCHSYMB", "CTA", "BLMBRG", "WERTPAPIER", "DUTCH", "VALOREN", "SICOVAM", "BELGIAN", "COMMON", "CLEARINGHOUSE", "FPML", "OPTIONPRICEREPORTINGAUTHORITY" };
const char IOIQltyInd_realm[]  
   { 'H', 'L', 'M' };
const char *IOIQltyInd_descriptions[]  
   { "HIGH", "LOW", "MEDIUM" };
const char IOITransType_realm[]  
   { 'C', 'N', 'R' };
const char *IOITransType_descriptions[]  
   { "CANCEL", "NEW", "REPLACE" };
const char LastCapacity_realm[]  
   { '1', '2', '3', '4' };
const char *LastCapacity_descriptions[]  
   { "A", "XA", "XP", "P" };
const f8String MsgType_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ", "B", "BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
const char *MsgType_descriptions[]  
   { "HEARTBEAT", "TESTREQUEST", "RESENDREQUEST", "REJECT", "SEQUENCERESET", "LOGOUT", "IOI", "ADVERTISEMENT", "EXECUTIONREPORT", "ORDERCANCELREJECT", "LOGON", "DERIVATIVESECURITYLIST", "NEWORDERMULTILEG", "MULTILEGORDERCANCELREPLACE", "TRADECAPTUREREPORTREQUEST", "TRADECAPTUREREPORT", "ORDERMASSSTATUSREQUEST", "QUOTEREQUESTREJECT", "RFQREQUEST", "QUOTESTATUSREPORT", "QUOTERESPONSE", "CONFIRMATION", "POSITIONMAINTENANCEREQUEST", "POSITIONMAINTENANCEREPORT", "REQUESTFORPOSITIONS", "REQUESTFORPOSITIONSACK", "POSITIONREPORT", "TRADECAPTUREREPORTREQUESTACK", "TRADECAPTUREREPORTACK", "ALLOCATIONREPORT", "ALLOCATIONREPORTACK", "CONFIRMATIONACK", "SETTLEMENTINSTRUCTIONREQUEST", "ASSIGNMENTREPORT", "COLLATERALREQUEST", "COLLATERALASSIGNMENT", "COLLATERALRESPONSE", "NEWS", "COLLATERALREPORT", "COLLATERALINQUIRY", "NETWORKCOUNTERPARTYSYSTEMSTATUSREQUEST", "NETWORKCOUNTERPARTYSYSTEMSTATUSRESPONSE", "USERREQUEST", "USERRESPONSE", "COLLATERALINQUIRYACK", "CONFIRMATIONREQUEST", "EMAIL", "NEWORDERSINGLE", "NEWORDERLIST", "ORDERCANCELREQUEST", "ORDERCANCELREPLACEREQUEST", "ORDERSTATUSREQUEST", "ALLOCATIONINSTRUCTION", "LISTCANCELREQUEST", "LISTEXECUTE", "LISTSTATUSREQUEST", "LISTSTATUS", "ALLOCATIONINSTRUCTIONACK", "DONTKNOWTRADEDK", "QUOTEREQUEST", "QUOTE", "SETTLEMENTINSTRUCTIONS", "MARKETDATAREQUEST", "MARKETDATASNAPSHOTFULLREFRESH", "MARKETDATAINCREMENTALREFRESH", "MARKETDATAREQUESTREJECT", "QUOTECANCEL", "QUOTESTATUSREQUEST", "MASSQUOTEACKNOWLEDGEMENT", "SECURITYDEFINITIONREQUEST", "SECURITYDEFINITION", "SECURITYSTATUSREQUEST", "SECURITYSTATUS", "TRADINGSESSIONSTATUSREQUEST", "TRADINGSESSIONSTATUS", "MASSQUOTE", "BUSINESSMESSAGEREJECT", "BIDREQUEST", "BIDRESPONSE", "LISTSTRIKEPRICE", "XMLNONFIX", "REGISTRATIONINSTRUCTIONS", "REGISTRATIONINSTRUCTIONSRESPONSE", "ORDERMASSCANCELREQUEST", "ORDERMASSCANCELREPORT", "NEWORDERCROSS", "CROSSORDERCANCELREPLACEREQUEST", "CROSSORDERCANCELREQUEST", "SECURITYTYPEREQUEST", "SECURITYTYPES", "SECURITYLISTREQUEST", "SECURITYLIST", "DERIVATIVESECURITYLISTREQUEST" };
const char OrdStatus_realm[]  
   { '0', '1', '2', '3', '4', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E' };
const char *OrdStatus_descriptions[]  
   { "NEW", "PARTIAL", "FILLED", "DONE", "CANCELED", "PENDING_CANCEL", "STOPPED", "REJECTED", "SUSPENDED", "PENDINGNEW", "CALCULATED", "EXPIRED", "ACCEPTBIDDING", "PENDINGREP" };
const char OrdType_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'P' };
const char *OrdType_descriptions[]  
   { "MARKET", "LIMIT", "STOP", "STOPLIMIT", "MARKETONCLOSE", "WITHORWITHOUT", "LIMITORBETTER", "LIMITWITHORWITHOUT", "ONBASIS", "ONCLOSE", "LIMITONCLOSE", "FOREXMARKET", "PREVIOUSLYQUOTED", "PREVIOUSLYINDICATED", "FOREXLIMIT", "FOREXSWAP", "FOREXPREVIOUSLYQUOTED", "FUNARI", "MARKETIFTOUCHED", "MARKETWITHLEFTOVERLIMIT", "PREVIOUSFUNDVALUATIONPOINT", "NEXTFUNDVALUATIONPOINT", "PEGGED" };
const char PossDupFlag_realm[]  
   { 'N', 'Y' };
const char *PossDupFlag_descriptions[]  
   { "NO", "YES" };
const char Side_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G' };
const char *Side_descriptions[]  
   { "BUY", "SELL", "BUYMIN", "SELLPLUS", "SELLSHT", "SELLSHTEX", "UNDISC", "CROSS", "CROSSSHORT", "CROSSSHORTEX", "ASDEFINED", "OPPOSITE", "SUBSCRIBE", "REDEEM", "LENDFINANCING", "BORROWFINANCING" };
const char TimeInForce_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7' };
const char *TimeInForce_descriptions[]  
   { "DAY", "GOODTILLCANCEL", "ATTHEOPENING", "IMMEDIATEORCANCEL", "FILLORKILL", "GOODTILLCROSSING", "GOODTILLDATE", "ATTHECLOSE" };
const char Urgency_realm[]  
   { '0', '1', '2' };
const char *Urgency_descriptions[]  
   { "NORMAL", "FLASH", "BACKGROUND" };
const char SettlType_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
const char *SettlType_descriptions[]  
   { "REGULAR", "CASH", "NEXTDAY", "T2", "T3", "T4", "FUTURE", "WHENISSUED", "T5", "T1" };
const f8String SymbolSfx_realm[]  
   { "CD", "WI" };
const char *SymbolSfx_descriptions[]  
   { "EUCPLUMPSUMINTEREST", "WHENISSUED" };
const char AllocTransType_realm[]  
   { '0', '1', '2', '3', '4', '5' };
const char *AllocTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL", "PRELIMINARY", "CALCULATED", "CALCULATEDWITHOUTPRELIMINARY" };
const char PositionEffect_realm[]  
   { 'C', 'F', 'O', 'R' };
const char *PositionEffect_descriptions[]  
   { "CLOSE", "FIFO", "OPEN", "ROLLED" };
const char ProcessCode_realm[]  
   { '0', '1', '2', '3', '4', '5', '6' };
const char *ProcessCode_descriptions[]  
   { "REGULAR", "SOFTDOLLAR", "STEPIN", "STEPOUT", "STEPINSOFT", "STEPOUTSOFT", "PLANSPONSOR" };
const int AllocStatus_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *AllocStatus_descriptions[]  
   { "ACCEPTEDSUCCESSFULLYPROCESSED", "BLOCKLEVELREJECT", "ACCOUNTLEVELREJECT", "RECEIVEDRECEIVEDNOTYETPROCESSED", "INCOMPLETE", "REJECTEDBYINTERMEDIARY" };
const int AllocRejCode_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *AllocRejCode_descriptions[]  
   { "UNKNOWNACCT", "INCORRECTQTY", "INCORRECTAVGPRC", "INCORRECTBRKMNC", "COMMDIFF", "UNKNOWNORDID", "UNKNOWNLISTID", "OTHER", "INCORRECTALLOCATEDQUANTITY", "CALCULATIONDIFFERENCE", "UNKNOWNORSTALEEXECID", "MISMATCHEDDATA", "UNKNOWNCLORDID", "WAREHOUSEREQUESTREJECTED" };
const char EmailType_realm[]  
   { '0', '1', '2' };
const char *EmailType_descriptions[]  
   { "NEW", "REPLY", "ADMINREPLY" };
const char PossResend_realm[]  
   { 'N', 'Y' };
const char *PossResend_descriptions[]  
   { "NO", "YES" };
const int EncryptMethod_realm[]  
   { 0, 1, 2, 3, 4, 5, 6 };
const char *EncryptMethod_descriptions[]  
   { "NONEOTHER", "PKCSPROPRIETARY", "DESECBMODE", "PKCSDESPROPRIETARY", "PGPDESDEFUNCT", "PGPDESMD5SEEAPPNOTEONFIXWEBSITE", "PEMDESMD5SEEAPPNOTEONFIXWEBSITENAFORFIXMLNOTUSED" };
const int CxlRejReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 99 };
const char *CxlRejReason_descriptions[]  
   { "TOOLATE", "UNKNOWN", "BROKEROPT", "ALREADYPENDINGCXL", "UNABLETOPROCESS", "ORIGORDMODTIMEMISMATCH", "DUPCLORDID", "OTHER" };
const int OrdRejReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 99 };
const char *OrdRejReason_descriptions[]  
   { "BROKEROPT", "UNKNOWNSYM", "EXCHCLOSED", "EXCEEDSLIM", "TOOLATE", "UNKNOWN", "DUPLICATE", "DUPLICATEVERBAL", "STALE", "TRADEALONGREQ", "INVINVID", "UNSUPPORDERCHAR", "SURVEILLENCE", "INCORRECTQUANTITY", "INCORRECTALLOCATEDQUANTITY", "UNKNOWNACCOUNTS", "OTHER" };
const char IOIQualifier_realm[]  
   { 'A', 'B', 'C', 'D', 'I', 'L', 'M', 'O', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };
const char *IOIQualifier_descriptions[]  
   { "AON", "MOC", "ATCLOSE", "VWAP", "INTOUCH", "LIMIT", "MOREBEHIND", "ATOPEN", "TAKEPOSITION", "ATMARKET", "READYTRADE", "PORTSHOW", "THROUGHDAY", "VERSUS", "INDWRKAWAY", "CROSSOPP", "ATMID", "PREOPEN" };
const char ReportToExch_realm[]  
   { 'N', 'Y' };
const char *ReportToExch_descriptions[]  
   { "NO", "YES" };
const char LocateReqd_realm[]  
   { 'N', 'Y' };
const char *LocateReqd_descriptions[]  
   { "NO", "YES" };
const char ForexReq_realm[]  
   { 'N', 'Y' };
const char *ForexReq_descriptions[]  
   { "NO", "YES" };
const char GapFillFlag_realm[]  
   { 'N', 'Y' };
const char *GapFillFlag_descriptions[]  
   { "NO", "YES" };
const char DKReason_realm[]  
   { 'A', 'B', 'C', 'D', 'E', 'F', 'Z' };
const char *DKReason_descriptions[]  
   { "UNKNOWNSYMBOL", "WRONGSIDE", "QUANTITYEXCEEDSORDER", "NOMATCH", "PRICEEXCEEDSLIMIT", "CALCULATIONDIFFERENCE", "OTHER" };
const char IOINaturalFlag_realm[]  
   { 'N', 'Y' };
const char *IOINaturalFlag_descriptions[]  
   { "NO", "YES" };
const char MiscFeeType_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9' };
const char *MiscFeeType_descriptions[]  
   { "REG", "TAX", "LOCALCOMM", "EXCHFEE", "STAMP", "LEVY", "OTHER", "MARKUP", "CONSUMPTION" };
const char ResetSeqNumFlag_realm[]  
   { 'N', 'Y' };
const char *ResetSeqNumFlag_descriptions[]  
   { "NO", "YES" };
const char ExecType_realm[]  
   { '0', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I' };
const char *ExecType_descriptions[]  
   { "NEW", "DONE", "CANCELED", "REPLACED", "PENDINGCXL", "STOPPED", "REJECTED", "SUSPENDED", "PENDINGNEW", "CALCULATED", "EXPIRED", "RESTATED", "PENDINGREPLACE", "TRADE", "TRADECORRECT", "TRADECANCEL", "ORDERSTATUS" };
const char SettlCurrFxRateCalc_realm[]  
   { 'D', 'M' };
const char *SettlCurrFxRateCalc_descriptions[]  
   { "DIVIDE", "MULTIPLY" };
const char SettlInstMode_realm[]  
   { '0', '1', '2', '3', '4', '5' };
const char *SettlInstMode_descriptions[]  
   { "DEFAULT", "SIPROVIDED", "ACCOUNTOVERRIDING", "ACCOUNTSTANDING", "CIVORDERSINGLEACCT", "REJECT" };
const char SettlInstTransType_realm[]  
   { 'C', 'N', 'R', 'T' };
const char *SettlInstTransType_descriptions[]  
   { "CANCEL", "NEW", "REPLACE", "RESTATE" };
const char SettlInstSource_realm[]  
   { '1', '2', '3' };
const char *SettlInstSource_descriptions[]  
   { "BROKERINSTR", "INSTINSTR", "INVESTORCIV" };
const f8String SecurityType_realm[]  
   { "ABS", "AMENDED", "AN", "BA", "BN", "BOX", "BRADY", "BRIDGE", "BUYSELL", "CB", "CD", "CL", "CMBS", "CMO", "COFO", "COFP", "CORP", "CP", "CPP", "CS", "DEFLTED", "DINP", "DN", "DUAL", "EUCD", "EUCORP", "EUCP", "EUSOV", "EUSUPRA", "FAC", "FADN", "FOR", "FORWARD", "FUT", "GO", "IET", "LOFC", "LQN", "MATURED", "MBS", "MF", "MIO", "MLEG", "MPO", "MPP", "MPT", "MT", "MTN", "NONE", "ONITE", "OPT", "PEF", "PFAND", "PN", "PS", "PZFJ", "RAN", "REPLACD", "REPO", "RETIRED", "REV", "RVLV", "RVLVTRM", "SECLOAN", "SECPLEDGE", "SPCLA", "SPCLO", "SPCLT", "STN", "STRUCT", "SUPRA", "SWING", "TAN", "TAXA", "TBA", "TBILL", "TBOND", "TCAL", "TD", "TECP", "TERM", "TINT", "TIPS", "TNOTE", "TPRN", "TRAN", "UST", "USTB", "VRDN", "WAR", "WITHDRN", "WLD", "XCN", "XLINKD", "YANK", "YCD" };
const char *SecurityType_descriptions[]  
   { "ASSETBACKEDSECURITIES", "AMENDEDRESTATED", "OTHERANTICIPATIONNOTESBANGANETC", "BANKERSACCEPTANCE", "BANKNOTES", "BILLOFEXCHANGES", "BRADYBOND", "BRIDGELOAN", "BUYSELLBACK", "CONVERTIBLEBOND", "CERTIFICATEOFDEPOSIT", "CALLLOANS", "CORPMORTGAGEBACKEDSECURITIES", "COLLATERALIZEDMORTGAGEOBLIGATION", "CERTIFICATEOFOBLIGATION", "CERTIFICATEOFPARTICIPATION", "CORPORATEBOND", "COMMERCIALPAPER", "CORPORATEPRIVATEPLACEMENT", "COMMONSTOCK", "DEFAULTED", "DEBTORINPOSSESSION", "DEPOSITNOTES", "DUALCURRENCY", "EUROCERTIFICATEOFDEPOSIT", "EUROCORPORATEBOND", "EUROCOMMERCIALPAPER", "EUROSOVEREIGNS", "EUROSUPRANATIONALCOUPONS", "FEDERALAGENCYCOUPON", "FEDERALAGENCYDISCOUNTNOTE", "FOREIGNEXCHANGECONTRACT", "FORWARD", "FUTURE", "GENERALOBLIGATIONBONDS", "IOETTEMORTGAGE", "LETTEROFCREDIT", "LIQUIDITYNOTE", "MATURED", "MORTGAGEBACKEDSECURITIES", "MUTUALFUND", "MORTGAGEINTERESTONLY", "MULTILEGINSTRUMENT", "MORTGAGEPRINCIPALONLY", "MORTGAGEPRIVATEPLACEMENT", "MISCELLANEOUSPASSTHROUGH", "MANDATORYTENDER", "MEDIUMTERMNOTES", "NOSECURITYTYPE", "OVERNIGHT", "OPTION", "PRIVATEEXPORTFUNDING", "PFANDBRIEFE", "PROMISSORYNOTE", "PREFERREDSTOCK", "PLAZOSFIJOS", "REVENUEANTICIPATIONNOTE", "REPLACED", "REPURCHASE", "RETIRED", "REVENUEBONDS", "REVOLVERLOAN", "REVOLVERTERMLOAN", "SECURITIESLOAN", "SECURITIESPLEDGE", "SPECIALASSESSMENT", "SPECIALOBLIGATION", "SPECIALTAX", "SHORTTERMLOANNOTE", "STRUCTUREDNOTES", "USDSUPRANATIONALCOUPONS", "SWINGLINEFACILITY", "TAXANTICIPATIONNOTE", "TAXALLOCATION", "TOBEANNOUNCED", "USTREASURYBILL", "USTREASURYBOND", "PRINCIPALSTRIPOFACALLABLEBONDORNOTE", "TIMEDEPOSIT", "TAXEXEMPTCOMMERCIALPAPER", "TERMLOAN", "INTERESTSTRIPFROMANYBONDORNOTE", "TREASURYINFLATIONPROTECTEDSECURITIES", "USTREASURYNOTE", "PRINCIPALSTRIPFROMANONCALLABLEBONDORNOTE", "TAXREVENUEANTICIPATIONNOTE", "USTREASURYNOTEDEPRECATEDVALUEUSETNOTE", "USTREASURYBILLDEPRECATEDVALUEUSETBILL", "VARIABLERATEDEMANDNOTE", "WARRANT", "WITHDRAWN", "WILDCARDENTRY", "EXTENDEDCOMMNOTE", "INDEXEDLINKED", "YANKEECORPORATEBOND", "YANKEECERTIFICATEOFDEPOSIT" };
const int StandInstDbType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *StandInstDbType_descriptions[]  
   { "OTHER", "SID", "ALERT", "CUSTODIAN", "ACCOUNTNET" };
const int AllocLinkType_realm[]  
   { 0, 1 };
const char *AllocLinkType_descriptions[]  
   { "FXNETTING", "FXSWAP" };
const int CoveredOrUncovered_realm[]  
   { 0, 1 };
const char *CoveredOrUncovered_descriptions[]  
   { "COVERED", "UNCOVERED" };
const char NotifyBrokerOfCredit_realm[]  
   { 'N', 'Y' };
const char *NotifyBrokerOfCredit_descriptions[]  
   { "NO", "YES" };
const int AllocHandlInst_realm[]  
   { 1, 2, 3 };
const char *AllocHandlInst_descriptions[]  
   { "MATCH", "FORWARD", "FORWARDMATCH" };
const int RoutingType_realm[]  
   { 1, 2, 3, 4 };
const char *RoutingType_descriptions[]  
   { "TARGETFIRM", "TARGETLIST", "BLOCKFIRM", "BLOCKLIST" };
const f8String BenchmarkCurveName_realm[]  
   { "EONIA", "EUREPO", "Euribor", "FutureSWAP", "LIBID", "LIBOR", "MuniAAA", "OTHER", "Pfandbriefe", "SONIA", "SWAP", "Treasury" };
const char *BenchmarkCurveName_descriptions[]  
   { "EONIA", "EUREPO", "EURIBOR", "FUTURESWAP", "LIBID", "LIBOR", "MUNIAAA", "OTHER", "PFANDBRIEFE", "SONIA", "SWAP", "TREASURY" };
const f8String StipulationType_realm[]  
   { "ABS", "AMT", "AUTOREINV", "BANKQUAL", "BGNCON", "COUPON", "CPP", "CPR", "CPY", "CURRENCY", "CUSTOMDATE", "GEOG", "HAIRCUT", "HEP", "INSURED", "ISSUE", "ISSUER", "ISSUESIZE", "LOOKBACK", "LOT", "LOTVAR", "MAT", "MATURITY", "MAXDNOM", "MAXSUBS", "MHP", "MINDNOM", "MININCR", "MINQTY", "MPR", "PAYFREQ", "PIECES", "PMAX", "PMIN", "PPC", "PPL", "PPM", "PPT", "PRICE", "PRICEFREQ", "PROD", "PROTECT", "PSA", "PURPOSE", "PXSOURCE", "RATING", "REDEMPTION", "RESTRICTED", "SECTOR", "SECTYPE", "SMM", "STRUCT", "SUBSFREQ", "SUBSLEFT", "TEXT", "TRDVAR", "WAC", "WAL", "WALA", "WAM", "WHOLE", "YIELD" };
const char *StipulationType_descriptions[]  
   { "ABSOLUTEPREPAYMENTSPEED", "AMT", "AUTOREINVESTMENTATRATEORBETTER", "BANKQUALIFIED", "BARGAINCONDITIONS", "COUPONRANGE", "CONSTANTPREPAYMENTPENALTY", "CONSTANTPREPAYMENTRATE", "CONSTANTPREPAYMENTYIELD", "ISOCURRENCYCODE", "CUSTOMSTARTENDDATE", "GEOGRAPHICSANDRANGE", "VALUATIONDISCOUNT", "FINALCPROFHOMEEQUITYPREPAYMENTCURVE", "INSURED", "YEARORYEARMONTHOFISSUE", "ISSUERSTICKER", "ISSUESIZERANGE", "LOOKBACKDAYS", "EXPLICITLOTIDENTIFIER", "LOTVARIANCEVALUEINPERCENTMAXIMUMOVERORUNDERALLOCATIONALLOWED", "MATURITYYEARANDMONTH", "MATURITYRANGE", "MAXIMUMDENOMINATION", "MAXIMUMSUBSTITUTIONSREPO", "PERCENTOFMANUFACTUREDHOUSINGPREPAYMENTCURVE", "MINIMUMDENOMINATION", "MINIMUMINCREMENT", "MINIMUMQUANTITY", "MONTHLYPREPAYMENTRATE", "PAYMENTFREQUENCYCALENDAR", "NUMBEROFPIECES", "POOLSMAXIMUM", "POOLSMINIMUM", "PERCENTOFPROSPECTUSPREPAYMENTCURVE", "POOLSPERLOT", "POOLSPERMILLION", "POOLSPERTRADE", "PRICERANGE", "PRICINGFREQUENCY", "PRODUCTIONYEAR", "CALLPROTECTION", "PERCENTOFBMAPREPAYMENTCURVE", "PURPOSE", "BENCHMARKPRICESOURCE", "RATINGSOURCEANDRANGE", "TYPEOFREDEMPTIONVALUESARE", "RESTRICTED", "MARKETSECTOR", "SECURITYTYPEINCLUDEDOREXCLUDED", "SINGLEMONTHLYMORTALITY", "STRUCTURE", "SUBSTITUTIONSFREQUENCYREPO", "SUBSTITUTIONSLEFTREPO", "FREEFORMTEXT", "TRADEVARIANCEVALUEINPERCENTMAXIMUMOVERORUNDERALLOCATIONALLOWED", "WEIGHTEDAVERAGECOUPON", "WEIGHTEDAVERAGELIFECOUPON", "WEIGHTEDAVERAGELOANAGE", "WEIGHTEDAVERAGEMATURITY", "WHOLEPOOL", "YIELDRANGE" };
const f8String YieldType_realm[]  
   { "AFTERTAX", "ANNUAL", "ATISSUE", "AVGMATURITY", "BOOK", "CALL", "CHANGE", "CLOSE", "COMPOUND", "CURRENT", "GOVTEQUIV", "GROSS", "INFLATION", "INVERSEFLOATER", "LASTCLOSE", "LASTMONTH", "LASTQUARTER", "LASTYEAR", "LONGAVGLIFE", "MARK", "MATURITY", "NEXTREFUND", "OPENAVG", "PREVCLOSE", "PROCEEDS", "PUT", "SEMIANNUAL", "SHORTAVGLIFE", "SIMPLE", "TAXEQUIV", "TENDER", "TRUE", "VALUE1_32", "WORST" };
const char *YieldType_descriptions[]  
   { "AFTERTAXYIELD", "ANNUALYIELD", "YIELDATISSUE", "YIELDTOAVGMATURITY", "BOOKYIELD", "YIELDTONEXTCALL", "YIELDCHANGESINCECLOSE", "CLOSINGYIELD", "COMPOUNDYIELD", "CURRENTYIELD", "GVNTEQUIVALENTYIELD", "TRUEGROSSYIELD", "YIELDINFLATIONASSUMPTION", "INVFLOATERBONDYIELD", "MOSTRECENTCLOSINGYIELD", "CLOSINGYIELDMOSTRECENTMONTH", "CLOSINGYIELDMOSTRECENTQUARTER", "CLOSINGYIELDMOSTRECENTYEAR", "YIELDTOLONGESTAVERAGELIFE", "MARKTOMARKETYIELD", "YIELDTOMATURITY", "YIELDTONEXTREFUNDSINKING", "OPENAVERAGEYIELD", "PREVIOUSCLOSEYIELD", "PROCEEDSYIELD", "YIELDTONEXTPUT", "SEMI", "YIELDTOSHORTESTAVERAGELIFE", "SIMPLEYIELD", "TAXEQUIVALENTYIELD", "YIELDTOTENDERDATE", "TRUEYIELD", "YIELDVALUEOF132", "YIELDTOWORSTCONVENTION" };
const char TradedFlatSwitch_realm[]  
   { 'N', 'Y' };
const char *TradedFlatSwitch_descriptions[]  
   { "NO", "YES" };
const char SubscriptionRequestType_realm[]  
   { '0', '1', '2' };
const char *SubscriptionRequestType_descriptions[]  
   { "SNAPSHOT", "SNAPSHOTUPDATE", "UNSUBSCRIBE" };
const int MDUpdateType_realm[]  
   { 0, 1 };
const char *MDUpdateType_descriptions[]  
   { "FULL", "INCREMENTAL" };
const char MDEntryType_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C' };
const char *MDEntryType_descriptions[]  
   { "BID", "OFFER", "TRADE", "INDEXVALUE", "OPENING", "CLOSING", "SETTLEMENT", "TRADINGHIGH", "TRADINGLOW", "TRADINGVWAP", "IMBALANCE", "TRADEVOLUME", "OPENINTEREST" };
const char TickDirection_realm[]  
   { '0', '1', '2', '3' };
const char *TickDirection_descriptions[]  
   { "PLUS", "ZEROPLUS", "MINUS", "ZEROMINUS" };
const f8String QuoteCondition_realm[]  
   { "A", "B", "C", "D", "E", "F", "G", "H", "I" };
const char *QuoteCondition_descriptions[]  
   { "OPEN", "CLOSED", "EXCHBEST", "CONSOLBEST", "LOCKED", "CROSSED", "DEPTH", "FAST", "NONFIRM" };
const f8String TradeCondition_realm[]  
   { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "P", "Q", "R" };
const char *TradeCondition_descriptions[]  
   { "CASHMKT", "AVGPX", "CASHTRADE", "NEXTDAY_D", "OPENING", "INTRADAY", "RULE127", "RULE155", "SOLDLAST", "NEXTDAY_J", "OPENED", "SELLER", "SOLD", "STOPPED", "IMBALANCEMOREBUYERS", "IMBALANCEMORESELLERS", "OPENINGPRICE" };
const char MDUpdateAction_realm[]  
   { '0', '1', '2' };
const char *MDUpdateAction_descriptions[]  
   { "NEW", "CHANGE", "DELETE" };
const char MDReqRejReason_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C' };
const char *MDReqRejReason_descriptions[]  
   { "UNKNOWNSYM", "DUPID", "INSBAND", "INSPERM", "UNSUPPSUB", "UNSUPPMKTDEPTH", "UNSUPPMDUPDATE", "UNSUPPAGGBK", "UNSUPPENTRY", "UNSUPPTRDSESSIONID", "UNSUPPSCOPE", "UNSUPPPOSITIONEFFECTSETTLEFLAG", "UNSUPPMDIMPLICITDELETE" };
const char DeleteReason_realm[]  
   { '0', '1' };
const char *DeleteReason_descriptions[]  
   { "CANCELTRADEBUST", "ERROR" };
const f8String OpenCloseSettlFlag_realm[]  
   { "0", "1", "2", "3", "4", "5" };
const char *OpenCloseSettlFlag_descriptions[]  
   { "DAILYOPEN", "SESSIONOPEN", "DELIVERYSETTLEMENT", "EXPECTEDENTRY", "ENTRYFROMPREVBUSINESSDAY", "THEORETICALPRICE" };
const f8String FinancialStatus_realm[]  
   { "1", "2" };
const char *FinancialStatus_descriptions[]  
   { "BANKRUPT", "PENDINGDELISTING" };
const f8String CorporateAction_realm[]  
   { "A", "B", "C", "D", "E" };
const char *CorporateAction_descriptions[]  
   { "EXDIVIDEND", "EXDIST", "EXRIGHTS", "NEW", "EXINTEREST" };
const int QuoteStatus_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
const char *QuoteStatus_descriptions[]  
   { "ACCPT", "CXLSYM", "CXLSECTYPE", "CXLUNDER", "CXLALL", "REJ", "REMOVED", "EXPIRED", "QUERY", "QUOTENOTFOUND", "PENDING", "PASS", "LOCKEDMARKETWARNING", "CROSSMARKETWARNING", "CANCELEDDUETOLOCKMARKET", "CANCELEDDUETOCROSSMARKET" };
const int QuoteCancelType_realm[]  
   { 1, 2, 3, 4 };
const char *QuoteCancelType_descriptions[]  
   { "CXLSYM", "CXLSECTYPE", "CXLUNDER", "CXLALL" };
const int QuoteRejectReason_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 99 };
const char *QuoteRejectReason_descriptions[]  
   { "UNKNSYM", "EXCHCLSD", "ORDEXLIM", "TOOLATE", "UNKNORD", "DUPORD", "INVSPREAD", "INVPX", "NOTAUTH", "OTHER" };
const int QuoteResponseLevel_realm[]  
   { 0, 1, 2 };
const char *QuoteResponseLevel_descriptions[]  
   { "NOACK", "ACKNEG", "ACKEACH" };
const int QuoteRequestType_realm[]  
   { 1, 2 };
const char *QuoteRequestType_descriptions[]  
   { "MAN", "AUTO" };
const int SecurityRequestType_realm[]  
   { 0, 1, 2, 3 };
const char *SecurityRequestType_descriptions[]  
   { "REQSECID", "REQSECIDPROV", "REQSECLISTTYPES", "REQSECLIST" };
const int SecurityResponseType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *SecurityResponseType_descriptions[]  
   { "ACCPTSECPROP", "ACCPTSECPROPREV", "SECLISTTYPESRET", "SECLISTRET", "REJSECPROP", "NOMATCH" };
const char UnsolicitedIndicator_realm[]  
   { 'N', 'Y' };
const char *UnsolicitedIndicator_descriptions[]  
   { "NO", "YES" };
const int SecurityTradingStatus_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };
const char *SecurityTradingStatus_descriptions[]  
   { "OPENDELAY", "TRDHALT", "RESUME", "NOOPEN", "PXIND", "TRDRNGIND", "MKTIMBBUY", "MKTBALSELL", "MKTONCLSIMBBUY", "MKTONCLSIMBSELL", "NA", "NOMKTIMB", "NOMKTONCLSIMB", "ITSPREOPN", "NEWPXIND", "TRDDISTIME", "READY", "NOTAVAIL", "NOTTRADED", "UNKNOWN", "PRE_OPEN", "OPENINGROTATION", "FASTMARKET" };
const char HaltReasonChar_realm[]  
   { 'D', 'E', 'I', 'M', 'P', 'X' };
const char *HaltReasonChar_descriptions[]  
   { "NEWSDISS", "ORDINFL", "ORDIMB", "ADDINFO", "NEWSPEND", "EQUIPCHANGE" };
const char InViewOfCommon_realm[]  
   { 'N', 'Y' };
const char *InViewOfCommon_descriptions[]  
   { "NO", "YES" };
const char DueToRelated_realm[]  
   { 'N', 'Y' };
const char *DueToRelated_descriptions[]  
   { "NO", "YES" };
const int Adjustment_realm[]  
   { 1, 2, 3 };
const char *Adjustment_descriptions[]  
   { "CANCEL", "ERROR", "CORRECTION" };
const int TradSesMethod_realm[]  
   { 1, 2, 3 };
const char *TradSesMethod_descriptions[]  
   { "ELECTRONIC", "OPENOUTCRY", "TWOPARTY" };
const int TradSesMode_realm[]  
   { 1, 2, 3 };
const char *TradSesMode_descriptions[]  
   { "TESTING", "SIMULATED", "PRODUCTION" };
const int TradSesStatus_realm[]  
   { 0, 1, 2, 3, 4, 5, 6 };
const char *TradSesStatus_descriptions[]  
   { "UNKNOWN", "HALTED", "OPEN", "CLOSED", "PREOPEN", "PRECLOSE", "REQREJ" };
const int QuoteEntryRejectReason_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 99 };
const char *QuoteEntryRejectReason_descriptions[]  
   { "UNKNWNSYM", "EXCHCLSD", "ORDEXCLIM", "TOOLATE", "UNKNORD", "DUPORD", "INVBIDASK", "INVPX", "NOTAUTH", "OTHER" };
const int SessionRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 99 };
const char *SessionRejectReason_descriptions[]  
   { "INVALIDTAGNUMBER", "REQUIREDTAGMISSING", "TAGNOTDEFINEDFORTHISMESSAGETYPE", "UNDEFINEDTAG", "TAGSPECIFIEDWITHOUTAVALUE", "VALUEISINCORRECTOUTOFRANGEFORTHISTAG", "INCORRECTDATAFORMATFORVALUE", "DECRYPTIONPROBLEM", "SIGNATUREPROBLEM", "COMPIDPROBLEM", "SENDINGTIMEACCURACYPROBLEM", "INVALIDMSGTYPE", "XMLVALIDATIONERROR", "TAGAPPEARSMORETHANONCE", "TAGSPECIFIEDOUTOFREQUIREDORDER", "REPEATINGGROUPFIELDSOUTOFORDER", "INCORRECTNUMINGROUPCOUNTFORREPEATINGGROUP", "NONDATAVALUEINCLUDESFIELDDELIMITERSOHCHARACTER", "OTHER" };
const char BidRequestTransType_realm[]  
   { 'C', 'N' };
const char *BidRequestTransType_descriptions[]  
   { "CANCEL", "NO" };
const char SolicitedFlag_realm[]  
   { 'N', 'Y' };
const char *SolicitedFlag_descriptions[]  
   { "NO", "YES" };
const int ExecRestatementReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99 };
const char *ExecRestatementReason_descriptions[]  
   { "GTCORPACT", "GTRENEW", "VERBAL", "REPX", "BRKROPT", "PARTDEC", "CXLTRADINGHALT", "CXLSYSTEMFAILURE", "MRKTOPTION", "CANCELEDNOTBEST", "WAREHOUSERECAP", "OTHER" };
const int BusinessRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *BusinessRejectReason_descriptions[]  
   { "OTHER", "UNKNID", "UNKNSEC", "UNKNMSGTYPE", "APPNA", "CONDFLDMISS", "NOTAUTH", "NODELIVTOFIRM" };
const char MsgDirection_realm[]  
   { 'R', 'S' };
const char *MsgDirection_descriptions[]  
   { "RECEIVE", "SEND" };
const char DiscretionInst_realm[]  
   { '0', '1', '2', '3', '4', '5', '6' };
const char *DiscretionInst_descriptions[]  
   { "RELDISPPX", "RELMKTPX", "RELPRIMPX", "RELLOCPRIMPX", "RELMIDPX", "RELLSTPX", "RELVWAP" };
const int BidType_realm[]  
   { 1, 2, 3 };
const char *BidType_descriptions[]  
   { "NONDISC", "DISC", "NOBID" };
const int BidDescriptorType_realm[]  
   { 1, 2, 3 };
const char *BidDescriptorType_descriptions[]  
   { "SECTOR", "COUNTRY", "INDEX" };
const int SideValueInd_realm[]  
   { 1, 2 };
const char *SideValueInd_descriptions[]  
   { "SIDEVALUE1", "SIDEVALUE2" };
const int LiquidityIndType_realm[]  
   { 1, 2, 3, 4 };
const char *LiquidityIndType_descriptions[]  
   { "5DAY", "20DAY", "NORMAL", "OTHER" };
const char ExchangeForPhysical_realm[]  
   { 'N', 'Y' };
const char *ExchangeForPhysical_descriptions[]  
   { "NO", "YES" };
const int ProgRptReqs_realm[]  
   { 1, 2, 3 };
const char *ProgRptReqs_descriptions[]  
   { "BUYSIDE", "SELLSIDE", "REALTIME" };
const int IncTaxInd_realm[]  
   { 1, 2 };
const char *IncTaxInd_descriptions[]  
   { "NET", "GROSS" };
const char BidTradeType_realm[]  
   { 'A', 'G', 'J', 'R' };
const char *BidTradeType_descriptions[]  
   { "AGENCY", "VWAPGUARANTEE", "GUARANTEEDCLOSE", "RISKTRADE" };
const char BasisPxType_realm[]  
   { '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'Z' };
const char *BasisPxType_descriptions[]  
   { "CLSPXMORN", "CLSPX", "CURRPX", "SQ", "VWAPDAY", "VWAPMORN", "VWAPAFT", "VWAPDAYXYORI", "VWAPMORNXYORI", "VWAPAFTXYORI", "STRIKE", "OPEN", "OTHERS" };
const int PriceType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
const char *PriceType_descriptions[]  
   { "PCT", "CPS", "ABS", "DISCOUNT", "PREMIUM", "SPREAD", "TEDPRICE", "TEDYIELD", "YIELD", "FIXEDCABINETTRADEPRICE", "VARIABLECABINETTRADEPRICE" };
const int GTBookingInst_realm[]  
   { 0, 1, 2 };
const char *GTBookingInst_descriptions[]  
   { "BOOKALL", "ACCUMUNTILFILL", "ACCUMUNTILNOTIFY" };
const int ListStatusType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *ListStatusType_descriptions[]  
   { "ACK", "RESP", "TIMED", "EXECSTART", "ALLDONE", "ALERT" };
const int NetGrossInd_realm[]  
   { 1, 2 };
const char *NetGrossInd_descriptions[]  
   { "NET", "GROSS" };
const int ListOrderStatus_realm[]  
   { 1, 2, 3, 4, 5, 6, 7 };
const char *ListOrderStatus_descriptions[]  
   { "INBIDPROC", "RECVFOREXEC", "EXEC", "CXL", "ALERT", "ALLDONE", "REJ" };
const char ListExecInstType_realm[]  
   { '1', '2', '3', '4', '5' };
const char *ListExecInstType_descriptions[]  
   { "IMMED", "WAIT", "EXCHCIVSELL", "EXCHCIVBUYTOP", "EXCHCIVBUYWD" };
const char CxlRejResponseTo_realm[]  
   { '1', '2' };
const char *CxlRejResponseTo_descriptions[]  
   { "ORDCXLREQ", "ORDCXLREPREQ" };
const char MultiLegReportingType_realm[]  
   { '1', '2', '3' };
const char *MultiLegReportingType_descriptions[]  
   { "SINGLE", "INDIVLEG", "MULTILEG" };
const char PartyIDSource_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I' };
const char *PartyIDSource_descriptions[]  
   { "KOREANINVESTORID", "TAIWANESEQUALIFIED", "TAIWANESETRADINGACCT", "MCDNUMBER", "CHINESEBSHARE", "UKNATIONALINSPENNUMBER", "USSOCIALSECURITY", "USEMPLOYERIDNUMBER", "AUSTRALIANBUSINESSNUMBER", "AUSTRALIANTAXFILENUMBER", "BIC", "ACCPTMARKETPART", "PROPCODE", "ISOCODE", "SETTLENTLOC", "MIC", "CSDPARTCODE", "DIRECTEDDEFINEDISITC" };
const int PartyRole_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 };
const char *PartyRole_descriptions[]  
   { "EXECUTINGFIRM", "BROKEROFCREDIT", "CLIENTID", "CLEARINGFIRM", "INVESTORID", "INTRODUCINGFIRM", "ENTERINGFIRM", "LOCATELENDINGFIRM", "FUNDMANAGER", "SETTLEMENTLOCATION", "INITIATINGTRADER", "EXECUTINGTRADER", "ORDERORIGINATOR", "GIVEUPCLEARINGFIRM", "CORRESPONDANTCLEARINGFIRM", "EXECUTINGSYSTEM", "CONTRAFIRM", "CONTRACLEARINGFIRM", "SPONSORINGFIRM", "UNDRCONTRAFIRM", "CLEARINGORGANIZATION", "EXCHANGE", "CUSTOMERACCOUNT", "CORRESPONDENTCLEARINGORGANIZATION", "CORRESPONDENTBROKER", "BUYERSELLERRECEIVERDELIVERER", "CUSTODIAN", "INTERMEDIARY", "AGENT", "SUBCUSTODIAN", "BENEFICIARY", "INTERESTEDPARTY", "REGULATORYBODY", "LIQUIDITYPROVIDER", "ENTERINGTRADER", "CONTRATRADER", "POSITIONACCOUNT", "ALLOCENTITY" };
const int Product_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *Product_descriptions[]  
   { "AGENCY", "COMMODITY", "CORPORATE", "CURRENCY", "EQUITY", "GOVERNMENT", "INDEX", "LOAN", "MONEYMARKET", "MORTGAGE", "MUNICIPAL", "OTHER", "FINANCING" };
const char TestMessageIndicator_realm[]  
   { 'N', 'Y' };
const char *TestMessageIndicator_descriptions[]  
   { "NO", "YES" };
const char RoundingDirection_realm[]  
   { '0', '1', '2' };
const char *RoundingDirection_descriptions[]  
   { "ROUNDNEAREST", "ROUNDDOWN", "ROUNDUP" };
const int DistribPaymentMethod_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
const char *DistribPaymentMethod_descriptions[]  
   { "CREST", "NSCC", "EUROCLEAR", "CLEARSTREAM", "CHEQUE", "TELEGRAPHICTRANSFER", "FEDWIRE", "DIRECTCREDITBECSBACS", "ACHCREDIT", "BPAY", "HIGHVALUECLEARINGSYSTEMHVACS", "REINVESTINFUND" };
const char CancellationRights_realm[]  
   { 'M', 'N', 'O', 'Y' };
const char *CancellationRights_descriptions[]  
   { "NOWAIVER", "NOEXECONLY", "NOINSTIT", "YES" };
const char MoneyLaunderingStatus_realm[]  
   { '1', '2', '3', 'N', 'Y' };
const char *MoneyLaunderingStatus_descriptions[]  
   { "EXBELOWLIM", "EXCLIENTMONEYTYPE", "EXAUTHCREDIT", "NOTCHECKED", "PASSED" };
const char ExecPriceType_realm[]  
   { 'B', 'C', 'D', 'E', 'O', 'P', 'Q', 'S' };
const char *ExecPriceType_descriptions[]  
   { "BIDPRICE", "CREATIONPRICE", "CREATIONPRICEADJPCT", "CREATIONPRICEADJAMT", "OFFERPRICE", "OFFERPRICEMINUSADJPCT", "OFFERPRICEMINUSADJAMT", "SINGLEPRICE" };
const int TradeReportTransType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *TradeReportTransType_descriptions[]  
   { "NEW", "CANCEL", "REPLACE", "RELEASE", "REVERSE" };
const int PaymentMethod_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
const char *PaymentMethod_descriptions[]  
   { "CREST", "NSCC", "EUROCLEAR", "CLEARSTREAM", "CHEQUE", "TELEGRAPHICTRANSFER", "FEDWIRE", "DEBITCARD", "DIRECTDEBITBECS", "DIRECTCREDITBECS", "CREDITCARD", "ACHDEBIT", "ACHCREDIT", "BPAY", "HIGHVALUECLEARINGSYSTEMHVACS" };
const int TaxAdvantageType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 999 };
const char *TaxAdvantageType_descriptions[]  
   { "NONE", "MAXIISAUK", "TESSAUK", "MINICASHISAUK", "MINISTOCKSANDSHARESISAUK", "MINIINSURANCEISAUK", "CURRENTYEARPAYMENTUS", "PRIORYEARPAYMENTUS", "ASSETTRANSFERUS", "EMPLOYEEPRIORYEARUS", "EMPLOYEECURRENTYEARUS", "EMPLOYERPRIORYEARUS", "EMPLOYERCURRENTYEARUS", "NONFUNDPROTOTYPEIRAUS", "NONFUNDQUALIFIEDPLANUS", "DEFINEDCONTRIBUTIONPLANUS", "INDIVIDUALRETIREMENTACCOUNTUS", "INDIVIDUALRETIREMENTACCOUNTROLLOVERUS", "KEOGHUS", "PROFITSHARINGPLANUS", "401KUS", "SELFDIRECTEDIRAUS", "403BUS", "457US", "ROTHIRAFUNDPROTOTYPEUS", "ROTHIRANONPROTOTYPEUS", "ROTHCONVERSIONIRAFUNDPROTOTYPEUS", "ROTHCONVERSIONIRANONPROTOTYPEUS", "EDUCATIONIRAFUNDPROTOTYPEUS", "EDUCATIONIRANONPROTOTYPEUS", "OTHER" };
const char FundRenewWaiv_realm[]  
   { 'N', 'Y' };
const char *FundRenewWaiv_descriptions[]  
   { "NO", "YES" };
const char RegistStatus_realm[]  
   { 'A', 'H', 'N', 'R' };
const char *RegistStatus_descriptions[]  
   { "ACCEPTED", "HELD", "REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING", "REJECTED" };
const int RegistRejReasonCode_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 99 };
const char *RegistRejReasonCode_descriptions[]  
   { "INVALIDACCOUNTTYPE", "INVALIDTAXEXEMPTTYPE", "INVALIDOWNERSHIPTYPE", "INVALIDNOREGDETLS", "INVALIDREGSEQNO", "INVALIDREGDTLS", "INVALIDMAILINGDTLS", "INVALIDMAILINGINST", "INVALIDINVESTORID", "INVALIDINVESTORIDSOURCE", "INVALIDDATEOFBIRTH", "INVALIDINVESTORCOUNTRYOFRESIDENCE", "INVALIDNODISTRIBINSTNS", "INVALIDDISTRIBPERCENTAGE", "INVALIDDISTRIBPAYMENTMETHOD", "INVALIDCASHDISTRIBAGENTACCTNAME", "INVALIDCASHDISTRIBAGENTCODE", "INVALIDCASHDISTRIBAGENTACCTNUM", "OTHER" };
const char RegistTransType_realm[]  
   { '0', '1', '2' };
const char *RegistTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL" };
const char OwnershipType_realm[]  
   { '2', 'J', 'T' };
const char *OwnershipType_descriptions[]  
   { "JOINT_TRUSTEES", "JOINT_INVESTORS", "TENANTS_IN_COMMON" };
const int ContAmtType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
const char *ContAmtType_descriptions[]  
   { "COMMISSIONAMT", "COMMISSIONPCT", "INITIALCHARGEAMT", "INITIALCHARGEPCT", "DISCOUNTAMT", "DISCOUNTPCT", "DILUTIONLEVYAMT", "DILUTIONLEVYPCT", "EXITCHARGEAMT", "EXITCHARGEPCT", "FUNDBASEDRENEWALCOMM", "PROJECTEDFUNDVALUE", "FUNDBASEDRENEWALCOMMAMTORD", "FUNDBASEDRENEWALCOMMAMTPROJ", "NETSETTLEMENTAMOUNT" };
const int OwnerType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *OwnerType_descriptions[]  
   { "INDIVINVESTOR", "PUBLICCOMPANY", "PRIVATECOMPANY", "INDIVTRUSTEE", "COMPANYTRUSTEE", "PENSIONPLAN", "CUSTODIANMINORSACT", "TRUSTS", "FIDUCIARIES", "NETWORKINGSUBACCT", "NON_PROFITORG", "CORPBODY", "NOMINEE" };
const char OrderCapacity_realm[]  
   { 'A', 'G', 'I', 'P', 'R', 'W' };
const char *OrderCapacity_descriptions[]  
   { "AGENCY", "PROPRIETARY", "INDIVIDUAL", "PRINCIPAL", "RISKLESSPRINCIPAL", "AGENTOTHERMEMBER" };
const f8String OrderRestrictions_realm[]  
   { "1", "2", "3", "4", "5", "6", "7", "8", "9", "A" };
const char *OrderRestrictions_descriptions[]  
   { "PROGRAMTRADE", "INDEXARBITRAGE", "NON_INDEXARBITRAGE", "COMPETINGMARKETMAKER", "ACTMM", "ACTMMDERIV", "FORENTITY", "EXMRKTPART", "EXINTMRKTLINK", "RISKARB" };
const char MassCancelRequestType_realm[]  
   { '1', '2', '3', '4', '5', '6', '7' };
const char *MassCancelRequestType_descriptions[]  
   { "CXLORDERSSECURITY", "CXLORDERSUNDERLYINGSECURITY", "CXLORDERSPRODUCT", "CXLORDERSCFICODE", "CXLORDERSSECURITYTYPE", "CXLORDERSTRDSESSION", "CXLALLORDERS" };
const char MassCancelResponse_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7' };
const char *MassCancelResponse_descriptions[]  
   { "CXLREQREJ", "CXLORDERSSECURITY", "CXLORDERSUNDERLYINGSECURITY", "CXLORDERSPRODUCT", "CXLORDERSCFICODE", "CXLORDERSSECURITYTYPE", "CXLORDERSTRDSESSION", "CXLALLORDERS" };
const char MassCancelRejectReason_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '9' };
const char *MassCancelRejectReason_descriptions[]  
   { "MASSCXLNOTSUPPORTED", "INVALIDSECURITY", "INVALIDUNDERLYING", "INVALIDPRODUCT", "INVALIDCFICODE", "INVALIDSECURITYTYPE", "INVALIDTRDSESSION", "OTHER" };
const int QuoteType_realm[]  
   { 0, 1, 2, 3 };
const char *QuoteType_descriptions[]  
   { "INDICATIVE", "TRADEABLE", "RESTRICTEDTRADEABLE", "COUNTER" };
const f8String InstrRegistry_realm[]  
   { "BIC", "ISO", "ZZ" };
const char *InstrRegistry_descriptions[]  
   { "CUSTODIAN", "COUNTRY", "PHYSICAL" };
const char CashMargin_realm[]  
   { '1', '2', '3' };
const char *CashMargin_descriptions[]  
   { "CASH", "MARGINOPEN", "MARGINCLOSE" };
const f8String Scope_realm[]  
   { "1", "2", "3" };
const char *Scope_descriptions[]  
   { "LOCALMARKET", "NATIONAL", "GLOBAL" };
const char MDImplicitDelete_realm[]  
   { 'N', 'Y' };
const char *MDImplicitDelete_descriptions[]  
   { "NO", "YES" };
const int CrossType_realm[]  
   { 1, 2, 3, 4 };
const char *CrossType_descriptions[]  
   { "CROSSAON", "CROSSIOC", "CROSSONESIDE", "CROSSSAMEPRICE" };
const int CrossPrioritization_realm[]  
   { 0, 1, 2 };
const char *CrossPrioritization_descriptions[]  
   { "NONE", "BUY_SIDE_PRIORITIZED", "SELL_SIDE_PRIORITIZED" };
const int NoSides_realm[]  
   { 1, 2 };
const char *NoSides_descriptions[]  
   { "ONESIDE", "BOTHSIDES" };
const int SecurityListRequestType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *SecurityListRequestType_descriptions[]  
   { "SYMBOL", "SECURITYTYPECFICODE", "PRODUCT", "TRADINGSESSIONID", "ALLSECURITIES" };
const int SecurityRequestResult_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *SecurityRequestResult_descriptions[]  
   { "VALIDREQ", "INVALIDREQ", "NOINSTRUMENTSFOUND", "NOTAUTHORIZED", "INSTRUMENTUNAVAILABLE", "NOTSUPPORTED" };
const int MultiLegRptTypeReq_realm[]  
   { 0, 1, 2 };
const char *MultiLegRptTypeReq_descriptions[]  
   { "REPORT_BY_MULITLEG_SECURITY_ONLY", "REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY", "REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY" };
const int TradSesStatusRejReason_realm[]  
   { 1, 99 };
const char *TradSesStatusRejReason_descriptions[]  
   { "UNKNOWNTRADINGSESSIONID", "OTHER" };
const int TradeRequestType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *TradeRequestType_descriptions[]  
   { "ALLTRADES", "MATCHEDTRADES", "UNMATCHEDTRADES", "UNREPORTEDTRADES", "ADVISORIESMATCH" };
const char PreviouslyReported_realm[]  
   { 'N', 'Y' };
const char *PreviouslyReported_descriptions[]  
   { "NO", "YES" };
const char MatchStatus_realm[]  
   { '0', '1', '2' };
const char *MatchStatus_descriptions[]  
   { "COMPMATAFF", "UNCOMPUNMATUNAFF", "ADVALERT" };
const f8String MatchType_realm[]  
   { "A1", "A2", "A3", "A4", "A5", "ACTM1", "ACTM2", "ACTM3", "ACTM4", "ACTM5", "ACTM6", "ACTMT", "AQ", "M1", "M2", "MT", "S1", "S2", "S3", "S4", "S5" };
const char *MatchType_descriptions[]  
   { "EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSFOURBADGESANDEXECUTIONTIME", "EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSFOURBADGES", "EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSTWOBADGESANDEXECUTIONTIME", "EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSTWOBADGES", "EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSEXECUTIONTIME", "NASDAQACTM1MATCH", "NASDAQACTM2MATCH", "NASDAQACTACCEPTEDTRADE", "NASDAQACTDEFAULTTRADE", "NASDAQACTDEFAULTAFTERM2", "NASDAQACTM6MATCH", "NASDAQNONACT", "COMPAREDRECORDSRESULTINGFROMSTAMPEDADVISORIESORSPECIALISTACCEPTSPAIROFFS", "EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORMINUSBADGESANDTIMES", "SUMMARIZEDMATCHMINUSBADGESANDTIMES", "OCSLOCKEDIN", "SUMMARIZEDMATCHUSINGA1", "SUMMARIZEDMATCHUSINGA2", "SUMMARIZEDMATCHUSINGA3", "SUMMARIZEDMATCHUSINGA4", "SUMMARIZEDMATCHUSINGA5" };
const char OddLot_realm[]  
   { 'N', 'Y' };
const char *OddLot_descriptions[]  
   { "NO", "YES" };
const int ClearingInstruction_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *ClearingInstruction_descriptions[]  
   { "PROCESSNORMALLY", "EXCLUDEFROMALLNETTING", "BILATERALNETTINGONLY", "EXCLEARING", "SPECIALTRADE", "MULTILATERALNETTING", "CLEARAGAINSTCENTRALCOUNTERPARTY", "EXCLUDEFROMCENTRALCOUNTERPARTY", "MANUALMODEPREPOSTINGANDORPREGIVEUP", "AUTOMATICPOSTINGMODETRADEPOSTINGTOTHEPOSITIONACCOUNTNUMBERSPECIFIED", "AUTOMATICGIVEUPMODETRADEGIVEUPTOTHEGIVEUPDESTINATIONNUMBERSPECIFIED", "QUALIFIEDSERVICEREPRESENTATIVEQSR", "CUSTOMERTRADE", "SELFCLEARING" };
const int AccountType_realm[]  
   { 1, 2, 3, 4, 6, 7, 8 };
const char *AccountType_descriptions[]  
   { "ACCOUNTCUSTOMER", "ACCOUNTNONCUSTOMER", "HOUSETRADER", "FLOORTRADER", "ACCOUNTNONCUSTOMERCROSS", "HOUSETRADERCROSS", "JOINTBOACCT" };
const int CustOrderCapacity_realm[]  
   { 1, 2, 3, 4 };
const char *CustOrderCapacity_descriptions[]  
   { "MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT", "CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT", "MEMBER_TRADING_FOR_ANOTHER_MEMBER", "ALL_OTHER" };
const int MassStatusReqType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8 };
const char *MassStatusReqType_descriptions[]  
   { "STATUSSECURITY", "STATUSUNDERLYINGSECURITY", "STATUSPRODUCT", "STATUSCFICODE", "STATUSSECURITYTYPE", "STATUSTRDSESSION", "STATUSALLORDERS", "STATUSPARTYID" };
const char DayBookingInst_realm[]  
   { '0', '1', '2' };
const char *DayBookingInst_descriptions[]  
   { "CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR_AUTO", "SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING_SPEAK_FIRST", "ACCUMULATE" };
const char BookingUnit_realm[]  
   { '0', '1', '2' };
const char *BookingUnit_descriptions[]  
   { "EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT", "AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER", "AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE" };
const char PreallocMethod_realm[]  
   { '0', '1' };
const char *PreallocMethod_descriptions[]  
   { "PRORATA", "DO_NOT_PRORATA_DISCUSS_FIRST" };
const int AllocType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8 };
const char *AllocType_descriptions[]  
   { "BUYSIDECALC", "BUYSIDEPRELIM", "SELLSIDECALC", "SELLSIDECALCWITHOUTPRELIM", "BUYSIDEREADYTOBOOKSINGLE", "BUYSIDEREADYTOBOOKCOMBINED", "WAREHOUSEINSTRUCTION", "REQUESTTOINTERMEDIARY" };
const f8String ClearingFeeIndicator_realm[]  
   { "1", "2", "3", "4", "5", "9", "B", "C", "E", "F", "H", "I", "L", "M" };
const char *ClearingFeeIndicator_descriptions[]  
   { "1STYEARDELEGATE", "2NDYEARDELEGATE", "3RDYEARDELEGATE", "4THYEARDELEGATE", "5THYEARDELEGATE", "6THYEARDELEGATE", "CBOEMEMBER", "NONMEMBERCUSTOMER", "EQUITYCLEARINGMEMBER", "FULLASSOCIATEMEMBER", "106H106J", "GIMIDEMCOMMEMBERSHIP", "LESSEE106F", "ALLOTHERS" };
const char WorkingIndicator_realm[]  
   { 'N', 'Y' };
const char *WorkingIndicator_descriptions[]  
   { "NO", "YES" };
const int PriorityIndicator_realm[]  
   { 0, 1 };
const char *PriorityIndicator_descriptions[]  
   { "PRIORITYUNCHANGED", "LOSTPRIORITY" };
const char LegalConfirm_realm[]  
   { 'N', 'Y' };
const char *LegalConfirm_descriptions[]  
   { "NO", "YES" };
const int QuoteRequestRejectReason_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99 };
const char *QuoteRequestRejectReason_descriptions[]  
   { "UNKNOWNSYM", "EXCHANGECLOSED", "QUOTEREQUESTEXLIMIT", "TOOLATE", "INVPRICE", "NOTAUTHTOREQQUOTE", "NOMATCHFORINQUIRY", "NOMARKETFORINSTRUMENT", "NOINVENTORY", "PASS", "OTHER" };
const int AcctIDSource_realm[]  
   { 1, 2, 3, 4, 5, 99 };
const char *AcctIDSource_descriptions[]  
   { "BIC", "SIDCODE", "TFMGSPTA", "OMGEOALERTID", "DTCCCODE", "OTHER" };
const int ConfirmStatus_realm[]  
   { 1, 2, 3, 4, 5 };
const char *ConfirmStatus_descriptions[]  
   { "RECEIVED", "MISMATCHEDACCOUNT", "MISSINGSETTLEMENTINSTRUCTIONS", "CONFIRMED", "REQUESTREJECTED" };
const int ConfirmTransType_realm[]  
   { 0, 1, 2 };
const char *ConfirmTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL" };
const int DeliveryForm_realm[]  
   { 1, 2 };
const char *DeliveryForm_descriptions[]  
   { "BOOKENTRY", "BEARER" };
const int LegSwapType_realm[]  
   { 1, 2, 4, 5 };
const char *LegSwapType_descriptions[]  
   { "PARFORPAR", "MODIFIEDDURATION", "RISK", "PROCEEDS" };
const int QuotePriceType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
const char *QuotePriceType_descriptions[]  
   { "PERCENT", "PERSHARE", "FIXEDAMOUNT", "DISCOUNT", "PREMIUM", "BASISPOINTSRELATIVETOBENCHMARK", "TEDPRICE", "TEDYIELD", "YIELDSPREADSWAPS", "YIELD" };
const int QuoteRespType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *QuoteRespType_descriptions[]  
   { "HITLIFT", "COUNTER", "EXPIRED", "COVER", "DONEAWAY", "PASS" };
const f8String PosType_realm[]  
   { "ALC", "AS", "ASF", "DLV", "ETR", "EX", "FIN", "IAS", "IES", "PA", "PIT", "SOD", "SPL", "TA", "TOT", "TQ", "TRF", "TX", "XM" };
const char *PosType_descriptions[]  
   { "ALLOCATIONTRADEQTY", "OPTIONASSIGNMENT", "ASOFTRADEQTY", "DELIVERYQTY", "ELECTRONICTRADEQTY", "OPTIONEXERCISEQTY", "ENDOFDAYQTY", "INTRASPREADQTY", "INTERSPREADQTY", "ADJUSTMENTQTY", "PITTRADEQTY", "STARTOFDAYQTY", "INTEGRALSPLIT", "TRANSACTIONFROMASSIGNMENT", "TOTALTRANSACTIONQTY", "TRANSACTIONQUANTITY", "TRANSFERTRADEQTY", "TRANSACTIONFROMEXERCISE", "CROSSMARGINQTY" };
const int PosQtyStatus_realm[]  
   { 0, 1, 2 };
const char *PosQtyStatus_descriptions[]  
   { "SUBMITTED", "ACCEPTED", "REJECTED" };
const f8String PosAmtType_realm[]  
   { "CASH", "CRES", "FMTM", "IMTM", "PREM", "SMTM", "TVAR", "VADJ" };
const char *PosAmtType_descriptions[]  
   { "CASHAMOUNTCORPORATEEVENT", "CASHRESIDUALAMOUNT", "FINALMARKTOMARKETAMOUNT", "INCREMENTALMARKTOMARKETAMOUNT", "PREMIUMAMOUNT", "STARTOFDAYMARKTOMARKETAMOUNT", "TRADEVARIATIONAMOUNT", "VALUEADJUSTEDAMOUNT" };
const int PosTransType_realm[]  
   { 1, 2, 3, 4, 5 };
const char *PosTransType_descriptions[]  
   { "EXERCISE", "DONOTEXERCISE", "POSITIONADJUSTMENT", "POSITIONCHANGESUBMISSIONMARGINDISPOSITION", "PLEDGE" };
const int PosMaintAction_realm[]  
   { 1, 2, 3 };
const char *PosMaintAction_descriptions[]  
   { "NEW", "REPLACE", "CANCEL" };
const int AdjustmentType_realm[]  
   { 0, 1, 2, 3 };
const char *AdjustmentType_descriptions[]  
   { "PROCESSREQUESTASMARGINDISPOSITION", "DELTAPLUS", "DELTAMINUS", "FINAL" };
const int PosMaintStatus_realm[]  
   { 0, 1, 2, 3, 4 };
const char *PosMaintStatus_descriptions[]  
   { "ACCEPTED", "ACCEPTEDWITHWARNINGS", "REJECTED", "COMPLETED", "COMPLETEDWITHWARNINGS" };
const int PosMaintResult_realm[]  
   { 0, 1, 99 };
const char *PosMaintResult_descriptions[]  
   { "SUCCESSFULCOMPLETION", "REJECTED", "OTHER" };
const int PosReqType_realm[]  
   { 0, 1, 2, 3 };
const char *PosReqType_descriptions[]  
   { "POSITIONS", "TRADES", "EXERCISES", "ASSIGNMENTS" };
const int ResponseTransportType_realm[]  
   { 0, 1 };
const char *ResponseTransportType_descriptions[]  
   { "INBAND", "OUTOFBAND" };
const int PosReqResult_realm[]  
   { 0, 1, 2, 3, 4, 99 };
const char *PosReqResult_descriptions[]  
   { "VALIDREQUEST", "INVALIDORUNSUPPORTEDREQUEST", "NOPOSITIONSFOUNDTHATMATCHCRITERIA", "NOTAUTHORIZEDTOREQUESTPOSITIONS", "REQUESTFORPOSITIONNOTSUPPORTED", "OTHER" };
const int PosReqStatus_realm[]  
   { 0, 1, 2 };
const char *PosReqStatus_descriptions[]  
   { "COMPLETED", "COMPLETEDWITHWARNINGS", "REJECTED" };
const int SettlPriceType_realm[]  
   { 1, 2 };
const char *SettlPriceType_descriptions[]  
   { "FINAL", "THEORETICAL" };
const char AssignmentMethod_realm[]  
   { 'P', 'R' };
const char *AssignmentMethod_descriptions[]  
   { "PRORATA", "RANDOM" };
const char ExerciseMethod_realm[]  
   { 'A', 'M' };
const char *ExerciseMethod_descriptions[]  
   { "AUTOMATIC", "MANUAL" };
const int TradeRequestResult_realm[]  
   { 0, 1, 2, 3, 4, 5, 8, 9, 99 };
const char *TradeRequestResult_descriptions[]  
   { "SUCCESSFUL", "INVALIDORUNKNOWNINSTRUMENT", "INVALIDTYPEOFTRADEREQUESTED", "INVALIDPARTIES", "INVALIDTRANSPORTTYPEREQUESTED", "INVALIDDESTINATIONREQUESTED", "TRADEREQUESTTYPENOTSUPPORTED", "UNAUTHORIZEDFORTRADECAPTUREREPORTREQUEST", "OTHER" };
const int TradeRequestStatus_realm[]  
   { 0, 1, 2 };
const char *TradeRequestStatus_descriptions[]  
   { "ACCEPTED", "COMPLETED", "REJECTED" };
const int TradeReportRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 99 };
const char *TradeReportRejectReason_descriptions[]  
   { "SUCCESSFULDEFAULT", "INVALIDPARTYINFORMATION", "UNKNOWNINSTRUMENT", "UNAUTHORIZEDTOREPORTTRADES", "INVALIDTRADETYPE", "OTHER" };
const int SideMultiLegReportingType_realm[]  
   { 1, 2, 3 };
const char *SideMultiLegReportingType_descriptions[]  
   { "SINGLESECURITY", "INDIVIDUALLEGOFAMULTILEGSECURITY", "MULTILEGSECURITY" };
const int TrdRegTimestampType_realm[]  
   { 1, 2, 3, 4, 5 };
const char *TrdRegTimestampType_descriptions[]  
   { "EXECUTIONTIME", "TIMEIN", "TIMEOUT", "BROKERRECEIPT", "BROKEREXECUTION" };
const int ConfirmType_realm[]  
   { 1, 2, 3 };
const char *ConfirmType_descriptions[]  
   { "STATUS", "CONFIRMATION", "CONFIRMATIONREQUESTREJECTED" };
const int ConfirmRejReason_realm[]  
   { 1, 2, 99 };
const char *ConfirmRejReason_descriptions[]  
   { "MISMATCHEDACCOUNT", "MISSINGSETTLEMENTINSTRUCTIONS", "OTHER" };
const int BookingType_realm[]  
   { 0, 1, 2 };
const char *BookingType_descriptions[]  
   { "REGULARBOOKING", "CFDCONTRACTFORDIFFERENCE", "TOTALRETURNSWAP" };
const int AllocSettlInstType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *AllocSettlInstType_descriptions[]  
   { "USEDEFAULTINSTRUCTIONS", "DERIVEFROMPARAMETERSPROVIDED", "FULLDETAILSPROVIDED", "SSIDBIDSPROVIDED", "PHONEFORINSTRUCTIONS" };
const char DlvyInstType_realm[]  
   { 'C', 'S' };
const char *DlvyInstType_descriptions[]  
   { "CASH", "SECURITIES" };
const int TerminationType_realm[]  
   { 1, 2, 3, 4 };
const char *TerminationType_descriptions[]  
   { "OVERNIGHT", "TERM", "FLEXIBLE", "OPEN" };
const int SettlInstReqRejCode_realm[]  
   { 0, 1, 2, 99 };
const char *SettlInstReqRejCode_descriptions[]  
   { "UNABLETOPROCESSREQUEST", "UNKNOWNACCOUNT", "NOMATCHINGSETTLEMENTINSTRUCTIONSFOUND", "OTHER" };
const int AllocReportType_realm[]  
   { 3, 4, 5, 8 };
const char *AllocReportType_descriptions[]  
   { "SELLSIDECALCULATEDUSINGPRELIMINARY", "SELLSIDECALCULATEDWITHOUTPRELIMINARY", "WAREHOUSERECAP", "REQUESTTOINTERMEDIARY" };
const int AllocCancReplaceReason_realm[]  
   { 1, 2, 99 };
const char *AllocCancReplaceReason_descriptions[]  
   { "ORIGINALDETAILSINCORRECT", "CHANGEINUNDERLYINGORDERDETAILS", "OTHER" };
const int AllocAccountType_realm[]  
   { 1, 2, 3, 4, 6, 7, 8 };
const char *AllocAccountType_descriptions[]  
   { "ACCOUNTISCARRIEDONCUSTOMERSIDEOFBOOKS", "ACCOUNTISCARRIEDONNONCUSTOMERSIDEOFBOOKS", "HOUSETRADER", "FLOORTRADER", "ACCOUNTISCARRIEDONNONCUSTOMERSIDEOFBOOKSANDISCROSSMARGINED", "ACCOUNTISHOUSETRADERANDISCROSSMARGINED", "JBO" };
const int PartySubIDType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 4000 };
const char *PartySubIDType_descriptions[]  
   { "FIRM", "PERSON", "SYSTEM", "APPLICATION", "FULLLEGALNAMEOFFIRM", "POSTALADDRESS", "PHONENUMBER", "EMAILADDRESS", "CONTACTNAME", "SECURITIESACCOUNTNUMBER", "REGISTRATIONNUMBER", "REGISTEREDADDRESS_12", "REGULATORYSTATUS", "REGISTRATIONNAME", "CASHACCOUNT", "BIC", "CSDPARTICIPANTMEMBERCODE", "REGISTEREDADDRESS_18", "FUNDACCOUNTNAME", "TELEXNUMBER", "FAXNUMBER", "SECURITIESACCOUNTNAME", "CASHACCOUNTNAME", "DEPARTMENT", "LOCATIONDESK", "POSITIONACCOUNTTYPE", "RESERVEDANDAVAILABLEFORBILATERALLYAGREEDUPONUSERDEFINEDVALUES" };
const int AllocIntermedReqType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *AllocIntermedReqType_descriptions[]  
   { "PENDINGACCEPT", "PENDINGRELEASE", "PENDINGREVERSAL", "ACCEPT", "BLOCKLEVELREJECT", "ACCOUNTLEVELREJECT" };
const int ApplQueueResolution_realm[]  
   { 0, 1, 2, 3 };
const char *ApplQueueResolution_descriptions[]  
   { "NOACTIONTAKEN", "QUEUEFLUSHED", "OVERLAYLAST", "ENDSESSION" };
const int ApplQueueAction_realm[]  
   { 0, 1, 2, 3 };
const char *ApplQueueAction_descriptions[]  
   { "NOACTIONTAKEN", "QUEUEFLUSHED", "OVERLAYLAST", "ENDSESSION" };
const int AvgPxIndicator_realm[]  
   { 0, 1, 2 };
const char *AvgPxIndicator_descriptions[]  
   { "NOAVERAGEPRICING", "TRADEAVERAGEPRICEGROUP", "LASTTRADEAVERAGEPRICEGROUP" };
const int TradeAllocIndicator_realm[]  
   { 0, 1, 2 };
const char *TradeAllocIndicator_descriptions[]  
   { "ALLOCATIONNOTREQUIRED", "ALLOCATIONREQUIREDALLOCATIONINFORMATIONNOTPROVIDED", "USEALLOCATIONPROVIDEDWITHTHETRADE" };
const int ExpirationCycle_realm[]  
   { 0, 1 };
const char *ExpirationCycle_descriptions[]  
   { "EXPIREONTRADINGSESSIONCLOSE", "EXPIREONTRADINGSESSIONOPEN" };
const int TrdType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
const char *TrdType_descriptions[]  
   { "REGULARTRADE", "BLOCKTRADE", "EFP", "TRANSFER", "LATETRADE", "TTRADE", "WEIGHTEDAVERAGEPRICETRADE", "BUNCHEDTRADE", "LATEBUNCHEDTRADE", "PRIORREFERENCEPRICETRADE", "AFTERHOURSTRADE" };
const int PegMoveType_realm[]  
   { 0, 1 };
const char *PegMoveType_descriptions[]  
   { "FLOATING", "FIXED" };
const int PegOffsetType_realm[]  
   { 0, 1, 2, 3 };
const char *PegOffsetType_descriptions[]  
   { "PRICE", "BASISPOINTS", "TICKS", "PRICETIERLEVEL" };
const int PegLimitType_realm[]  
   { 0, 1, 2 };
const char *PegLimitType_descriptions[]  
   { "ORBETTER", "STRICT", "ORWORSE" };
const int PegRoundDirection_realm[]  
   { 1, 2 };
const char *PegRoundDirection_descriptions[]  
   { "MOREAGGRESSIVE", "MOREPASSIVE" };
const int PegScope_realm[]  
   { 1, 2, 3, 4 };
const char *PegScope_descriptions[]  
   { "LOCALEXCHANGEECNATS", "NATIONAL", "GLOBAL", "NATIONALEXCLUDINGLOCAL" };
const int DiscretionMoveType_realm[]  
   { 0, 1 };
const char *DiscretionMoveType_descriptions[]  
   { "FLOATING", "FIXED" };
const int DiscretionOffsetType_realm[]  
   { 0, 1, 2, 3 };
const char *DiscretionOffsetType_descriptions[]  
   { "PRICE", "BASISPOINTS", "TICKS", "PRICETIERLEVEL" };
const int DiscretionLimitType_realm[]  
   { 0, 1, 2 };
const char *DiscretionLimitType_descriptions[]  
   { "ORBETTER", "STRICT", "ORWORSE" };
const int DiscretionRoundDirection_realm[]  
   { 1, 2 };
const char *DiscretionRoundDirection_descriptions[]  
   { "MOREAGGRESSIVE", "MOREPASSIVE" };
const int DiscretionScope_realm[]  
   { 1, 2, 3, 4 };
const char *DiscretionScope_descriptions[]  
   { "LOCALEXCHANGEECNATS", "NATIONAL", "GLOBAL", "NATIONALEXCLUDINGLOCAL" };
const int TargetStrategy_realm[]  
   { 1, 2, 3, 1000 };
const char *TargetStrategy_descriptions[]  
   { "VWAP", "PARTICIPATE", "MININIZEMARKETIMPACT", "RESERVEDANDAVAILABLEFORBILATERALLYAGREEDUPONUSERDEFINEDVALUES" };
const int LastLiquidityInd_realm[]  
   { 1, 2, 3 };
const char *LastLiquidityInd_descriptions[]  
   { "ADDEDLIQUIDITY", "REMOVEDLIQUIDITY", "LIQUIDITYROUTEDOUT" };
const char PublishTrdIndicator_realm[]  
   { 'N', 'Y' };
const char *PublishTrdIndicator_descriptions[]  
   { "NO", "YES" };
const int ShortSaleReason_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *ShortSaleReason_descriptions[]  
   { "DEALERSOLDSHORT", "DEALERSOLDSHORTEXEMPT", "SELLINGCUSTOMERSOLDSHORT", "SELLINGCUSTOMERSOLDSHORTEXEMPT", "QSRORAGUCONTRASIDESOLDSHORT", "QSRORAGUCONTRASIDESOLDSHORTEXEMPT" };
const int QtyType_realm[]  
   { 0, 1 };
const char *QtyType_descriptions[]  
   { "UNITS", "CONTRACTS" };
const int TradeReportType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *TradeReportType_descriptions[]  
   { "SUBMIT", "ALLEGED", "ACCEPT", "DECLINE", "ADDENDUM", "NOWAS", "TRADEREPORTCANCEL", "LOCKEDINTRADEBREAK" };
const int AllocNoOrdersType_realm[]  
   { 0, 1 };
const char *AllocNoOrdersType_descriptions[]  
   { "NOTSPECIFIED", "EXPLICITLISTPROVIDED" };
const int EventType_realm[]  
   { 1, 2, 3, 4, 99 };
const char *EventType_descriptions[]  
   { "PUT", "CALL", "TENDER", "SINKINGFUNDCALL", "OTHER" };
const int InstrAttribType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 99 };
const char *InstrAttribType_descriptions[]  
   { "FLAT", "ZEROCOUPON", "INTERESTBEARING", "NOPERIODICPAYMENTS", "VARIABLERATE", "LESSFEEFORPUT", "STEPPEDCOUPON", "COUPONPERIOD", "WHENISSUED", "ORIGINALISSUEDISCOUNT", "CALLABLEPUTTABLE", "ESCROWEDTOMATURITY", "ESCROWEDTOREDEMPTIONDATE", "PREREFUNDED", "INDEFAULT", "UNRATED", "TAXABLE", "INDEXED", "SUBJECTTOALTERNATIVEMINIMUMTAX", "ORIGINALISSUEDISCOUNTPRICE", "CALLABLEBELOWMATURITYVALUE", "CALLABLEWITHOUTNOTICEBYMAILTOHOLDERUNLESSREGISTERED", "TEXT" };
const int CPProgram_realm[]  
   { 1, 2, 99 };
const char *CPProgram_descriptions[]  
   { "3A3", "42", "OTHER" };
const int MiscFeeBasis_realm[]  
   { 0, 1, 2 };
const char *MiscFeeBasis_descriptions[]  
   { "ABSOLUTE", "PERUNIT", "PERCENTAGE" };
const char LastFragment_realm[]  
   { 'N', 'Y' };
const char *LastFragment_descriptions[]  
   { "NO", "YES" };
const int CollAsgnReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *CollAsgnReason_descriptions[]  
   { "INITIAL", "SCHEDULED", "TIMEWARNING", "MARGINDEFICIENCY", "MARGINEXCESS", "FORWARDCOLLATERALDEMAND", "EVENTOFDEFAULT", "ADVERSETAXEVENT" };
const int CollInquiryQualifier_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *CollInquiryQualifier_descriptions[]  
   { "TRADEDATE", "GCINSTRUMENT", "COLLATERALINSTRUMENT", "SUBSTITUTIONELIGIBLE", "NOTASSIGNED", "PARTIALLYASSIGNED", "FULLYASSIGNED", "OUTSTANDINGTRADES" };
const int CollAsgnTransType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *CollAsgnTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL", "RELEASE", "REVERSE" };
const int CollAsgnRespType_realm[]  
   { 0, 1, 2, 3 };
const char *CollAsgnRespType_descriptions[]  
   { "RECEIVED", "ACCEPTED", "DECLINED", "REJECTED" };
const int CollAsgnRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 99 };
const char *CollAsgnRejectReason_descriptions[]  
   { "UNKNOWNDEAL", "UNKNOWNORINVALIDINSTRUMENT", "UNAUTHORIZEDTRANSACTION", "INSUFFICIENTCOLLATERAL", "INVALIDTYPEOFCOLLATERAL", "EXCESSIVESUBSTITUTION", "OTHER" };
const int CollStatus_realm[]  
   { 0, 1, 2, 3, 4 };
const char *CollStatus_descriptions[]  
   { "UNASSIGNED", "PARTIALLYASSIGNED", "ASSIGNMENTPROPOSED", "ASSIGNEDACCEPTED", "CHALLENGED" };
const char LastRptRequested_realm[]  
   { 'N', 'Y' };
const char *LastRptRequested_descriptions[]  
   { "NO", "YES" };
const int DeliveryType_realm[]  
   { 0, 1, 2, 3 };
const char *DeliveryType_descriptions[]  
   { "VERSUSPAYMENT", "FREE", "TRIPARTY", "HOLDINCUSTODY" };
const int UserRequestType_realm[]  
   { 1, 2, 3, 4 };
const char *UserRequestType_descriptions[]  
   { "LOGONUSER", "LOGOFFUSER", "CHANGEPASSWORDFORUSER", "REQUESTINDIVIDUALUSERSTATUS" };
const int UserStatus_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *UserStatus_descriptions[]  
   { "LOGGEDIN", "NOTLOGGEDIN", "USERNOTRECOGNISED", "PASSWORDINCORRECT", "PASSWORDCHANGED", "OTHER" };
const int StatusValue_realm[]  
   { 1, 2, 3, 4 };
const char *StatusValue_descriptions[]  
   { "CONNECTED", "NOTCONNECTEDDOWNEXPECTEDUP", "NOTCONNECTEDDOWNEXPECTEDDOWN", "INPROCESS" };
const int NetworkRequestType_realm[]  
   { 1, 2, 4, 8 };
const char *NetworkRequestType_descriptions[]  
   { "SNAPSHOT", "SUBSCRIBE", "STOPSUBSCRIBING", "LEVELOFDETAIL" };
const int NetworkStatusResponseType_realm[]  
   { 1, 2 };
const char *NetworkStatusResponseType_descriptions[]  
   { "FULL", "INCREMENTALUPDATE" };
const int TrdRptStatus_realm[]  
   { 0, 1 };
const char *TrdRptStatus_descriptions[]  
   { "ACCEPTED", "REJECTED" };
const int AffirmStatus_realm[]  
   { 1, 2, 3 };
const char *AffirmStatus_descriptions[]  
   { "RECEIVED", "CONFIRMREJECTED", "AFFIRMED" };
const int CollAction_realm[]  
   { 0, 1, 2 };
const char *CollAction_descriptions[]  
   { "RETAIN", "ADD", "REMOVE" };
const int CollInquiryStatus_realm[]  
   { 0, 1, 2, 3, 4 };
const char *CollInquiryStatus_descriptions[]  
   { "ACCEPTED", "ACCEPTEDWITHWARNINGS", "COMPLETED", "COMPLETEDWITHWARNINGS", "REJECTED" };
const int CollInquiryResult_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 99 };
const char *CollInquiryResult_descriptions[]  
   { "SUCCESSFUL", "INVALIDORUNKNOWNINSTRUMENT", "INVALIDORUNKNOWNCOLLATERALTYPE", "INVALIDPARTIES", "INVALIDTRANSPORTTYPEREQUESTED", "INVALIDDESTINATIONREQUESTED", "NOCOLLATERALFOUNDFORTHETRADESPECIFIED", "NOCOLLATERALFOUNDFORTHEORDERSPECIFIED", "COLLATERALINQUIRYTYPENOTSUPPORTED", "UNAUTHORIZEDFORCOLLATERALINQUIRY", "OTHER" };

//-------------------------------------------------------------------------------------------------
const RealmBase realmbases[] 
{
   { reinterpret_cast<const void *>(AdvSide_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, AdvSide_descriptions },
   { reinterpret_cast<const void *>(AdvTransType_realm), RealmBase::dt_set, FieldTrait::ft_string, 3, AdvTransType_descriptions },
   { reinterpret_cast<const void *>(CommType_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, CommType_descriptions },
   { reinterpret_cast<const void *>(ExecInst_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 40, ExecInst_descriptions },
   { reinterpret_cast<const void *>(HandlInst_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, HandlInst_descriptions },
   { reinterpret_cast<const void *>(SecurityIDSource_realm), RealmBase::dt_set, FieldTrait::ft_string, 19, SecurityIDSource_descriptions },
   { reinterpret_cast<const void *>(IOIQltyInd_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, IOIQltyInd_descriptions },
   { reinterpret_cast<const void *>(IOITransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, IOITransType_descriptions },
   { reinterpret_cast<const void *>(LastCapacity_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, LastCapacity_descriptions },
   { reinterpret_cast<const void *>(MsgType_realm), RealmBase::dt_set, FieldTrait::ft_string, 93, MsgType_descriptions },
   { reinterpret_cast<const void *>(OrdStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 14, OrdStatus_descriptions },
   { reinterpret_cast<const void *>(OrdType_realm), RealmBase::dt_set, FieldTrait::ft_char, 23, OrdType_descriptions },
   { reinterpret_cast<const void *>(PossDupFlag_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, PossDupFlag_descriptions },
   { reinterpret_cast<const void *>(Side_realm), RealmBase::dt_set, FieldTrait::ft_char, 16, Side_descriptions },
   { reinterpret_cast<const void *>(TimeInForce_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, TimeInForce_descriptions },
   { reinterpret_cast<const void *>(Urgency_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, Urgency_descriptions },
   { reinterpret_cast<const void *>(SettlType_realm), RealmBase::dt_set, FieldTrait::ft_char, 10, SettlType_descriptions },
   { reinterpret_cast<const void *>(SymbolSfx_realm), RealmBase::dt_set, FieldTrait::ft_string, 2, SymbolSfx_descriptions },
   { reinterpret_cast<const void *>(AllocTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, AllocTransType_descriptions },
   { reinterpret_cast<const void *>(PositionEffect_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, PositionEffect_descriptions },
   { reinterpret_cast<const void *>(ProcessCode_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, ProcessCode_descriptions },
   { reinterpret_cast<const void *>(AllocStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, AllocStatus_descriptions },
   { reinterpret_cast<const void *>(AllocRejCode_realm), RealmBase::dt_set, FieldTrait::ft_int, 14, AllocRejCode_descriptions },
   { reinterpret_cast<const void *>(EmailType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, EmailType_descriptions },
   { reinterpret_cast<const void *>(PossResend_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, PossResend_descriptions },
   { reinterpret_cast<const void *>(EncryptMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, EncryptMethod_descriptions },
   { reinterpret_cast<const void *>(CxlRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, CxlRejReason_descriptions },
   { reinterpret_cast<const void *>(OrdRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 17, OrdRejReason_descriptions },
   { reinterpret_cast<const void *>(IOIQualifier_realm), RealmBase::dt_set, FieldTrait::ft_char, 18, IOIQualifier_descriptions },
   { reinterpret_cast<const void *>(ReportToExch_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, ReportToExch_descriptions },
   { reinterpret_cast<const void *>(LocateReqd_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, LocateReqd_descriptions },
   { reinterpret_cast<const void *>(ForexReq_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, ForexReq_descriptions },
   { reinterpret_cast<const void *>(GapFillFlag_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, GapFillFlag_descriptions },
   { reinterpret_cast<const void *>(DKReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, DKReason_descriptions },
   { reinterpret_cast<const void *>(IOINaturalFlag_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, IOINaturalFlag_descriptions },
   { reinterpret_cast<const void *>(MiscFeeType_realm), RealmBase::dt_set, FieldTrait::ft_char, 9, MiscFeeType_descriptions },
   { reinterpret_cast<const void *>(ResetSeqNumFlag_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, ResetSeqNumFlag_descriptions },
   { reinterpret_cast<const void *>(ExecType_realm), RealmBase::dt_set, FieldTrait::ft_char, 17, ExecType_descriptions },
   { reinterpret_cast<const void *>(SettlCurrFxRateCalc_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, SettlCurrFxRateCalc_descriptions },
   { reinterpret_cast<const void *>(SettlInstMode_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, SettlInstMode_descriptions },
   { reinterpret_cast<const void *>(SettlInstTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, SettlInstTransType_descriptions },
   { reinterpret_cast<const void *>(SettlInstSource_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, SettlInstSource_descriptions },
   { reinterpret_cast<const void *>(SecurityType_realm), RealmBase::dt_set, FieldTrait::ft_string, 96, SecurityType_descriptions },
   { reinterpret_cast<const void *>(StandInstDbType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, StandInstDbType_descriptions },
   { reinterpret_cast<const void *>(AllocLinkType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, AllocLinkType_descriptions },
   { reinterpret_cast<const void *>(CoveredOrUncovered_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, CoveredOrUncovered_descriptions },
   { reinterpret_cast<const void *>(NotifyBrokerOfCredit_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, NotifyBrokerOfCredit_descriptions },
   { reinterpret_cast<const void *>(AllocHandlInst_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AllocHandlInst_descriptions },
   { reinterpret_cast<const void *>(RoutingType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, RoutingType_descriptions },
   { reinterpret_cast<const void *>(BenchmarkCurveName_realm), RealmBase::dt_set, FieldTrait::ft_string, 12, BenchmarkCurveName_descriptions },
   { reinterpret_cast<const void *>(StipulationType_realm), RealmBase::dt_set, FieldTrait::ft_string, 62, StipulationType_descriptions },
   { reinterpret_cast<const void *>(YieldType_realm), RealmBase::dt_set, FieldTrait::ft_string, 34, YieldType_descriptions },
   { reinterpret_cast<const void *>(TradedFlatSwitch_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, TradedFlatSwitch_descriptions },
   { reinterpret_cast<const void *>(SubscriptionRequestType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, SubscriptionRequestType_descriptions },
   { reinterpret_cast<const void *>(MDUpdateType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, MDUpdateType_descriptions },
   { reinterpret_cast<const void *>(MDEntryType_realm), RealmBase::dt_set, FieldTrait::ft_char, 13, MDEntryType_descriptions },
   { reinterpret_cast<const void *>(TickDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, TickDirection_descriptions },
   { reinterpret_cast<const void *>(QuoteCondition_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 9, QuoteCondition_descriptions },
   { reinterpret_cast<const void *>(TradeCondition_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 17, TradeCondition_descriptions },
   { reinterpret_cast<const void *>(MDUpdateAction_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, MDUpdateAction_descriptions },
   { reinterpret_cast<const void *>(MDReqRejReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 13, MDReqRejReason_descriptions },
   { reinterpret_cast<const void *>(DeleteReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, DeleteReason_descriptions },
   { reinterpret_cast<const void *>(OpenCloseSettlFlag_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 6, OpenCloseSettlFlag_descriptions },
   { reinterpret_cast<const void *>(FinancialStatus_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 2, FinancialStatus_descriptions },
   { reinterpret_cast<const void *>(CorporateAction_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 5, CorporateAction_descriptions },
   { reinterpret_cast<const void *>(QuoteStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 16, QuoteStatus_descriptions },
   { reinterpret_cast<const void *>(QuoteCancelType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, QuoteCancelType_descriptions },
   { reinterpret_cast<const void *>(QuoteRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 10, QuoteRejectReason_descriptions },
   { reinterpret_cast<const void *>(QuoteResponseLevel_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, QuoteResponseLevel_descriptions },
   { reinterpret_cast<const void *>(QuoteRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, QuoteRequestType_descriptions },
   { reinterpret_cast<const void *>(SecurityRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, SecurityRequestType_descriptions },
   { reinterpret_cast<const void *>(SecurityResponseType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, SecurityResponseType_descriptions },
   { reinterpret_cast<const void *>(UnsolicitedIndicator_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, UnsolicitedIndicator_descriptions },
   { reinterpret_cast<const void *>(SecurityTradingStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 23, SecurityTradingStatus_descriptions },
   { reinterpret_cast<const void *>(HaltReasonChar_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, HaltReasonChar_descriptions },
   { reinterpret_cast<const void *>(InViewOfCommon_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, InViewOfCommon_descriptions },
   { reinterpret_cast<const void *>(DueToRelated_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, DueToRelated_descriptions },
   { reinterpret_cast<const void *>(Adjustment_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, Adjustment_descriptions },
   { reinterpret_cast<const void *>(TradSesMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradSesMethod_descriptions },
   { reinterpret_cast<const void *>(TradSesMode_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradSesMode_descriptions },
   { reinterpret_cast<const void *>(TradSesStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, TradSesStatus_descriptions },
   { reinterpret_cast<const void *>(QuoteEntryRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 10, QuoteEntryRejectReason_descriptions },
   { reinterpret_cast<const void *>(SessionRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 19, SessionRejectReason_descriptions },
   { reinterpret_cast<const void *>(BidRequestTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, BidRequestTransType_descriptions },
   { reinterpret_cast<const void *>(SolicitedFlag_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, SolicitedFlag_descriptions },
   { reinterpret_cast<const void *>(ExecRestatementReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 12, ExecRestatementReason_descriptions },
   { reinterpret_cast<const void *>(BusinessRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, BusinessRejectReason_descriptions },
   { reinterpret_cast<const void *>(MsgDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, MsgDirection_descriptions },
   { reinterpret_cast<const void *>(DiscretionInst_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, DiscretionInst_descriptions },
   { reinterpret_cast<const void *>(BidType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, BidType_descriptions },
   { reinterpret_cast<const void *>(BidDescriptorType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, BidDescriptorType_descriptions },
   { reinterpret_cast<const void *>(SideValueInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, SideValueInd_descriptions },
   { reinterpret_cast<const void *>(LiquidityIndType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, LiquidityIndType_descriptions },
   { reinterpret_cast<const void *>(ExchangeForPhysical_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, ExchangeForPhysical_descriptions },
   { reinterpret_cast<const void *>(ProgRptReqs_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ProgRptReqs_descriptions },
   { reinterpret_cast<const void *>(IncTaxInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, IncTaxInd_descriptions },
   { reinterpret_cast<const void *>(BidTradeType_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, BidTradeType_descriptions },
   { reinterpret_cast<const void *>(BasisPxType_realm), RealmBase::dt_set, FieldTrait::ft_char, 13, BasisPxType_descriptions },
   { reinterpret_cast<const void *>(PriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, PriceType_descriptions },
   { reinterpret_cast<const void *>(GTBookingInst_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, GTBookingInst_descriptions },
   { reinterpret_cast<const void *>(ListStatusType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, ListStatusType_descriptions },
   { reinterpret_cast<const void *>(NetGrossInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, NetGrossInd_descriptions },
   { reinterpret_cast<const void *>(ListOrderStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, ListOrderStatus_descriptions },
   { reinterpret_cast<const void *>(ListExecInstType_realm), RealmBase::dt_set, FieldTrait::ft_char, 5, ListExecInstType_descriptions },
   { reinterpret_cast<const void *>(CxlRejResponseTo_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, CxlRejResponseTo_descriptions },
   { reinterpret_cast<const void *>(MultiLegReportingType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, MultiLegReportingType_descriptions },
   { reinterpret_cast<const void *>(PartyIDSource_realm), RealmBase::dt_set, FieldTrait::ft_char, 18, PartyIDSource_descriptions },
   { reinterpret_cast<const void *>(PartyRole_realm), RealmBase::dt_set, FieldTrait::ft_int, 38, PartyRole_descriptions },
   { reinterpret_cast<const void *>(Product_realm), RealmBase::dt_set, FieldTrait::ft_int, 13, Product_descriptions },
   { reinterpret_cast<const void *>(TestMessageIndicator_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, TestMessageIndicator_descriptions },
   { reinterpret_cast<const void *>(RoundingDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, RoundingDirection_descriptions },
   { reinterpret_cast<const void *>(DistribPaymentMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 12, DistribPaymentMethod_descriptions },
   { reinterpret_cast<const void *>(CancellationRights_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, CancellationRights_descriptions },
   { reinterpret_cast<const void *>(MoneyLaunderingStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 5, MoneyLaunderingStatus_descriptions },
   { reinterpret_cast<const void *>(ExecPriceType_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, ExecPriceType_descriptions },
   { reinterpret_cast<const void *>(TradeReportTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, TradeReportTransType_descriptions },
   { reinterpret_cast<const void *>(PaymentMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 15, PaymentMethod_descriptions },
   { reinterpret_cast<const void *>(TaxAdvantageType_realm), RealmBase::dt_set, FieldTrait::ft_int, 31, TaxAdvantageType_descriptions },
   { reinterpret_cast<const void *>(FundRenewWaiv_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, FundRenewWaiv_descriptions },
   { reinterpret_cast<const void *>(RegistStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, RegistStatus_descriptions },
   { reinterpret_cast<const void *>(RegistRejReasonCode_realm), RealmBase::dt_set, FieldTrait::ft_int, 19, RegistRejReasonCode_descriptions },
   { reinterpret_cast<const void *>(RegistTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, RegistTransType_descriptions },
   { reinterpret_cast<const void *>(OwnershipType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, OwnershipType_descriptions },
   { reinterpret_cast<const void *>(ContAmtType_realm), RealmBase::dt_set, FieldTrait::ft_int, 15, ContAmtType_descriptions },
   { reinterpret_cast<const void *>(OwnerType_realm), RealmBase::dt_set, FieldTrait::ft_int, 13, OwnerType_descriptions },
   { reinterpret_cast<const void *>(OrderCapacity_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, OrderCapacity_descriptions },
   { reinterpret_cast<const void *>(OrderRestrictions_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 10, OrderRestrictions_descriptions },
   { reinterpret_cast<const void *>(MassCancelRequestType_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, MassCancelRequestType_descriptions },
   { reinterpret_cast<const void *>(MassCancelResponse_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, MassCancelResponse_descriptions },
   { reinterpret_cast<const void *>(MassCancelRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, MassCancelRejectReason_descriptions },
   { reinterpret_cast<const void *>(QuoteType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, QuoteType_descriptions },
   { reinterpret_cast<const void *>(InstrRegistry_realm), RealmBase::dt_set, FieldTrait::ft_string, 3, InstrRegistry_descriptions },
   { reinterpret_cast<const void *>(CashMargin_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, CashMargin_descriptions },
   { reinterpret_cast<const void *>(Scope_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 3, Scope_descriptions },
   { reinterpret_cast<const void *>(MDImplicitDelete_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, MDImplicitDelete_descriptions },
   { reinterpret_cast<const void *>(CrossType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, CrossType_descriptions },
   { reinterpret_cast<const void *>(CrossPrioritization_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, CrossPrioritization_descriptions },
   { reinterpret_cast<const void *>(NoSides_realm), RealmBase::dt_set, FieldTrait::ft_NumInGroup, 2, NoSides_descriptions },
   { reinterpret_cast<const void *>(SecurityListRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, SecurityListRequestType_descriptions },
   { reinterpret_cast<const void *>(SecurityRequestResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, SecurityRequestResult_descriptions },
   { reinterpret_cast<const void *>(MultiLegRptTypeReq_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MultiLegRptTypeReq_descriptions },
   { reinterpret_cast<const void *>(TradSesStatusRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, TradSesStatusRejReason_descriptions },
   { reinterpret_cast<const void *>(TradeRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, TradeRequestType_descriptions },
   { reinterpret_cast<const void *>(PreviouslyReported_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, PreviouslyReported_descriptions },
   { reinterpret_cast<const void *>(MatchStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, MatchStatus_descriptions },
   { reinterpret_cast<const void *>(MatchType_realm), RealmBase::dt_set, FieldTrait::ft_string, 21, MatchType_descriptions },
   { reinterpret_cast<const void *>(OddLot_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, OddLot_descriptions },
   { reinterpret_cast<const void *>(ClearingInstruction_realm), RealmBase::dt_set, FieldTrait::ft_int, 14, ClearingInstruction_descriptions },
   { reinterpret_cast<const void *>(AccountType_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, AccountType_descriptions },
   { reinterpret_cast<const void *>(CustOrderCapacity_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, CustOrderCapacity_descriptions },
   { reinterpret_cast<const void *>(MassStatusReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, MassStatusReqType_descriptions },
   { reinterpret_cast<const void *>(DayBookingInst_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, DayBookingInst_descriptions },
   { reinterpret_cast<const void *>(BookingUnit_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, BookingUnit_descriptions },
   { reinterpret_cast<const void *>(PreallocMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, PreallocMethod_descriptions },
   { reinterpret_cast<const void *>(AllocType_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, AllocType_descriptions },
   { reinterpret_cast<const void *>(ClearingFeeIndicator_realm), RealmBase::dt_set, FieldTrait::ft_string, 14, ClearingFeeIndicator_descriptions },
   { reinterpret_cast<const void *>(WorkingIndicator_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, WorkingIndicator_descriptions },
   { reinterpret_cast<const void *>(PriorityIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PriorityIndicator_descriptions },
   { reinterpret_cast<const void *>(LegalConfirm_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, LegalConfirm_descriptions },
   { reinterpret_cast<const void *>(QuoteRequestRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, QuoteRequestRejectReason_descriptions },
   { reinterpret_cast<const void *>(AcctIDSource_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, AcctIDSource_descriptions },
   { reinterpret_cast<const void *>(ConfirmStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, ConfirmStatus_descriptions },
   { reinterpret_cast<const void *>(ConfirmTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ConfirmTransType_descriptions },
   { reinterpret_cast<const void *>(DeliveryForm_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, DeliveryForm_descriptions },
   { reinterpret_cast<const void *>(LegSwapType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, LegSwapType_descriptions },
   { reinterpret_cast<const void *>(QuotePriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 10, QuotePriceType_descriptions },
   { reinterpret_cast<const void *>(QuoteRespType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, QuoteRespType_descriptions },
   { reinterpret_cast<const void *>(PosType_realm), RealmBase::dt_set, FieldTrait::ft_string, 19, PosType_descriptions },
   { reinterpret_cast<const void *>(PosQtyStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosQtyStatus_descriptions },
   { reinterpret_cast<const void *>(PosAmtType_realm), RealmBase::dt_set, FieldTrait::ft_string, 8, PosAmtType_descriptions },
   { reinterpret_cast<const void *>(PosTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, PosTransType_descriptions },
   { reinterpret_cast<const void *>(PosMaintAction_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosMaintAction_descriptions },
   { reinterpret_cast<const void *>(AdjustmentType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, AdjustmentType_descriptions },
   { reinterpret_cast<const void *>(PosMaintStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, PosMaintStatus_descriptions },
   { reinterpret_cast<const void *>(PosMaintResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosMaintResult_descriptions },
   { reinterpret_cast<const void *>(PosReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PosReqType_descriptions },
   { reinterpret_cast<const void *>(ResponseTransportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, ResponseTransportType_descriptions },
   { reinterpret_cast<const void *>(PosReqResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, PosReqResult_descriptions },
   { reinterpret_cast<const void *>(PosReqStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosReqStatus_descriptions },
   { reinterpret_cast<const void *>(SettlPriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, SettlPriceType_descriptions },
   { reinterpret_cast<const void *>(AssignmentMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, AssignmentMethod_descriptions },
   { reinterpret_cast<const void *>(ExerciseMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, ExerciseMethod_descriptions },
   { reinterpret_cast<const void *>(TradeRequestResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 9, TradeRequestResult_descriptions },
   { reinterpret_cast<const void *>(TradeRequestStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradeRequestStatus_descriptions },
   { reinterpret_cast<const void *>(TradeReportRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, TradeReportRejectReason_descriptions },
   { reinterpret_cast<const void *>(SideMultiLegReportingType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, SideMultiLegReportingType_descriptions },
   { reinterpret_cast<const void *>(TrdRegTimestampType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, TrdRegTimestampType_descriptions },
   { reinterpret_cast<const void *>(ConfirmType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ConfirmType_descriptions },
   { reinterpret_cast<const void *>(ConfirmRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ConfirmRejReason_descriptions },
   { reinterpret_cast<const void *>(BookingType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, BookingType_descriptions },
   { reinterpret_cast<const void *>(AllocSettlInstType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, AllocSettlInstType_descriptions },
   { reinterpret_cast<const void *>(DlvyInstType_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, DlvyInstType_descriptions },
   { reinterpret_cast<const void *>(TerminationType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, TerminationType_descriptions },
   { reinterpret_cast<const void *>(SettlInstReqRejCode_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, SettlInstReqRejCode_descriptions },
   { reinterpret_cast<const void *>(AllocReportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, AllocReportType_descriptions },
   { reinterpret_cast<const void *>(AllocCancReplaceReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AllocCancReplaceReason_descriptions },
   { reinterpret_cast<const void *>(AllocAccountType_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, AllocAccountType_descriptions },
   { reinterpret_cast<const void *>(PartySubIDType_realm), RealmBase::dt_set, FieldTrait::ft_int, 27, PartySubIDType_descriptions },
   { reinterpret_cast<const void *>(AllocIntermedReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, AllocIntermedReqType_descriptions },
   { reinterpret_cast<const void *>(ApplQueueResolution_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, ApplQueueResolution_descriptions },
   { reinterpret_cast<const void *>(ApplQueueAction_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, ApplQueueAction_descriptions },
   { reinterpret_cast<const void *>(AvgPxIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AvgPxIndicator_descriptions },
   { reinterpret_cast<const void *>(TradeAllocIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradeAllocIndicator_descriptions },
   { reinterpret_cast<const void *>(ExpirationCycle_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, ExpirationCycle_descriptions },
   { reinterpret_cast<const void *>(TrdType_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, TrdType_descriptions },
   { reinterpret_cast<const void *>(PegMoveType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PegMoveType_descriptions },
   { reinterpret_cast<const void *>(PegOffsetType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PegOffsetType_descriptions },
   { reinterpret_cast<const void *>(PegLimitType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PegLimitType_descriptions },
   { reinterpret_cast<const void *>(PegRoundDirection_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PegRoundDirection_descriptions },
   { reinterpret_cast<const void *>(PegScope_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PegScope_descriptions },
   { reinterpret_cast<const void *>(DiscretionMoveType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, DiscretionMoveType_descriptions },
   { reinterpret_cast<const void *>(DiscretionOffsetType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, DiscretionOffsetType_descriptions },
   { reinterpret_cast<const void *>(DiscretionLimitType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, DiscretionLimitType_descriptions },
   { reinterpret_cast<const void *>(DiscretionRoundDirection_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, DiscretionRoundDirection_descriptions },
   { reinterpret_cast<const void *>(DiscretionScope_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, DiscretionScope_descriptions },
   { reinterpret_cast<const void *>(TargetStrategy_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, TargetStrategy_descriptions },
   { reinterpret_cast<const void *>(LastLiquidityInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, LastLiquidityInd_descriptions },
   { reinterpret_cast<const void *>(PublishTrdIndicator_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, PublishTrdIndicator_descriptions },
   { reinterpret_cast<const void *>(ShortSaleReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, ShortSaleReason_descriptions },
   { reinterpret_cast<const void *>(QtyType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, QtyType_descriptions },
   { reinterpret_cast<const void *>(TradeReportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, TradeReportType_descriptions },
   { reinterpret_cast<const void *>(AllocNoOrdersType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, AllocNoOrdersType_descriptions },
   { reinterpret_cast<const void *>(EventType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, EventType_descriptions },
   { reinterpret_cast<const void *>(InstrAttribType_realm), RealmBase::dt_set, FieldTrait::ft_int, 23, InstrAttribType_descriptions },
   { reinterpret_cast<const void *>(CPProgram_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, CPProgram_descriptions },
   { reinterpret_cast<const void *>(MiscFeeBasis_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MiscFeeBasis_descriptions },
   { reinterpret_cast<const void *>(LastFragment_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, LastFragment_descriptions },
   { reinterpret_cast<const void *>(CollAsgnReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, CollAsgnReason_descriptions },
   { reinterpret_cast<const void *>(CollInquiryQualifier_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, CollInquiryQualifier_descriptions },
   { reinterpret_cast<const void *>(CollAsgnTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, CollAsgnTransType_descriptions },
   { reinterpret_cast<const void *>(CollAsgnRespType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, CollAsgnRespType_descriptions },
   { reinterpret_cast<const void *>(CollAsgnRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, CollAsgnRejectReason_descriptions },
   { reinterpret_cast<const void *>(CollStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, CollStatus_descriptions },
   { reinterpret_cast<const void *>(LastRptRequested_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, LastRptRequested_descriptions },
   { reinterpret_cast<const void *>(DeliveryType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, DeliveryType_descriptions },
   { reinterpret_cast<const void *>(UserRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, UserRequestType_descriptions },
   { reinterpret_cast<const void *>(UserStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, UserStatus_descriptions },
   { reinterpret_cast<const void *>(StatusValue_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, StatusValue_descriptions },
   { reinterpret_cast<const void *>(NetworkRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, NetworkRequestType_descriptions },
   { reinterpret_cast<const void *>(NetworkStatusResponseType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, NetworkStatusResponseType_descriptions },
   { reinterpret_cast<const void *>(TrdRptStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, TrdRptStatus_descriptions },
   { reinterpret_cast<const void *>(AffirmStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AffirmStatus_descriptions },
   { reinterpret_cast<const void *>(CollAction_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, CollAction_descriptions },
   { reinterpret_cast<const void *>(CollInquiryStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, CollInquiryStatus_descriptions },
   { reinterpret_cast<const void *>(CollInquiryResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, CollInquiryResult_descriptions },
};

//-------------------------------------------------------------------------------------------------

} // namespace

//-------------------------------------------------------------------------------------------------
extern const Texfix_BaseEntry::Pair fldpairs[];
const Texfix_BaseEntry::Pair fldpairs[] 
{
   { 1, { Type2Type<TEX::Account>(), "Account", 1 } },
   { 2, { Type2Type<TEX::AdvId>(), "AdvId", 2 } },
   { 3, { Type2Type<TEX::AdvRefID>(), "AdvRefID", 3 } },
   { 4, { Type2Type<TEX::AdvSide, char>(), "AdvSide", 4, &TEX::realmbases[0] } },
   { 5, { Type2Type<TEX::AdvTransType, f8String>(), "AdvTransType", 5, &TEX::realmbases[1] } },
   { 6, { Type2Type<TEX::AvgPx>(), "AvgPx", 6 } },
   { 7, { Type2Type<TEX::BeginSeqNo>(), "BeginSeqNo", 7 } },
   { 8, { Type2Type<TEX::BeginString>(), "BeginString", 8 } },
   { 9, { Type2Type<TEX::BodyLength>(), "BodyLength", 9 } },
   { 10, { Type2Type<TEX::CheckSum>(), "CheckSum", 10 } },
   { 11, { Type2Type<TEX::ClOrdID>(), "ClOrdID", 11 } },
   { 12, { Type2Type<TEX::Commission>(), "Commission", 12 } },
   { 13, { Type2Type<TEX::CommType, char>(), "CommType", 13, &TEX::realmbases[2] } },
   { 14, { Type2Type<TEX::CumQty>(), "CumQty", 14 } },
   { 15, { Type2Type<TEX::Currency>(), "Currency", 15 } },
   { 16, { Type2Type<TEX::EndSeqNo>(), "EndSeqNo", 16 } },
   { 17, { Type2Type<TEX::ExecID>(), "ExecID", 17 } },
   { 18, { Type2Type<TEX::ExecInst, f8String>(), "ExecInst", 18, &TEX::realmbases[3] } },
   { 19, { Type2Type<TEX::ExecRefID>(), "ExecRefID", 19 } },
   { 21, { Type2Type<TEX::HandlInst, char>(), "HandlInst", 21, &TEX::realmbases[4] } },
   { 22, { Type2Type<TEX::SecurityIDSource, f8String>(), "SecurityIDSource", 22, &TEX::realmbases[5] } },
   { 23, { Type2Type<TEX::IOIID>(), "IOIID", 23 } },
   { 25, { Type2Type<TEX::IOIQltyInd, char>(), "IOIQltyInd", 25, &TEX::realmbases[6] } },
   { 26, { Type2Type<TEX::IOIRefID>(), "IOIRefID", 26 } },
   { 27, { Type2Type<TEX::IOIQty>(), "IOIQty", 27 } },
   { 28, { Type2Type<TEX::IOITransType, char>(), "IOITransType", 28, &TEX::realmbases[7] } },
   { 29, { Type2Type<TEX::LastCapacity, char>(), "LastCapacity", 29, &TEX::realmbases[8] } },
   { 30, { Type2Type<TEX::LastMkt>(), "LastMkt", 30 } },
   { 31, { Type2Type<TEX::LastPx>(), "LastPx", 31 } },
   { 32, { Type2Type<TEX::LastQty>(), "LastQty", 32 } },
   { 33, { Type2Type<TEX::NoLinesOfText>(), "NoLinesOfText", 33 } },
   { 34, { Type2Type<TEX::MsgSeqNum>(), "MsgSeqNum", 34 } },
   { 35, { Type2Type<TEX::MsgType, f8String>(), "MsgType", 35, &TEX::realmbases[9] } },
   { 36, { Type2Type<TEX::NewSeqNo>(), "NewSeqNo", 36 } },
   { 37, { Type2Type<TEX::OrderID>(), "OrderID", 37 } },
   { 38, { Type2Type<TEX::OrderQty>(), "OrderQty", 38 } },
   { 39, { Type2Type<TEX::OrdStatus, char>(), "OrdStatus", 39, &TEX::realmbases[10] } },
   { 40, { Type2Type<TEX::OrdType, char>(), "OrdType", 40, &TEX::realmbases[11] } },
   { 41, { Type2Type<TEX::OrigClOrdID>(), "OrigClOrdID", 41 } },
   { 42, { Type2Type<TEX::OrigTime>(), "OrigTime", 42 } },
   { 43, { Type2Type<TEX::PossDupFlag, char>(), "PossDupFlag", 43, &TEX::realmbases[12] } },
   { 44, { Type2Type<TEX::Price>(), "Price", 44 } },
   { 45, { Type2Type<TEX::RefSeqNum>(), "RefSeqNum", 45 } },
   { 48, { Type2Type<TEX::SecurityID>(), "SecurityID", 48 } },
   { 49, { Type2Type<TEX::SenderCompID>(), "SenderCompID", 49 } },
   { 50, { Type2Type<TEX::SenderSubID>(), "SenderSubID", 50 } },
   { 52, { Type2Type<TEX::SendingTime>(), "SendingTime", 52 } },
   { 53, { Type2Type<TEX::Quantity>(), "Quantity", 53 } },
   { 54, { Type2Type<TEX::Side, char>(), "Side", 54, &TEX::realmbases[13] } },
   { 55, { Type2Type<TEX::Symbol>(), "Symbol", 55 } },
   { 56, { Type2Type<TEX::TargetCompID>(), "TargetCompID", 56 } },
   { 57, { Type2Type<TEX::TargetSubID>(), "TargetSubID", 57 } },
   { 58, { Type2Type<TEX::Text>(), "Text", 58 } },
   { 59, { Type2Type<TEX::TimeInForce, char>(), "TimeInForce", 59, &TEX::realmbases[14] } },
   { 60, { Type2Type<TEX::TransactTime>(), "TransactTime", 60 } },
   { 61, { Type2Type<TEX::Urgency, char>(), "Urgency", 61, &TEX::realmbases[15] } },
   { 62, { Type2Type<TEX::ValidUntilTime>(), "ValidUntilTime", 62 } },
   { 63, { Type2Type<TEX::SettlType, char>(), "SettlType", 63, &TEX::realmbases[16] } },
   { 64, { Type2Type<TEX::SettlDate>(), "SettlDate", 64 } },
   { 65, { Type2Type<TEX::SymbolSfx, f8String>(), "SymbolSfx", 65, &TEX::realmbases[17] } },
   { 66, { Type2Type<TEX::ListID>(), "ListID", 66 } },
   { 67, { Type2Type<TEX::ListSeqNo>(), "ListSeqNo", 67 } },
   { 68, { Type2Type<TEX::TotNoOrders>(), "TotNoOrders", 68 } },
   { 69, { Type2Type<TEX::ListExecInst>(), "ListExecInst", 69 } },
   { 70, { Type2Type<TEX::AllocID>(), "AllocID", 70 } },
   { 71, { Type2Type<TEX::AllocTransType, char>(), "AllocTransType", 71, &TEX::realmbases[18] } },
   { 72, { Type2Type<TEX::RefAllocID>(), "RefAllocID", 72 } },
   { 73, { Type2Type<TEX::NoOrders>(), "NoOrders", 73 } },
   { 74, { Type2Type<TEX::AvgPxPrecision>(), "AvgPxPrecision", 74 } },
   { 75, { Type2Type<TEX::TradeDate>(), "TradeDate", 75 } },
   { 77, { Type2Type<TEX::PositionEffect, char>(), "PositionEffect", 77, &TEX::realmbases[19] } },
   { 78, { Type2Type<TEX::NoAllocs>(), "NoAllocs", 78 } },
   { 79, { Type2Type<TEX::AllocAccount>(), "AllocAccount", 79 } },
   { 80, { Type2Type<TEX::AllocQty>(), "AllocQty", 80 } },
   { 81, { Type2Type<TEX::ProcessCode, char>(), "ProcessCode", 81, &TEX::realmbases[20] } },
   { 82, { Type2Type<TEX::NoRpts>(), "NoRpts", 82 } },
   { 83, { Type2Type<TEX::RptSeq>(), "RptSeq", 83 } },
   { 84, { Type2Type<TEX::CxlQty>(), "CxlQty", 84 } },
   { 85, { Type2Type<TEX::NoDlvyInst>(), "NoDlvyInst", 85 } },
   { 87, { Type2Type<TEX::AllocStatus, int>(), "AllocStatus", 87, &TEX::realmbases[21] } },
   { 88, { Type2Type<TEX::AllocRejCode, int>(), "AllocRejCode", 88, &TEX::realmbases[22] } },
   { 89, { Type2Type<TEX::Signature>(), "Signature", 89 } },
   { 90, { Type2Type<TEX::SecureDataLen>(), "SecureDataLen", 90 } },
   { 91, { Type2Type<TEX::SecureData>(), "SecureData", 91 } },
   { 93, { Type2Type<TEX::SignatureLength>(), "SignatureLength", 93 } },
   { 94, { Type2Type<TEX::EmailType, char>(), "EmailType", 94, &TEX::realmbases[23] } },
   { 95, { Type2Type<TEX::RawDataLength>(), "RawDataLength", 95 } },
   { 96, { Type2Type<TEX::RawData>(), "RawData", 96 } },
   { 97, { Type2Type<TEX::PossResend, char>(), "PossResend", 97, &TEX::realmbases[24] } },
   { 98, { Type2Type<TEX::EncryptMethod, int>(), "EncryptMethod", 98, &TEX::realmbases[25] } },
   { 99, { Type2Type<TEX::StopPx>(), "StopPx", 99 } },
   { 100, { Type2Type<TEX::ExDestination>(), "ExDestination", 100 } },
   { 102, { Type2Type<TEX::CxlRejReason, int>(), "CxlRejReason", 102, &TEX::realmbases[26] } },
   { 103, { Type2Type<TEX::OrdRejReason, int>(), "OrdRejReason", 103, &TEX::realmbases[27] } },
   { 104, { Type2Type<TEX::IOIQualifier, char>(), "IOIQualifier", 104, &TEX::realmbases[28] } },
   { 106, { Type2Type<TEX::Issuer>(), "Issuer", 106 } },
   { 107, { Type2Type<TEX::SecurityDesc>(), "SecurityDesc", 107 } },
   { 108, { Type2Type<TEX::HeartBtInt>(), "HeartBtInt", 108 } },
   { 110, { Type2Type<TEX::MinQty>(), "MinQty", 110 } },
   { 111, { Type2Type<TEX::MaxFloor>(), "MaxFloor", 111 } },
   { 112, { Type2Type<TEX::TestReqID>(), "TestReqID", 112 } },
   { 113, { Type2Type<TEX::ReportToExch, char>(), "ReportToExch", 113, &TEX::realmbases[29] } },
   { 114, { Type2Type<TEX::LocateReqd, char>(), "LocateReqd", 114, &TEX::realmbases[30] } },
   { 115, { Type2Type<TEX::OnBehalfOfCompID>(), "OnBehalfOfCompID", 115 } },
   { 116, { Type2Type<TEX::OnBehalfOfSubID>(), "OnBehalfOfSubID", 116 } },
   { 117, { Type2Type<TEX::QuoteID>(), "QuoteID", 117 } },
   { 118, { Type2Type<TEX::NetMoney>(), "NetMoney", 118 } },
   { 119, { Type2Type<TEX::SettlCurrAmt>(), "SettlCurrAmt", 119 } },
   { 120, { Type2Type<TEX::SettlCurrency>(), "SettlCurrency", 120 } },
   { 121, { Type2Type<TEX::ForexReq, char>(), "ForexReq", 121, &TEX::realmbases[31] } },
   { 122, { Type2Type<TEX::OrigSendingTime>(), "OrigSendingTime", 122 } },
   { 123, { Type2Type<TEX::GapFillFlag, char>(), "GapFillFlag", 123, &TEX::realmbases[32] } },
   { 124, { Type2Type<TEX::NoExecs>(), "NoExecs", 124 } },
   { 126, { Type2Type<TEX::ExpireTime>(), "ExpireTime", 126 } },
   { 127, { Type2Type<TEX::DKReason, char>(), "DKReason", 127, &TEX::realmbases[33] } },
   { 128, { Type2Type<TEX::DeliverToCompID>(), "DeliverToCompID", 128 } },
   { 129, { Type2Type<TEX::DeliverToSubID>(), "DeliverToSubID", 129 } },
   { 130, { Type2Type<TEX::IOINaturalFlag, char>(), "IOINaturalFlag", 130, &TEX::realmbases[34] } },
   { 131, { Type2Type<TEX::QuoteReqID>(), "QuoteReqID", 131 } },
   { 132, { Type2Type<TEX::BidPx>(), "BidPx", 132 } },
   { 133, { Type2Type<TEX::OfferPx>(), "OfferPx", 133 } },
   { 134, { Type2Type<TEX::BidSize>(), "BidSize", 134 } },
   { 135, { Type2Type<TEX::OfferSize>(), "OfferSize", 135 } },
   { 136, { Type2Type<TEX::NoMiscFees>(), "NoMiscFees", 136 } },
   { 137, { Type2Type<TEX::MiscFeeAmt>(), "MiscFeeAmt", 137 } },
   { 138, { Type2Type<TEX::MiscFeeCurr>(), "MiscFeeCurr", 138 } },
   { 139, { Type2Type<TEX::MiscFeeType, char>(), "MiscFeeType", 139, &TEX::realmbases[35] } },
   { 140, { Type2Type<TEX::PrevClosePx>(), "PrevClosePx", 140 } },
   { 141, { Type2Type<TEX::ResetSeqNumFlag, char>(), "ResetSeqNumFlag", 141, &TEX::realmbases[36] } },
   { 142, { Type2Type<TEX::SenderLocationID>(), "SenderLocationID", 142 } },
   { 143, { Type2Type<TEX::TargetLocationID>(), "TargetLocationID", 143 } },
   { 144, { Type2Type<TEX::OnBehalfOfLocationID>(), "OnBehalfOfLocationID", 144 } },
   { 145, { Type2Type<TEX::DeliverToLocationID>(), "DeliverToLocationID", 145 } },
   { 146, { Type2Type<TEX::NoRelatedSym>(), "NoRelatedSym", 146 } },
   { 147, { Type2Type<TEX::Subject>(), "Subject", 147 } },
   { 148, { Type2Type<TEX::Headline>(), "Headline", 148 } },
   { 149, { Type2Type<TEX::URLLink>(), "URLLink", 149 } },
   { 150, { Type2Type<TEX::ExecType, char>(), "ExecType", 150, &TEX::realmbases[37] } },
   { 151, { Type2Type<TEX::LeavesQty>(), "LeavesQty", 151 } },
   { 152, { Type2Type<TEX::CashOrderQty>(), "CashOrderQty", 152 } },
   { 153, { Type2Type<TEX::AllocAvgPx>(), "AllocAvgPx", 153 } },
   { 154, { Type2Type<TEX::AllocNetMoney>(), "AllocNetMoney", 154 } },
   { 155, { Type2Type<TEX::SettlCurrFxRate>(), "SettlCurrFxRate", 155 } },
   { 156, { Type2Type<TEX::SettlCurrFxRateCalc, char>(), "SettlCurrFxRateCalc", 156, &TEX::realmbases[38] } },
   { 157, { Type2Type<TEX::NumDaysInterest>(), "NumDaysInterest", 157 } },
   { 158, { Type2Type<TEX::AccruedInterestRate>(), "AccruedInterestRate", 158 } },
   { 159, { Type2Type<TEX::AccruedInterestAmt>(), "AccruedInterestAmt", 159 } },
   { 160, { Type2Type<TEX::SettlInstMode, char>(), "SettlInstMode", 160, &TEX::realmbases[39] } },
   { 161, { Type2Type<TEX::AllocText>(), "AllocText", 161 } },
   { 162, { Type2Type<TEX::SettlInstID>(), "SettlInstID", 162 } },
   { 163, { Type2Type<TEX::SettlInstTransType, char>(), "SettlInstTransType", 163, &TEX::realmbases[40] } },
   { 164, { Type2Type<TEX::EmailThreadID>(), "EmailThreadID", 164 } },
   { 165, { Type2Type<TEX::SettlInstSource, char>(), "SettlInstSource", 165, &TEX::realmbases[41] } },
   { 167, { Type2Type<TEX::SecurityType, f8String>(), "SecurityType", 167, &TEX::realmbases[42] } },
   { 168, { Type2Type<TEX::EffectiveTime>(), "EffectiveTime", 168 } },
   { 169, { Type2Type<TEX::StandInstDbType, int>(), "StandInstDbType", 169, &TEX::realmbases[43] } },
   { 170, { Type2Type<TEX::StandInstDbName>(), "StandInstDbName", 170 } },
   { 171, { Type2Type<TEX::StandInstDbID>(), "StandInstDbID", 171 } },
   { 172, { Type2Type<TEX::SettlDeliveryType>(), "SettlDeliveryType", 172 } },
   { 188, { Type2Type<TEX::BidSpotRate>(), "BidSpotRate", 188 } },
   { 189, { Type2Type<TEX::BidForwardPoints>(), "BidForwardPoints", 189 } },
   { 190, { Type2Type<TEX::OfferSpotRate>(), "OfferSpotRate", 190 } },
   { 191, { Type2Type<TEX::OfferForwardPoints>(), "OfferForwardPoints", 191 } },
   { 192, { Type2Type<TEX::OrderQty2>(), "OrderQty2", 192 } },
   { 193, { Type2Type<TEX::SettlDate2>(), "SettlDate2", 193 } },
   { 194, { Type2Type<TEX::LastSpotRate>(), "LastSpotRate", 194 } },
   { 195, { Type2Type<TEX::LastForwardPoints>(), "LastForwardPoints", 195 } },
   { 196, { Type2Type<TEX::AllocLinkID>(), "AllocLinkID", 196 } },
   { 197, { Type2Type<TEX::AllocLinkType, int>(), "AllocLinkType", 197, &TEX::realmbases[44] } },
   { 198, { Type2Type<TEX::SecondaryOrderID>(), "SecondaryOrderID", 198 } },
   { 199, { Type2Type<TEX::NoIOIQualifiers>(), "NoIOIQualifiers", 199 } },
   { 200, { Type2Type<TEX::MaturityMonthYear>(), "MaturityMonthYear", 200 } },
   { 202, { Type2Type<TEX::StrikePrice>(), "StrikePrice", 202 } },
   { 203, { Type2Type<TEX::CoveredOrUncovered, int>(), "CoveredOrUncovered", 203, &TEX::realmbases[45] } },
   { 206, { Type2Type<TEX::OptAttribute>(), "OptAttribute", 206 } },
   { 207, { Type2Type<TEX::SecurityExchange>(), "SecurityExchange", 207 } },
   { 208, { Type2Type<TEX::NotifyBrokerOfCredit, char>(), "NotifyBrokerOfCredit", 208, &TEX::realmbases[46] } },
   { 209, { Type2Type<TEX::AllocHandlInst, int>(), "AllocHandlInst", 209, &TEX::realmbases[47] } },
   { 210, { Type2Type<TEX::MaxShow>(), "MaxShow", 210 } },
   { 211, { Type2Type<TEX::PegOffsetValue>(), "PegOffsetValue", 211 } },
   { 212, { Type2Type<TEX::XmlDataLen>(), "XmlDataLen", 212 } },
   { 213, { Type2Type<TEX::XmlData>(), "XmlData", 213 } },
   { 214, { Type2Type<TEX::SettlInstRefID>(), "SettlInstRefID", 214 } },
   { 215, { Type2Type<TEX::NoRoutingIDs>(), "NoRoutingIDs", 215 } },
   { 216, { Type2Type<TEX::RoutingType, int>(), "RoutingType", 216, &TEX::realmbases[48] } },
   { 217, { Type2Type<TEX::RoutingID>(), "RoutingID", 217 } },
   { 218, { Type2Type<TEX::Spread>(), "Spread", 218 } },
   { 220, { Type2Type<TEX::BenchmarkCurveCurrency>(), "BenchmarkCurveCurrency", 220 } },
   { 221, { Type2Type<TEX::BenchmarkCurveName, f8String>(), "BenchmarkCurveName", 221, &TEX::realmbases[49] } },
   { 222, { Type2Type<TEX::BenchmarkCurvePoint>(), "BenchmarkCurvePoint", 222 } },
   { 223, { Type2Type<TEX::CouponRate>(), "CouponRate", 223 } },
   { 224, { Type2Type<TEX::CouponPaymentDate>(), "CouponPaymentDate", 224 } },
   { 225, { Type2Type<TEX::IssueDate>(), "IssueDate", 225 } },
   { 226, { Type2Type<TEX::RepurchaseTerm>(), "RepurchaseTerm", 226 } },
   { 227, { Type2Type<TEX::RepurchaseRate>(), "RepurchaseRate", 227 } },
   { 228, { Type2Type<TEX::Factor>(), "Factor", 228 } },
   { 229, { Type2Type<TEX::TradeOriginationDate>(), "TradeOriginationDate", 229 } },
   { 230, { Type2Type<TEX::ExDate>(), "ExDate", 230 } },
   { 231, { Type2Type<TEX::ContractMultiplier>(), "ContractMultiplier", 231 } },
   { 232, { Type2Type<TEX::NoStipulations>(), "NoStipulations", 232 } },
   { 233, { Type2Type<TEX::StipulationType, f8String>(), "StipulationType", 233, &TEX::realmbases[50] } },
   { 234, { Type2Type<TEX::StipulationValue>(), "StipulationValue", 234 } },
   { 235, { Type2Type<TEX::YieldType, f8String>(), "YieldType", 235, &TEX::realmbases[51] } },
   { 236, { Type2Type<TEX::Yield>(), "Yield", 236 } },
   { 237, { Type2Type<TEX::TotalTakedown>(), "TotalTakedown", 237 } },
   { 238, { Type2Type<TEX::Concession>(), "Concession", 238 } },
   { 239, { Type2Type<TEX::RepoCollateralSecurityType>(), "RepoCollateralSecurityType", 239 } },
   { 240, { Type2Type<TEX::RedemptionDate>(), "RedemptionDate", 240 } },
   { 241, { Type2Type<TEX::UnderlyingCouponPaymentDate>(), "UnderlyingCouponPaymentDate", 241 } },
   { 242, { Type2Type<TEX::UnderlyingIssueDate>(), "UnderlyingIssueDate", 242 } },
   { 243, { Type2Type<TEX::UnderlyingRepoCollateralSecurityType>(), "UnderlyingRepoCollateralSecurityType", 243 } },
   { 244, { Type2Type<TEX::UnderlyingRepurchaseTerm>(), "UnderlyingRepurchaseTerm", 244 } },
   { 245, { Type2Type<TEX::UnderlyingRepurchaseRate>(), "UnderlyingRepurchaseRate", 245 } },
   { 246, { Type2Type<TEX::UnderlyingFactor>(), "UnderlyingFactor", 246 } },
   { 247, { Type2Type<TEX::UnderlyingRedemptionDate>(), "UnderlyingRedemptionDate", 247 } },
   { 248, { Type2Type<TEX::LegCouponPaymentDate>(), "LegCouponPaymentDate", 248 } },
   { 249, { Type2Type<TEX::LegIssueDate>(), "LegIssueDate", 249 } },
   { 250, { Type2Type<TEX::LegRepoCollateralSecurityType>(), "LegRepoCollateralSecurityType", 250 } },
   { 251, { Type2Type<TEX::LegRepurchaseTerm>(), "LegRepurchaseTerm", 251 } },
   { 252, { Type2Type<TEX::LegRepurchaseRate>(), "LegRepurchaseRate", 252 } },
   { 253, { Type2Type<TEX::LegFactor>(), "LegFactor", 253 } },
   { 254, { Type2Type<TEX::LegRedemptionDate>(), "LegRedemptionDate", 254 } },
   { 255, { Type2Type<TEX::CreditRating>(), "CreditRating", 255 } },
   { 256, { Type2Type<TEX::UnderlyingCreditRating>(), "UnderlyingCreditRating", 256 } },
   { 257, { Type2Type<TEX::LegCreditRating>(), "LegCreditRating", 257 } },
   { 258, { Type2Type<TEX::TradedFlatSwitch, char>(), "TradedFlatSwitch", 258, &TEX::realmbases[52] } },
   { 259, { Type2Type<TEX::BasisFeatureDate>(), "BasisFeatureDate", 259 } },
   { 260, { Type2Type<TEX::BasisFeaturePrice>(), "BasisFeaturePrice", 260 } },
   { 262, { Type2Type<TEX::MDReqID>(), "MDReqID", 262 } },
   { 263, { Type2Type<TEX::SubscriptionRequestType, char>(), "SubscriptionRequestType", 263, &TEX::realmbases[53] } },
   { 264, { Type2Type<TEX::MarketDepth>(), "MarketDepth", 264 } },
   { 265, { Type2Type<TEX::MDUpdateType, int>(), "MDUpdateType", 265, &TEX::realmbases[54] } },
   { 266, { Type2Type<TEX::AggregatedBook>(), "AggregatedBook", 266 } },
   { 267, { Type2Type<TEX::NoMDEntryTypes>(), "NoMDEntryTypes", 267 } },
   { 268, { Type2Type<TEX::NoMDEntries>(), "NoMDEntries", 268 } },
   { 269, { Type2Type<TEX::MDEntryType, char>(), "MDEntryType", 269, &TEX::realmbases[55] } },
   { 270, { Type2Type<TEX::MDEntryPx>(), "MDEntryPx", 270 } },
   { 271, { Type2Type<TEX::MDEntrySize>(), "MDEntrySize", 271 } },
   { 272, { Type2Type<TEX::MDEntryDate>(), "MDEntryDate", 272 } },
   { 273, { Type2Type<TEX::MDEntryTime>(), "MDEntryTime", 273 } },
   { 274, { Type2Type<TEX::TickDirection, char>(), "TickDirection", 274, &TEX::realmbases[56] } },
   { 275, { Type2Type<TEX::MDMkt>(), "MDMkt", 275 } },
   { 276, { Type2Type<TEX::QuoteCondition, f8String>(), "QuoteCondition", 276, &TEX::realmbases[57] } },
   { 277, { Type2Type<TEX::TradeCondition, f8String>(), "TradeCondition", 277, &TEX::realmbases[58] } },
   { 278, { Type2Type<TEX::MDEntryID>(), "MDEntryID", 278 } },
   { 279, { Type2Type<TEX::MDUpdateAction, char>(), "MDUpdateAction", 279, &TEX::realmbases[59] } },
   { 280, { Type2Type<TEX::MDEntryRefID>(), "MDEntryRefID", 280 } },
   { 281, { Type2Type<TEX::MDReqRejReason, char>(), "MDReqRejReason", 281, &TEX::realmbases[60] } },
   { 282, { Type2Type<TEX::MDEntryOriginator>(), "MDEntryOriginator", 282 } },
   { 283, { Type2Type<TEX::LocationID>(), "LocationID", 283 } },
   { 284, { Type2Type<TEX::DeskID>(), "DeskID", 284 } },
   { 285, { Type2Type<TEX::DeleteReason, char>(), "DeleteReason", 285, &TEX::realmbases[61] } },
   { 286, { Type2Type<TEX::OpenCloseSettlFlag, f8String>(), "OpenCloseSettlFlag", 286, &TEX::realmbases[62] } },
   { 287, { Type2Type<TEX::SellerDays>(), "SellerDays", 287 } },
   { 288, { Type2Type<TEX::MDEntryBuyer>(), "MDEntryBuyer", 288 } },
   { 289, { Type2Type<TEX::MDEntrySeller>(), "MDEntrySeller", 289 } },
   { 290, { Type2Type<TEX::MDEntryPositionNo>(), "MDEntryPositionNo", 290 } },
   { 291, { Type2Type<TEX::FinancialStatus, f8String>(), "FinancialStatus", 291, &TEX::realmbases[63] } },
   { 292, { Type2Type<TEX::CorporateAction, f8String>(), "CorporateAction", 292, &TEX::realmbases[64] } },
   { 293, { Type2Type<TEX::DefBidSize>(), "DefBidSize", 293 } },
   { 294, { Type2Type<TEX::DefOfferSize>(), "DefOfferSize", 294 } },
   { 295, { Type2Type<TEX::NoQuoteEntries>(), "NoQuoteEntries", 295 } },
   { 296, { Type2Type<TEX::NoQuoteSets>(), "NoQuoteSets", 296 } },
   { 297, { Type2Type<TEX::QuoteStatus, int>(), "QuoteStatus", 297, &TEX::realmbases[65] } },
   { 298, { Type2Type<TEX::QuoteCancelType, int>(), "QuoteCancelType", 298, &TEX::realmbases[66] } },
   { 299, { Type2Type<TEX::QuoteEntryID>(), "QuoteEntryID", 299 } },
   { 300, { Type2Type<TEX::QuoteRejectReason, int>(), "QuoteRejectReason", 300, &TEX::realmbases[67] } },
   { 301, { Type2Type<TEX::QuoteResponseLevel, int>(), "QuoteResponseLevel", 301, &TEX::realmbases[68] } },
   { 302, { Type2Type<TEX::QuoteSetID>(), "QuoteSetID", 302 } },
   { 303, { Type2Type<TEX::QuoteRequestType, int>(), "QuoteRequestType", 303, &TEX::realmbases[69] } },
   { 304, { Type2Type<TEX::TotNoQuoteEntries>(), "TotNoQuoteEntries", 304 } },
   { 305, { Type2Type<TEX::UnderlyingSecurityIDSource>(), "UnderlyingSecurityIDSource", 305 } },
   { 306, { Type2Type<TEX::UnderlyingIssuer>(), "UnderlyingIssuer", 306 } },
   { 307, { Type2Type<TEX::UnderlyingSecurityDesc>(), "UnderlyingSecurityDesc", 307 } },
   { 308, { Type2Type<TEX::UnderlyingSecurityExchange>(), "UnderlyingSecurityExchange", 308 } },
   { 309, { Type2Type<TEX::UnderlyingSecurityID>(), "UnderlyingSecurityID", 309 } },
   { 310, { Type2Type<TEX::UnderlyingSecurityType>(), "UnderlyingSecurityType", 310 } },
   { 311, { Type2Type<TEX::UnderlyingSymbol>(), "UnderlyingSymbol", 311 } },
   { 312, { Type2Type<TEX::UnderlyingSymbolSfx>(), "UnderlyingSymbolSfx", 312 } },
   { 313, { Type2Type<TEX::UnderlyingMaturityMonthYear>(), "UnderlyingMaturityMonthYear", 313 } },
   { 316, { Type2Type<TEX::UnderlyingStrikePrice>(), "UnderlyingStrikePrice", 316 } },
   { 317, { Type2Type<TEX::UnderlyingOptAttribute>(), "UnderlyingOptAttribute", 317 } },
   { 318, { Type2Type<TEX::UnderlyingCurrency>(), "UnderlyingCurrency", 318 } },
   { 320, { Type2Type<TEX::SecurityReqID>(), "SecurityReqID", 320 } },
   { 321, { Type2Type<TEX::SecurityRequestType, int>(), "SecurityRequestType", 321, &TEX::realmbases[70] } },
   { 322, { Type2Type<TEX::SecurityResponseID>(), "SecurityResponseID", 322 } },
   { 323, { Type2Type<TEX::SecurityResponseType, int>(), "SecurityResponseType", 323, &TEX::realmbases[71] } },
   { 324, { Type2Type<TEX::SecurityStatusReqID>(), "SecurityStatusReqID", 324 } },
   { 325, { Type2Type<TEX::UnsolicitedIndicator, char>(), "UnsolicitedIndicator", 325, &TEX::realmbases[72] } },
   { 326, { Type2Type<TEX::SecurityTradingStatus, int>(), "SecurityTradingStatus", 326, &TEX::realmbases[73] } },
   { 327, { Type2Type<TEX::HaltReasonChar, char>(), "HaltReasonChar", 327, &TEX::realmbases[74] } },
   { 328, { Type2Type<TEX::InViewOfCommon, char>(), "InViewOfCommon", 328, &TEX::realmbases[75] } },
   { 329, { Type2Type<TEX::DueToRelated, char>(), "DueToRelated", 329, &TEX::realmbases[76] } },
   { 330, { Type2Type<TEX::BuyVolume>(), "BuyVolume", 330 } },
   { 331, { Type2Type<TEX::SellVolume>(), "SellVolume", 331 } },
   { 332, { Type2Type<TEX::HighPx>(), "HighPx", 332 } },
   { 333, { Type2Type<TEX::LowPx>(), "LowPx", 333 } },
   { 334, { Type2Type<TEX::Adjustment, int>(), "Adjustment", 334, &TEX::realmbases[77] } },
   { 335, { Type2Type<TEX::TradSesReqID>(), "TradSesReqID", 335 } },
   { 336, { Type2Type<TEX::TradingSessionID>(), "TradingSessionID", 336 } },
   { 337, { Type2Type<TEX::ContraTrader>(), "ContraTrader", 337 } },
   { 338, { Type2Type<TEX::TradSesMethod, int>(), "TradSesMethod", 338, &TEX::realmbases[78] } },
   { 339, { Type2Type<TEX::TradSesMode, int>(), "TradSesMode", 339, &TEX::realmbases[79] } },
   { 340, { Type2Type<TEX::TradSesStatus, int>(), "TradSesStatus", 340, &TEX::realmbases[80] } },
   { 341, { Type2Type<TEX::TradSesStartTime>(), "TradSesStartTime", 341 } },
   { 342, { Type2Type<TEX::TradSesOpenTime>(), "TradSesOpenTime", 342 } },
   { 343, { Type2Type<TEX::TradSesPreCloseTime>(), "TradSesPreCloseTime", 343 } },
   { 344, { Type2Type<TEX::TradSesCloseTime>(), "TradSesCloseTime", 344 } },
   { 345, { Type2Type<TEX::TradSesEndTime>(), "TradSesEndTime", 345 } },
   { 346, { Type2Type<TEX::NumberOfOrders>(), "NumberOfOrders", 346 } },
   { 347, { Type2Type<TEX::MessageEncoding>(), "MessageEncoding", 347 } },
   { 348, { Type2Type<TEX::EncodedIssuerLen>(), "EncodedIssuerLen", 348 } },
   { 349, { Type2Type<TEX::EncodedIssuer>(), "EncodedIssuer", 349 } },
   { 350, { Type2Type<TEX::EncodedSecurityDescLen>(), "EncodedSecurityDescLen", 350 } },
   { 351, { Type2Type<TEX::EncodedSecurityDesc>(), "EncodedSecurityDesc", 351 } },
   { 352, { Type2Type<TEX::EncodedListExecInstLen>(), "EncodedListExecInstLen", 352 } },
   { 353, { Type2Type<TEX::EncodedListExecInst>(), "EncodedListExecInst", 353 } },
   { 354, { Type2Type<TEX::EncodedTextLen>(), "EncodedTextLen", 354 } },
   { 355, { Type2Type<TEX::EncodedText>(), "EncodedText", 355 } },
   { 356, { Type2Type<TEX::EncodedSubjectLen>(), "EncodedSubjectLen", 356 } },
   { 357, { Type2Type<TEX::EncodedSubject>(), "EncodedSubject", 357 } },
   { 358, { Type2Type<TEX::EncodedHeadlineLen>(), "EncodedHeadlineLen", 358 } },
   { 359, { Type2Type<TEX::EncodedHeadline>(), "EncodedHeadline", 359 } },
   { 360, { Type2Type<TEX::EncodedAllocTextLen>(), "EncodedAllocTextLen", 360 } },
   { 361, { Type2Type<TEX::EncodedAllocText>(), "EncodedAllocText", 361 } },
   { 362, { Type2Type<TEX::EncodedUnderlyingIssuerLen>(), "EncodedUnderlyingIssuerLen", 362 } },
   { 363, { Type2Type<TEX::EncodedUnderlyingIssuer>(), "EncodedUnderlyingIssuer", 363 } },
   { 364, { Type2Type<TEX::EncodedUnderlyingSecurityDescLen>(), "EncodedUnderlyingSecurityDescLen", 364 } },
   { 365, { Type2Type<TEX::EncodedUnderlyingSecurityDesc>(), "EncodedUnderlyingSecurityDesc", 365 } },
   { 366, { Type2Type<TEX::AllocPrice>(), "AllocPrice", 366 } },
   { 367, { Type2Type<TEX::QuoteSetValidUntilTime>(), "QuoteSetValidUntilTime", 367 } },
   { 368, { Type2Type<TEX::QuoteEntryRejectReason, int>(), "QuoteEntryRejectReason", 368, &TEX::realmbases[81] } },
   { 369, { Type2Type<TEX::LastMsgSeqNumProcessed>(), "LastMsgSeqNumProcessed", 369 } },
   { 371, { Type2Type<TEX::RefTagID>(), "RefTagID", 371 } },
   { 372, { Type2Type<TEX::RefMsgType>(), "RefMsgType", 372 } },
   { 373, { Type2Type<TEX::SessionRejectReason, int>(), "SessionRejectReason", 373, &TEX::realmbases[82] } },
   { 374, { Type2Type<TEX::BidRequestTransType, char>(), "BidRequestTransType", 374, &TEX::realmbases[83] } },
   { 375, { Type2Type<TEX::ContraBroker>(), "ContraBroker", 375 } },
   { 376, { Type2Type<TEX::ComplianceID>(), "ComplianceID", 376 } },
   { 377, { Type2Type<TEX::SolicitedFlag, char>(), "SolicitedFlag", 377, &TEX::realmbases[84] } },
   { 378, { Type2Type<TEX::ExecRestatementReason, int>(), "ExecRestatementReason", 378, &TEX::realmbases[85] } },
   { 379, { Type2Type<TEX::BusinessRejectRefID>(), "BusinessRejectRefID", 379 } },
   { 380, { Type2Type<TEX::BusinessRejectReason, int>(), "BusinessRejectReason", 380, &TEX::realmbases[86] } },
   { 381, { Type2Type<TEX::GrossTradeAmt>(), "GrossTradeAmt", 381 } },
   { 382, { Type2Type<TEX::NoContraBrokers>(), "NoContraBrokers", 382 } },
   { 383, { Type2Type<TEX::MaxMessageSize>(), "MaxMessageSize", 383 } },
   { 384, { Type2Type<TEX::NoMsgTypes>(), "NoMsgTypes", 384 } },
   { 385, { Type2Type<TEX::MsgDirection, char>(), "MsgDirection", 385, &TEX::realmbases[87] } },
   { 386, { Type2Type<TEX::NoTradingSessions>(), "NoTradingSessions", 386 } },
   { 387, { Type2Type<TEX::TotalVolumeTraded>(), "TotalVolumeTraded", 387 } },
   { 388, { Type2Type<TEX::DiscretionInst, char>(), "DiscretionInst", 388, &TEX::realmbases[88] } },
   { 389, { Type2Type<TEX::DiscretionOffsetValue>(), "DiscretionOffsetValue", 389 } },
   { 390, { Type2Type<TEX::BidID>(), "BidID", 390 } },
   { 391, { Type2Type<TEX::ClientBidID>(), "ClientBidID", 391 } },
   { 392, { Type2Type<TEX::ListName>(), "ListName", 392 } },
   { 393, { Type2Type<TEX::TotNoRelatedSym>(), "TotNoRelatedSym", 393 } },
   { 394, { Type2Type<TEX::BidType, int>(), "BidType", 394, &TEX::realmbases[89] } },
   { 395, { Type2Type<TEX::NumTickets>(), "NumTickets", 395 } },
   { 396, { Type2Type<TEX::SideValue1>(), "SideValue1", 396 } },
   { 397, { Type2Type<TEX::SideValue2>(), "SideValue2", 397 } },
   { 398, { Type2Type<TEX::NoBidDescriptors>(), "NoBidDescriptors", 398 } },
   { 399, { Type2Type<TEX::BidDescriptorType, int>(), "BidDescriptorType", 399, &TEX::realmbases[90] } },
   { 400, { Type2Type<TEX::BidDescriptor>(), "BidDescriptor", 400 } },
   { 401, { Type2Type<TEX::SideValueInd, int>(), "SideValueInd", 401, &TEX::realmbases[91] } },
   { 402, { Type2Type<TEX::LiquidityPctLow>(), "LiquidityPctLow", 402 } },
   { 403, { Type2Type<TEX::LiquidityPctHigh>(), "LiquidityPctHigh", 403 } },
   { 404, { Type2Type<TEX::LiquidityValue>(), "LiquidityValue", 404 } },
   { 405, { Type2Type<TEX::EFPTrackingError>(), "EFPTrackingError", 405 } },
   { 406, { Type2Type<TEX::FairValue>(), "FairValue", 406 } },
   { 407, { Type2Type<TEX::OutsideIndexPct>(), "OutsideIndexPct", 407 } },
   { 408, { Type2Type<TEX::ValueOfFutures>(), "ValueOfFutures", 408 } },
   { 409, { Type2Type<TEX::LiquidityIndType, int>(), "LiquidityIndType", 409, &TEX::realmbases[92] } },
   { 410, { Type2Type<TEX::WtAverageLiquidity>(), "WtAverageLiquidity", 410 } },
   { 411, { Type2Type<TEX::ExchangeForPhysical, char>(), "ExchangeForPhysical", 411, &TEX::realmbases[93] } },
   { 412, { Type2Type<TEX::OutMainCntryUIndex>(), "OutMainCntryUIndex", 412 } },
   { 413, { Type2Type<TEX::CrossPercent>(), "CrossPercent", 413 } },
   { 414, { Type2Type<TEX::ProgRptReqs, int>(), "ProgRptReqs", 414, &TEX::realmbases[94] } },
   { 415, { Type2Type<TEX::ProgPeriodInterval>(), "ProgPeriodInterval", 415 } },
   { 416, { Type2Type<TEX::IncTaxInd, int>(), "IncTaxInd", 416, &TEX::realmbases[95] } },
   { 417, { Type2Type<TEX::NumBidders>(), "NumBidders", 417 } },
   { 418, { Type2Type<TEX::BidTradeType, char>(), "BidTradeType", 418, &TEX::realmbases[96] } },
   { 419, { Type2Type<TEX::BasisPxType, char>(), "BasisPxType", 419, &TEX::realmbases[97] } },
   { 420, { Type2Type<TEX::NoBidComponents>(), "NoBidComponents", 420 } },
   { 421, { Type2Type<TEX::Country>(), "Country", 421 } },
   { 422, { Type2Type<TEX::TotNoStrikes>(), "TotNoStrikes", 422 } },
   { 423, { Type2Type<TEX::PriceType, int>(), "PriceType", 423, &TEX::realmbases[98] } },
   { 424, { Type2Type<TEX::DayOrderQty>(), "DayOrderQty", 424 } },
   { 425, { Type2Type<TEX::DayCumQty>(), "DayCumQty", 425 } },
   { 426, { Type2Type<TEX::DayAvgPx>(), "DayAvgPx", 426 } },
   { 427, { Type2Type<TEX::GTBookingInst, int>(), "GTBookingInst", 427, &TEX::realmbases[99] } },
   { 428, { Type2Type<TEX::NoStrikes>(), "NoStrikes", 428 } },
   { 429, { Type2Type<TEX::ListStatusType, int>(), "ListStatusType", 429, &TEX::realmbases[100] } },
   { 430, { Type2Type<TEX::NetGrossInd, int>(), "NetGrossInd", 430, &TEX::realmbases[101] } },
   { 431, { Type2Type<TEX::ListOrderStatus, int>(), "ListOrderStatus", 431, &TEX::realmbases[102] } },
   { 432, { Type2Type<TEX::ExpireDate>(), "ExpireDate", 432 } },
   { 433, { Type2Type<TEX::ListExecInstType, char>(), "ListExecInstType", 433, &TEX::realmbases[103] } },
   { 434, { Type2Type<TEX::CxlRejResponseTo, char>(), "CxlRejResponseTo", 434, &TEX::realmbases[104] } },
   { 435, { Type2Type<TEX::UnderlyingCouponRate>(), "UnderlyingCouponRate", 435 } },
   { 436, { Type2Type<TEX::UnderlyingContractMultiplier>(), "UnderlyingContractMultiplier", 436 } },
   { 437, { Type2Type<TEX::ContraTradeQty>(), "ContraTradeQty", 437 } },
   { 438, { Type2Type<TEX::ContraTradeTime>(), "ContraTradeTime", 438 } },
   { 441, { Type2Type<TEX::LiquidityNumSecurities>(), "LiquidityNumSecurities", 441 } },
   { 442, { Type2Type<TEX::MultiLegReportingType, char>(), "MultiLegReportingType", 442, &TEX::realmbases[105] } },
   { 443, { Type2Type<TEX::StrikeTime>(), "StrikeTime", 443 } },
   { 444, { Type2Type<TEX::ListStatusText>(), "ListStatusText", 444 } },
   { 445, { Type2Type<TEX::EncodedListStatusTextLen>(), "EncodedListStatusTextLen", 445 } },
   { 446, { Type2Type<TEX::EncodedListStatusText>(), "EncodedListStatusText", 446 } },
   { 447, { Type2Type<TEX::PartyIDSource, char>(), "PartyIDSource", 447, &TEX::realmbases[106] } },
   { 448, { Type2Type<TEX::PartyID>(), "PartyID", 448 } },
   { 451, { Type2Type<TEX::NetChgPrevDay>(), "NetChgPrevDay", 451 } },
   { 452, { Type2Type<TEX::PartyRole, int>(), "PartyRole", 452, &TEX::realmbases[107] } },
   { 453, { Type2Type<TEX::NoPartyIDs>(), "NoPartyIDs", 453 } },
   { 454, { Type2Type<TEX::NoSecurityAltID>(), "NoSecurityAltID", 454 } },
   { 455, { Type2Type<TEX::SecurityAltID>(), "SecurityAltID", 455 } },
   { 456, { Type2Type<TEX::SecurityAltIDSource>(), "SecurityAltIDSource", 456 } },
   { 457, { Type2Type<TEX::NoUnderlyingSecurityAltID>(), "NoUnderlyingSecurityAltID", 457 } },
   { 458, { Type2Type<TEX::UnderlyingSecurityAltID>(), "UnderlyingSecurityAltID", 458 } },
   { 459, { Type2Type<TEX::UnderlyingSecurityAltIDSource>(), "UnderlyingSecurityAltIDSource", 459 } },
   { 460, { Type2Type<TEX::Product, int>(), "Product", 460, &TEX::realmbases[108] } },
   { 461, { Type2Type<TEX::CFICode>(), "CFICode", 461 } },
   { 462, { Type2Type<TEX::UnderlyingProduct>(), "UnderlyingProduct", 462 } },
   { 463, { Type2Type<TEX::UnderlyingCFICode>(), "UnderlyingCFICode", 463 } },
   { 464, { Type2Type<TEX::TestMessageIndicator, char>(), "TestMessageIndicator", 464, &TEX::realmbases[109] } },
   { 466, { Type2Type<TEX::BookingRefID>(), "BookingRefID", 466 } },
   { 467, { Type2Type<TEX::IndividualAllocID>(), "IndividualAllocID", 467 } },
   { 468, { Type2Type<TEX::RoundingDirection, char>(), "RoundingDirection", 468, &TEX::realmbases[110] } },
   { 469, { Type2Type<TEX::RoundingModulus>(), "RoundingModulus", 469 } },
   { 470, { Type2Type<TEX::CountryOfIssue>(), "CountryOfIssue", 470 } },
   { 471, { Type2Type<TEX::StateOrProvinceOfIssue>(), "StateOrProvinceOfIssue", 471 } },
   { 472, { Type2Type<TEX::LocaleOfIssue>(), "LocaleOfIssue", 472 } },
   { 473, { Type2Type<TEX::NoRegistDtls>(), "NoRegistDtls", 473 } },
   { 474, { Type2Type<TEX::MailingDtls>(), "MailingDtls", 474 } },
   { 475, { Type2Type<TEX::InvestorCountryOfResidence>(), "InvestorCountryOfResidence", 475 } },
   { 476, { Type2Type<TEX::PaymentRef>(), "PaymentRef", 476 } },
   { 477, { Type2Type<TEX::DistribPaymentMethod, int>(), "DistribPaymentMethod", 477, &TEX::realmbases[111] } },
   { 478, { Type2Type<TEX::CashDistribCurr>(), "CashDistribCurr", 478 } },
   { 479, { Type2Type<TEX::CommCurrency>(), "CommCurrency", 479 } },
   { 480, { Type2Type<TEX::CancellationRights, char>(), "CancellationRights", 480, &TEX::realmbases[112] } },
   { 481, { Type2Type<TEX::MoneyLaunderingStatus, char>(), "MoneyLaunderingStatus", 481, &TEX::realmbases[113] } },
   { 482, { Type2Type<TEX::MailingInst>(), "MailingInst", 482 } },
   { 483, { Type2Type<TEX::TransBkdTime>(), "TransBkdTime", 483 } },
   { 484, { Type2Type<TEX::ExecPriceType, char>(), "ExecPriceType", 484, &TEX::realmbases[114] } },
   { 485, { Type2Type<TEX::ExecPriceAdjustment>(), "ExecPriceAdjustment", 485 } },
   { 486, { Type2Type<TEX::DateOfBirth>(), "DateOfBirth", 486 } },
   { 487, { Type2Type<TEX::TradeReportTransType, int>(), "TradeReportTransType", 487, &TEX::realmbases[115] } },
   { 488, { Type2Type<TEX::CardHolderName>(), "CardHolderName", 488 } },
   { 489, { Type2Type<TEX::CardNumber>(), "CardNumber", 489 } },
   { 490, { Type2Type<TEX::CardExpDate>(), "CardExpDate", 490 } },
   { 491, { Type2Type<TEX::CardIssNum>(), "CardIssNum", 491 } },
   { 492, { Type2Type<TEX::PaymentMethod, int>(), "PaymentMethod", 492, &TEX::realmbases[116] } },
   { 493, { Type2Type<TEX::RegistAcctType>(), "RegistAcctType", 493 } },
   { 494, { Type2Type<TEX::Designation>(), "Designation", 494 } },
   { 495, { Type2Type<TEX::TaxAdvantageType, int>(), "TaxAdvantageType", 495, &TEX::realmbases[117] } },
   { 496, { Type2Type<TEX::RegistRejReasonText>(), "RegistRejReasonText", 496 } },
   { 497, { Type2Type<TEX::FundRenewWaiv, char>(), "FundRenewWaiv", 497, &TEX::realmbases[118] } },
   { 498, { Type2Type<TEX::CashDistribAgentName>(), "CashDistribAgentName", 498 } },
   { 499, { Type2Type<TEX::CashDistribAgentCode>(), "CashDistribAgentCode", 499 } },
   { 500, { Type2Type<TEX::CashDistribAgentAcctNumber>(), "CashDistribAgentAcctNumber", 500 } },
   { 501, { Type2Type<TEX::CashDistribPayRef>(), "CashDistribPayRef", 501 } },
   { 502, { Type2Type<TEX::CashDistribAgentAcctName>(), "CashDistribAgentAcctName", 502 } },
   { 503, { Type2Type<TEX::CardStartDate>(), "CardStartDate", 503 } },
   { 504, { Type2Type<TEX::PaymentDate>(), "PaymentDate", 504 } },
   { 505, { Type2Type<TEX::PaymentRemitterID>(), "PaymentRemitterID", 505 } },
   { 506, { Type2Type<TEX::RegistStatus, char>(), "RegistStatus", 506, &TEX::realmbases[119] } },
   { 507, { Type2Type<TEX::RegistRejReasonCode, int>(), "RegistRejReasonCode", 507, &TEX::realmbases[120] } },
   { 508, { Type2Type<TEX::RegistRefID>(), "RegistRefID", 508 } },
   { 509, { Type2Type<TEX::RegistDtls>(), "RegistDtls", 509 } },
   { 510, { Type2Type<TEX::NoDistribInsts>(), "NoDistribInsts", 510 } },
   { 511, { Type2Type<TEX::RegistEmail>(), "RegistEmail", 511 } },
   { 512, { Type2Type<TEX::DistribPercentage>(), "DistribPercentage", 512 } },
   { 513, { Type2Type<TEX::RegistID>(), "RegistID", 513 } },
   { 514, { Type2Type<TEX::RegistTransType, char>(), "RegistTransType", 514, &TEX::realmbases[121] } },
   { 515, { Type2Type<TEX::ExecValuationPoint>(), "ExecValuationPoint", 515 } },
   { 516, { Type2Type<TEX::OrderPercent>(), "OrderPercent", 516 } },
   { 517, { Type2Type<TEX::OwnershipType, char>(), "OwnershipType", 517, &TEX::realmbases[122] } },
   { 518, { Type2Type<TEX::NoContAmts>(), "NoContAmts", 518 } },
   { 519, { Type2Type<TEX::ContAmtType, int>(), "ContAmtType", 519, &TEX::realmbases[123] } },
   { 520, { Type2Type<TEX::ContAmtValue>(), "ContAmtValue", 520 } },
   { 521, { Type2Type<TEX::ContAmtCurr>(), "ContAmtCurr", 521 } },
   { 522, { Type2Type<TEX::OwnerType, int>(), "OwnerType", 522, &TEX::realmbases[124] } },
   { 523, { Type2Type<TEX::PartySubID>(), "PartySubID", 523 } },
   { 524, { Type2Type<TEX::NestedPartyID>(), "NestedPartyID", 524 } },
   { 525, { Type2Type<TEX::NestedPartyIDSource>(), "NestedPartyIDSource", 525 } },
   { 526, { Type2Type<TEX::SecondaryClOrdID>(), "SecondaryClOrdID", 526 } },
   { 527, { Type2Type<TEX::SecondaryExecID>(), "SecondaryExecID", 527 } },
   { 528, { Type2Type<TEX::OrderCapacity, char>(), "OrderCapacity", 528, &TEX::realmbases[125] } },
   { 529, { Type2Type<TEX::OrderRestrictions, f8String>(), "OrderRestrictions", 529, &TEX::realmbases[126] } },
   { 530, { Type2Type<TEX::MassCancelRequestType, char>(), "MassCancelRequestType", 530, &TEX::realmbases[127] } },
   { 531, { Type2Type<TEX::MassCancelResponse, char>(), "MassCancelResponse", 531, &TEX::realmbases[128] } },
   { 532, { Type2Type<TEX::MassCancelRejectReason, char>(), "MassCancelRejectReason", 532, &TEX::realmbases[129] } },
   { 533, { Type2Type<TEX::TotalAffectedOrders>(), "TotalAffectedOrders", 533 } },
   { 534, { Type2Type<TEX::NoAffectedOrders>(), "NoAffectedOrders", 534 } },
   { 535, { Type2Type<TEX::AffectedOrderID>(), "AffectedOrderID", 535 } },
   { 536, { Type2Type<TEX::AffectedSecondaryOrderID>(), "AffectedSecondaryOrderID", 536 } },
   { 537, { Type2Type<TEX::QuoteType, int>(), "QuoteType", 537, &TEX::realmbases[130] } },
   { 538, { Type2Type<TEX::NestedPartyRole>(), "NestedPartyRole", 538 } },
   { 539, { Type2Type<TEX::NoNestedPartyIDs>(), "NoNestedPartyIDs", 539 } },
   { 540, { Type2Type<TEX::TotalAccruedInterestAmt>(), "TotalAccruedInterestAmt", 540 } },
   { 541, { Type2Type<TEX::MaturityDate>(), "MaturityDate", 541 } },
   { 542, { Type2Type<TEX::UnderlyingMaturityDate>(), "UnderlyingMaturityDate", 542 } },
   { 543, { Type2Type<TEX::InstrRegistry, f8String>(), "InstrRegistry", 543, &TEX::realmbases[131] } },
   { 544, { Type2Type<TEX::CashMargin, char>(), "CashMargin", 544, &TEX::realmbases[132] } },
   { 545, { Type2Type<TEX::NestedPartySubID>(), "NestedPartySubID", 545 } },
   { 546, { Type2Type<TEX::Scope, f8String>(), "Scope", 546, &TEX::realmbases[133] } },
   { 547, { Type2Type<TEX::MDImplicitDelete, char>(), "MDImplicitDelete", 547, &TEX::realmbases[134] } },
   { 548, { Type2Type<TEX::CrossID>(), "CrossID", 548 } },
   { 549, { Type2Type<TEX::CrossType, int>(), "CrossType", 549, &TEX::realmbases[135] } },
   { 550, { Type2Type<TEX::CrossPrioritization, int>(), "CrossPrioritization", 550, &TEX::realmbases[136] } },
   { 551, { Type2Type<TEX::OrigCrossID>(), "OrigCrossID", 551 } },
   { 552, { Type2Type<TEX::NoSides, int>(), "NoSides", 552, &TEX::realmbases[137] } },
   { 553, { Type2Type<TEX::Username>(), "Username", 553 } },
   { 554, { Type2Type<TEX::Password>(), "Password", 554 } },
   { 555, { Type2Type<TEX::NoLegs>(), "NoLegs", 555 } },
   { 556, { Type2Type<TEX::LegCurrency>(), "LegCurrency", 556 } },
   { 557, { Type2Type<TEX::TotNoSecurityTypes>(), "TotNoSecurityTypes", 557 } },
   { 558, { Type2Type<TEX::NoSecurityTypes>(), "NoSecurityTypes", 558 } },
   { 559, { Type2Type<TEX::SecurityListRequestType, int>(), "SecurityListRequestType", 559, &TEX::realmbases[138] } },
   { 560, { Type2Type<TEX::SecurityRequestResult, int>(), "SecurityRequestResult", 560, &TEX::realmbases[139] } },
   { 561, { Type2Type<TEX::RoundLot>(), "RoundLot", 561 } },
   { 562, { Type2Type<TEX::MinTradeVol>(), "MinTradeVol", 562 } },
   { 563, { Type2Type<TEX::MultiLegRptTypeReq, int>(), "MultiLegRptTypeReq", 563, &TEX::realmbases[140] } },
   { 564, { Type2Type<TEX::LegPositionEffect>(), "LegPositionEffect", 564 } },
   { 565, { Type2Type<TEX::LegCoveredOrUncovered>(), "LegCoveredOrUncovered", 565 } },
   { 566, { Type2Type<TEX::LegPrice>(), "LegPrice", 566 } },
   { 567, { Type2Type<TEX::TradSesStatusRejReason, int>(), "TradSesStatusRejReason", 567, &TEX::realmbases[141] } },
   { 568, { Type2Type<TEX::TradeRequestID>(), "TradeRequestID", 568 } },
   { 569, { Type2Type<TEX::TradeRequestType, int>(), "TradeRequestType", 569, &TEX::realmbases[142] } },
   { 570, { Type2Type<TEX::PreviouslyReported, char>(), "PreviouslyReported", 570, &TEX::realmbases[143] } },
   { 571, { Type2Type<TEX::TradeReportID>(), "TradeReportID", 571 } },
   { 572, { Type2Type<TEX::TradeReportRefID>(), "TradeReportRefID", 572 } },
   { 573, { Type2Type<TEX::MatchStatus, char>(), "MatchStatus", 573, &TEX::realmbases[144] } },
   { 574, { Type2Type<TEX::MatchType, f8String>(), "MatchType", 574, &TEX::realmbases[145] } },
   { 575, { Type2Type<TEX::OddLot, char>(), "OddLot", 575, &TEX::realmbases[146] } },
   { 576, { Type2Type<TEX::NoClearingInstructions>(), "NoClearingInstructions", 576 } },
   { 577, { Type2Type<TEX::ClearingInstruction, int>(), "ClearingInstruction", 577, &TEX::realmbases[147] } },
   { 578, { Type2Type<TEX::TradeInputSource>(), "TradeInputSource", 578 } },
   { 579, { Type2Type<TEX::TradeInputDevice>(), "TradeInputDevice", 579 } },
   { 580, { Type2Type<TEX::NoDates>(), "NoDates", 580 } },
   { 581, { Type2Type<TEX::AccountType, int>(), "AccountType", 581, &TEX::realmbases[148] } },
   { 582, { Type2Type<TEX::CustOrderCapacity, int>(), "CustOrderCapacity", 582, &TEX::realmbases[149] } },
   { 583, { Type2Type<TEX::ClOrdLinkID>(), "ClOrdLinkID", 583 } },
   { 584, { Type2Type<TEX::MassStatusReqID>(), "MassStatusReqID", 584 } },
   { 585, { Type2Type<TEX::MassStatusReqType, int>(), "MassStatusReqType", 585, &TEX::realmbases[150] } },
   { 586, { Type2Type<TEX::OrigOrdModTime>(), "OrigOrdModTime", 586 } },
   { 587, { Type2Type<TEX::LegSettlType>(), "LegSettlType", 587 } },
   { 588, { Type2Type<TEX::LegSettlDate>(), "LegSettlDate", 588 } },
   { 589, { Type2Type<TEX::DayBookingInst, char>(), "DayBookingInst", 589, &TEX::realmbases[151] } },
   { 590, { Type2Type<TEX::BookingUnit, char>(), "BookingUnit", 590, &TEX::realmbases[152] } },
   { 591, { Type2Type<TEX::PreallocMethod, char>(), "PreallocMethod", 591, &TEX::realmbases[153] } },
   { 592, { Type2Type<TEX::UnderlyingCountryOfIssue>(), "UnderlyingCountryOfIssue", 592 } },
   { 593, { Type2Type<TEX::UnderlyingStateOrProvinceOfIssue>(), "UnderlyingStateOrProvinceOfIssue", 593 } },
   { 594, { Type2Type<TEX::UnderlyingLocaleOfIssue>(), "UnderlyingLocaleOfIssue", 594 } },
   { 595, { Type2Type<TEX::UnderlyingInstrRegistry>(), "UnderlyingInstrRegistry", 595 } },
   { 596, { Type2Type<TEX::LegCountryOfIssue>(), "LegCountryOfIssue", 596 } },
   { 597, { Type2Type<TEX::LegStateOrProvinceOfIssue>(), "LegStateOrProvinceOfIssue", 597 } },
   { 598, { Type2Type<TEX::LegLocaleOfIssue>(), "LegLocaleOfIssue", 598 } },
   { 599, { Type2Type<TEX::LegInstrRegistry>(), "LegInstrRegistry", 599 } },
   { 600, { Type2Type<TEX::LegSymbol>(), "LegSymbol", 600 } },
   { 601, { Type2Type<TEX::LegSymbolSfx>(), "LegSymbolSfx", 601 } },
   { 602, { Type2Type<TEX::LegSecurityID>(), "LegSecurityID", 602 } },
   { 603, { Type2Type<TEX::LegSecurityIDSource>(), "LegSecurityIDSource", 603 } },
   { 604, { Type2Type<TEX::NoLegSecurityAltID>(), "NoLegSecurityAltID", 604 } },
   { 605, { Type2Type<TEX::LegSecurityAltID>(), "LegSecurityAltID", 605 } },
   { 606, { Type2Type<TEX::LegSecurityAltIDSource>(), "LegSecurityAltIDSource", 606 } },
   { 607, { Type2Type<TEX::LegProduct>(), "LegProduct", 607 } },
   { 608, { Type2Type<TEX::LegCFICode>(), "LegCFICode", 608 } },
   { 609, { Type2Type<TEX::LegSecurityType>(), "LegSecurityType", 609 } },
   { 610, { Type2Type<TEX::LegMaturityMonthYear>(), "LegMaturityMonthYear", 610 } },
   { 611, { Type2Type<TEX::LegMaturityDate>(), "LegMaturityDate", 611 } },
   { 612, { Type2Type<TEX::LegStrikePrice>(), "LegStrikePrice", 612 } },
   { 613, { Type2Type<TEX::LegOptAttribute>(), "LegOptAttribute", 613 } },
   { 614, { Type2Type<TEX::LegContractMultiplier>(), "LegContractMultiplier", 614 } },
   { 615, { Type2Type<TEX::LegCouponRate>(), "LegCouponRate", 615 } },
   { 616, { Type2Type<TEX::LegSecurityExchange>(), "LegSecurityExchange", 616 } },
   { 617, { Type2Type<TEX::LegIssuer>(), "LegIssuer", 617 } },
   { 618, { Type2Type<TEX::EncodedLegIssuerLen>(), "EncodedLegIssuerLen", 618 } },
   { 619, { Type2Type<TEX::EncodedLegIssuer>(), "EncodedLegIssuer", 619 } },
   { 620, { Type2Type<TEX::LegSecurityDesc>(), "LegSecurityDesc", 620 } },
   { 621, { Type2Type<TEX::EncodedLegSecurityDescLen>(), "EncodedLegSecurityDescLen", 621 } },
   { 622, { Type2Type<TEX::EncodedLegSecurityDesc>(), "EncodedLegSecurityDesc", 622 } },
   { 623, { Type2Type<TEX::LegRatioQty>(), "LegRatioQty", 623 } },
   { 624, { Type2Type<TEX::LegSide>(), "LegSide", 624 } },
   { 625, { Type2Type<TEX::TradingSessionSubID>(), "TradingSessionSubID", 625 } },
   { 626, { Type2Type<TEX::AllocType, int>(), "AllocType", 626, &TEX::realmbases[154] } },
   { 627, { Type2Type<TEX::NoHops>(), "NoHops", 627 } },
   { 628, { Type2Type<TEX::HopCompID>(), "HopCompID", 628 } },
   { 629, { Type2Type<TEX::HopSendingTime>(), "HopSendingTime", 629 } },
   { 630, { Type2Type<TEX::HopRefID>(), "HopRefID", 630 } },
   { 631, { Type2Type<TEX::MidPx>(), "MidPx", 631 } },
   { 632, { Type2Type<TEX::BidYield>(), "BidYield", 632 } },
   { 633, { Type2Type<TEX::MidYield>(), "MidYield", 633 } },
   { 634, { Type2Type<TEX::OfferYield>(), "OfferYield", 634 } },
   { 635, { Type2Type<TEX::ClearingFeeIndicator, f8String>(), "ClearingFeeIndicator", 635, &TEX::realmbases[155] } },
   { 636, { Type2Type<TEX::WorkingIndicator, char>(), "WorkingIndicator", 636, &TEX::realmbases[156] } },
   { 637, { Type2Type<TEX::LegLastPx>(), "LegLastPx", 637 } },
   { 638, { Type2Type<TEX::PriorityIndicator, int>(), "PriorityIndicator", 638, &TEX::realmbases[157] } },
   { 639, { Type2Type<TEX::PriceImprovement>(), "PriceImprovement", 639 } },
   { 640, { Type2Type<TEX::Price2>(), "Price2", 640 } },
   { 641, { Type2Type<TEX::LastForwardPoints2>(), "LastForwardPoints2", 641 } },
   { 642, { Type2Type<TEX::BidForwardPoints2>(), "BidForwardPoints2", 642 } },
   { 643, { Type2Type<TEX::OfferForwardPoints2>(), "OfferForwardPoints2", 643 } },
   { 644, { Type2Type<TEX::RFQReqID>(), "RFQReqID", 644 } },
   { 645, { Type2Type<TEX::MktBidPx>(), "MktBidPx", 645 } },
   { 646, { Type2Type<TEX::MktOfferPx>(), "MktOfferPx", 646 } },
   { 647, { Type2Type<TEX::MinBidSize>(), "MinBidSize", 647 } },
   { 648, { Type2Type<TEX::MinOfferSize>(), "MinOfferSize", 648 } },
   { 649, { Type2Type<TEX::QuoteStatusReqID>(), "QuoteStatusReqID", 649 } },
   { 650, { Type2Type<TEX::LegalConfirm, char>(), "LegalConfirm", 650, &TEX::realmbases[158] } },
   { 651, { Type2Type<TEX::UnderlyingLastPx>(), "UnderlyingLastPx", 651 } },
   { 652, { Type2Type<TEX::UnderlyingLastQty>(), "UnderlyingLastQty", 652 } },
   { 654, { Type2Type<TEX::LegRefID>(), "LegRefID", 654 } },
   { 655, { Type2Type<TEX::ContraLegRefID>(), "ContraLegRefID", 655 } },
   { 656, { Type2Type<TEX::SettlCurrBidFxRate>(), "SettlCurrBidFxRate", 656 } },
   { 657, { Type2Type<TEX::SettlCurrOfferFxRate>(), "SettlCurrOfferFxRate", 657 } },
   { 658, { Type2Type<TEX::QuoteRequestRejectReason, int>(), "QuoteRequestRejectReason", 658, &TEX::realmbases[159] } },
   { 659, { Type2Type<TEX::SideComplianceID>(), "SideComplianceID", 659 } },
   { 660, { Type2Type<TEX::AcctIDSource, int>(), "AcctIDSource", 660, &TEX::realmbases[160] } },
   { 661, { Type2Type<TEX::AllocAcctIDSource>(), "AllocAcctIDSource", 661 } },
   { 662, { Type2Type<TEX::BenchmarkPrice>(), "BenchmarkPrice", 662 } },
   { 663, { Type2Type<TEX::BenchmarkPriceType>(), "BenchmarkPriceType", 663 } },
   { 664, { Type2Type<TEX::ConfirmID>(), "ConfirmID", 664 } },
   { 665, { Type2Type<TEX::ConfirmStatus, int>(), "ConfirmStatus", 665, &TEX::realmbases[161] } },
   { 666, { Type2Type<TEX::ConfirmTransType, int>(), "ConfirmTransType", 666, &TEX::realmbases[162] } },
   { 667, { Type2Type<TEX::ContractSettlMonth>(), "ContractSettlMonth", 667 } },
   { 668, { Type2Type<TEX::DeliveryForm, int>(), "DeliveryForm", 668, &TEX::realmbases[163] } },
   { 669, { Type2Type<TEX::LastParPx>(), "LastParPx", 669 } },
   { 670, { Type2Type<TEX::NoLegAllocs>(), "NoLegAllocs", 670 } },
   { 671, { Type2Type<TEX::LegAllocAccount>(), "LegAllocAccount", 671 } },
   { 672, { Type2Type<TEX::LegIndividualAllocID>(), "LegIndividualAllocID", 672 } },
   { 673, { Type2Type<TEX::LegAllocQty>(), "LegAllocQty", 673 } },
   { 674, { Type2Type<TEX::LegAllocAcctIDSource>(), "LegAllocAcctIDSource", 674 } },
   { 675, { Type2Type<TEX::LegSettlCurrency>(), "LegSettlCurrency", 675 } },
   { 676, { Type2Type<TEX::LegBenchmarkCurveCurrency>(), "LegBenchmarkCurveCurrency", 676 } },
   { 677, { Type2Type<TEX::LegBenchmarkCurveName>(), "LegBenchmarkCurveName", 677 } },
   { 678, { Type2Type<TEX::LegBenchmarkCurvePoint>(), "LegBenchmarkCurvePoint", 678 } },
   { 679, { Type2Type<TEX::LegBenchmarkPrice>(), "LegBenchmarkPrice", 679 } },
   { 680, { Type2Type<TEX::LegBenchmarkPriceType>(), "LegBenchmarkPriceType", 680 } },
   { 681, { Type2Type<TEX::LegBidPx>(), "LegBidPx", 681 } },
   { 682, { Type2Type<TEX::LegIOIQty>(), "LegIOIQty", 682 } },
   { 683, { Type2Type<TEX::NoLegStipulations>(), "NoLegStipulations", 683 } },
   { 684, { Type2Type<TEX::LegOfferPx>(), "LegOfferPx", 684 } },
   { 686, { Type2Type<TEX::LegPriceType>(), "LegPriceType", 686 } },
   { 687, { Type2Type<TEX::LegQty>(), "LegQty", 687 } },
   { 688, { Type2Type<TEX::LegStipulationType>(), "LegStipulationType", 688 } },
   { 689, { Type2Type<TEX::LegStipulationValue>(), "LegStipulationValue", 689 } },
   { 690, { Type2Type<TEX::LegSwapType, int>(), "LegSwapType", 690, &TEX::realmbases[164] } },
   { 691, { Type2Type<TEX::Pool>(), "Pool", 691 } },
   { 692, { Type2Type<TEX::QuotePriceType, int>(), "QuotePriceType", 692, &TEX::realmbases[165] } },
   { 693, { Type2Type<TEX::QuoteRespID>(), "QuoteRespID", 693 } },
   { 694, { Type2Type<TEX::QuoteRespType, int>(), "QuoteRespType", 694, &TEX::realmbases[166] } },
   { 695, { Type2Type<TEX::QuoteQualifier>(), "QuoteQualifier", 695 } },
   { 696, { Type2Type<TEX::YieldRedemptionDate>(), "YieldRedemptionDate", 696 } },
   { 697, { Type2Type<TEX::YieldRedemptionPrice>(), "YieldRedemptionPrice", 697 } },
   { 698, { Type2Type<TEX::YieldRedemptionPriceType>(), "YieldRedemptionPriceType", 698 } },
   { 699, { Type2Type<TEX::BenchmarkSecurityID>(), "BenchmarkSecurityID", 699 } },
   { 700, { Type2Type<TEX::ReversalIndicator>(), "ReversalIndicator", 700 } },
   { 701, { Type2Type<TEX::YieldCalcDate>(), "YieldCalcDate", 701 } },
   { 702, { Type2Type<TEX::NoPositions>(), "NoPositions", 702 } },
   { 703, { Type2Type<TEX::PosType, f8String>(), "PosType", 703, &TEX::realmbases[167] } },
   { 704, { Type2Type<TEX::LongQty>(), "LongQty", 704 } },
   { 705, { Type2Type<TEX::ShortQty>(), "ShortQty", 705 } },
   { 706, { Type2Type<TEX::PosQtyStatus, int>(), "PosQtyStatus", 706, &TEX::realmbases[168] } },
   { 707, { Type2Type<TEX::PosAmtType, f8String>(), "PosAmtType", 707, &TEX::realmbases[169] } },
   { 708, { Type2Type<TEX::PosAmt>(), "PosAmt", 708 } },
   { 709, { Type2Type<TEX::PosTransType, int>(), "PosTransType", 709, &TEX::realmbases[170] } },
   { 710, { Type2Type<TEX::PosReqID>(), "PosReqID", 710 } },
   { 711, { Type2Type<TEX::NoUnderlyings>(), "NoUnderlyings", 711 } },
   { 712, { Type2Type<TEX::PosMaintAction, int>(), "PosMaintAction", 712, &TEX::realmbases[171] } },
   { 713, { Type2Type<TEX::OrigPosReqRefID>(), "OrigPosReqRefID", 713 } },
   { 714, { Type2Type<TEX::PosMaintRptRefID>(), "PosMaintRptRefID", 714 } },
   { 715, { Type2Type<TEX::ClearingBusinessDate>(), "ClearingBusinessDate", 715 } },
   { 716, { Type2Type<TEX::SettlSessID>(), "SettlSessID", 716 } },
   { 717, { Type2Type<TEX::SettlSessSubID>(), "SettlSessSubID", 717 } },
   { 718, { Type2Type<TEX::AdjustmentType, int>(), "AdjustmentType", 718, &TEX::realmbases[172] } },
   { 719, { Type2Type<TEX::ContraryInstructionIndicator>(), "ContraryInstructionIndicator", 719 } },
   { 720, { Type2Type<TEX::PriorSpreadIndicator>(), "PriorSpreadIndicator", 720 } },
   { 721, { Type2Type<TEX::PosMaintRptID>(), "PosMaintRptID", 721 } },
   { 722, { Type2Type<TEX::PosMaintStatus, int>(), "PosMaintStatus", 722, &TEX::realmbases[173] } },
   { 723, { Type2Type<TEX::PosMaintResult, int>(), "PosMaintResult", 723, &TEX::realmbases[174] } },
   { 724, { Type2Type<TEX::PosReqType, int>(), "PosReqType", 724, &TEX::realmbases[175] } },
   { 725, { Type2Type<TEX::ResponseTransportType, int>(), "ResponseTransportType", 725, &TEX::realmbases[176] } },
   { 726, { Type2Type<TEX::ResponseDestination>(), "ResponseDestination", 726 } },
   { 727, { Type2Type<TEX::TotalNumPosReports>(), "TotalNumPosReports", 727 } },
   { 728, { Type2Type<TEX::PosReqResult, int>(), "PosReqResult", 728, &TEX::realmbases[177] } },
   { 729, { Type2Type<TEX::PosReqStatus, int>(), "PosReqStatus", 729, &TEX::realmbases[178] } },
   { 730, { Type2Type<TEX::SettlPrice>(), "SettlPrice", 730 } },
   { 731, { Type2Type<TEX::SettlPriceType, int>(), "SettlPriceType", 731, &TEX::realmbases[179] } },
   { 732, { Type2Type<TEX::UnderlyingSettlPrice>(), "UnderlyingSettlPrice", 732 } },
   { 733, { Type2Type<TEX::UnderlyingSettlPriceType>(), "UnderlyingSettlPriceType", 733 } },
   { 734, { Type2Type<TEX::PriorSettlPrice>(), "PriorSettlPrice", 734 } },
   { 735, { Type2Type<TEX::NoQuoteQualifiers>(), "NoQuoteQualifiers", 735 } },
   { 736, { Type2Type<TEX::AllocSettlCurrency>(), "AllocSettlCurrency", 736 } },
   { 737, { Type2Type<TEX::AllocSettlCurrAmt>(), "AllocSettlCurrAmt", 737 } },
   { 738, { Type2Type<TEX::InterestAtMaturity>(), "InterestAtMaturity", 738 } },
   { 739, { Type2Type<TEX::LegDatedDate>(), "LegDatedDate", 739 } },
   { 740, { Type2Type<TEX::LegPool>(), "LegPool", 740 } },
   { 741, { Type2Type<TEX::AllocInterestAtMaturity>(), "AllocInterestAtMaturity", 741 } },
   { 742, { Type2Type<TEX::AllocAccruedInterestAmt>(), "AllocAccruedInterestAmt", 742 } },
   { 743, { Type2Type<TEX::DeliveryDate>(), "DeliveryDate", 743 } },
   { 744, { Type2Type<TEX::AssignmentMethod, char>(), "AssignmentMethod", 744, &TEX::realmbases[180] } },
   { 745, { Type2Type<TEX::AssignmentUnit>(), "AssignmentUnit", 745 } },
   { 746, { Type2Type<TEX::OpenInterest>(), "OpenInterest", 746 } },
   { 747, { Type2Type<TEX::ExerciseMethod, char>(), "ExerciseMethod", 747, &TEX::realmbases[181] } },
   { 748, { Type2Type<TEX::TotNumTradeReports>(), "TotNumTradeReports", 748 } },
   { 749, { Type2Type<TEX::TradeRequestResult, int>(), "TradeRequestResult", 749, &TEX::realmbases[182] } },
   { 750, { Type2Type<TEX::TradeRequestStatus, int>(), "TradeRequestStatus", 750, &TEX::realmbases[183] } },
   { 751, { Type2Type<TEX::TradeReportRejectReason, int>(), "TradeReportRejectReason", 751, &TEX::realmbases[184] } },
   { 752, { Type2Type<TEX::SideMultiLegReportingType, int>(), "SideMultiLegReportingType", 752, &TEX::realmbases[185] } },
   { 753, { Type2Type<TEX::NoPosAmt>(), "NoPosAmt", 753 } },
   { 754, { Type2Type<TEX::AutoAcceptIndicator>(), "AutoAcceptIndicator", 754 } },
   { 755, { Type2Type<TEX::AllocReportID>(), "AllocReportID", 755 } },
   { 756, { Type2Type<TEX::NoNested2PartyIDs>(), "NoNested2PartyIDs", 756 } },
   { 757, { Type2Type<TEX::Nested2PartyID>(), "Nested2PartyID", 757 } },
   { 758, { Type2Type<TEX::Nested2PartyIDSource>(), "Nested2PartyIDSource", 758 } },
   { 759, { Type2Type<TEX::Nested2PartyRole>(), "Nested2PartyRole", 759 } },
   { 760, { Type2Type<TEX::Nested2PartySubID>(), "Nested2PartySubID", 760 } },
   { 761, { Type2Type<TEX::BenchmarkSecurityIDSource>(), "BenchmarkSecurityIDSource", 761 } },
   { 762, { Type2Type<TEX::SecuritySubType>(), "SecuritySubType", 762 } },
   { 763, { Type2Type<TEX::UnderlyingSecuritySubType>(), "UnderlyingSecuritySubType", 763 } },
   { 764, { Type2Type<TEX::LegSecuritySubType>(), "LegSecuritySubType", 764 } },
   { 765, { Type2Type<TEX::AllowableOneSidednessPct>(), "AllowableOneSidednessPct", 765 } },
   { 766, { Type2Type<TEX::AllowableOneSidednessValue>(), "AllowableOneSidednessValue", 766 } },
   { 767, { Type2Type<TEX::AllowableOneSidednessCurr>(), "AllowableOneSidednessCurr", 767 } },
   { 768, { Type2Type<TEX::NoTrdRegTimestamps>(), "NoTrdRegTimestamps", 768 } },
   { 769, { Type2Type<TEX::TrdRegTimestamp>(), "TrdRegTimestamp", 769 } },
   { 770, { Type2Type<TEX::TrdRegTimestampType, int>(), "TrdRegTimestampType", 770, &TEX::realmbases[186] } },
   { 771, { Type2Type<TEX::TrdRegTimestampOrigin>(), "TrdRegTimestampOrigin", 771 } },
   { 772, { Type2Type<TEX::ConfirmRefID>(), "ConfirmRefID", 772 } },
   { 773, { Type2Type<TEX::ConfirmType, int>(), "ConfirmType", 773, &TEX::realmbases[187] } },
   { 774, { Type2Type<TEX::ConfirmRejReason, int>(), "ConfirmRejReason", 774, &TEX::realmbases[188] } },
   { 775, { Type2Type<TEX::BookingType, int>(), "BookingType", 775, &TEX::realmbases[189] } },
   { 776, { Type2Type<TEX::IndividualAllocRejCode>(), "IndividualAllocRejCode", 776 } },
   { 777, { Type2Type<TEX::SettlInstMsgID>(), "SettlInstMsgID", 777 } },
   { 778, { Type2Type<TEX::NoSettlInst>(), "NoSettlInst", 778 } },
   { 779, { Type2Type<TEX::LastUpdateTime>(), "LastUpdateTime", 779 } },
   { 780, { Type2Type<TEX::AllocSettlInstType, int>(), "AllocSettlInstType", 780, &TEX::realmbases[190] } },
   { 781, { Type2Type<TEX::NoSettlPartyIDs>(), "NoSettlPartyIDs", 781 } },
   { 782, { Type2Type<TEX::SettlPartyID>(), "SettlPartyID", 782 } },
   { 783, { Type2Type<TEX::SettlPartyIDSource>(), "SettlPartyIDSource", 783 } },
   { 784, { Type2Type<TEX::SettlPartyRole>(), "SettlPartyRole", 784 } },
   { 785, { Type2Type<TEX::SettlPartySubID>(), "SettlPartySubID", 785 } },
   { 786, { Type2Type<TEX::SettlPartySubIDType>(), "SettlPartySubIDType", 786 } },
   { 787, { Type2Type<TEX::DlvyInstType, char>(), "DlvyInstType", 787, &TEX::realmbases[191] } },
   { 788, { Type2Type<TEX::TerminationType, int>(), "TerminationType", 788, &TEX::realmbases[192] } },
   { 789, { Type2Type<TEX::NextExpectedMsgSeqNum>(), "NextExpectedMsgSeqNum", 789 } },
   { 790, { Type2Type<TEX::OrdStatusReqID>(), "OrdStatusReqID", 790 } },
   { 791, { Type2Type<TEX::SettlInstReqID>(), "SettlInstReqID", 791 } },
   { 792, { Type2Type<TEX::SettlInstReqRejCode, int>(), "SettlInstReqRejCode", 792, &TEX::realmbases[193] } },
   { 793, { Type2Type<TEX::SecondaryAllocID>(), "SecondaryAllocID", 793 } },
   { 794, { Type2Type<TEX::AllocReportType, int>(), "AllocReportType", 794, &TEX::realmbases[194] } },
   { 795, { Type2Type<TEX::AllocReportRefID>(), "AllocReportRefID", 795 } },
   { 796, { Type2Type<TEX::AllocCancReplaceReason, int>(), "AllocCancReplaceReason", 796, &TEX::realmbases[195] } },
   { 797, { Type2Type<TEX::CopyMsgIndicator>(), "CopyMsgIndicator", 797 } },
   { 798, { Type2Type<TEX::AllocAccountType, int>(), "AllocAccountType", 798, &TEX::realmbases[196] } },
   { 799, { Type2Type<TEX::OrderAvgPx>(), "OrderAvgPx", 799 } },
   { 800, { Type2Type<TEX::OrderBookingQty>(), "OrderBookingQty", 800 } },
   { 801, { Type2Type<TEX::NoSettlPartySubIDs>(), "NoSettlPartySubIDs", 801 } },
   { 802, { Type2Type<TEX::NoPartySubIDs>(), "NoPartySubIDs", 802 } },
   { 803, { Type2Type<TEX::PartySubIDType, int>(), "PartySubIDType", 803, &TEX::realmbases[197] } },
   { 804, { Type2Type<TEX::NoNestedPartySubIDs>(), "NoNestedPartySubIDs", 804 } },
   { 805, { Type2Type<TEX::NestedPartySubIDType>(), "NestedPartySubIDType", 805 } },
   { 806, { Type2Type<TEX::NoNested2PartySubIDs>(), "NoNested2PartySubIDs", 806 } },
   { 807, { Type2Type<TEX::Nested2PartySubIDType>(), "Nested2PartySubIDType", 807 } },
   { 808, { Type2Type<TEX::AllocIntermedReqType, int>(), "AllocIntermedReqType", 808, &TEX::realmbases[198] } },
   { 810, { Type2Type<TEX::UnderlyingPx>(), "UnderlyingPx", 810 } },
   { 811, { Type2Type<TEX::PriceDelta>(), "PriceDelta", 811 } },
   { 812, { Type2Type<TEX::ApplQueueMax>(), "ApplQueueMax", 812 } },
   { 813, { Type2Type<TEX::ApplQueueDepth>(), "ApplQueueDepth", 813 } },
   { 814, { Type2Type<TEX::ApplQueueResolution, int>(), "ApplQueueResolution", 814, &TEX::realmbases[199] } },
   { 815, { Type2Type<TEX::ApplQueueAction, int>(), "ApplQueueAction", 815, &TEX::realmbases[200] } },
   { 816, { Type2Type<TEX::NoAltMDSource>(), "NoAltMDSource", 816 } },
   { 817, { Type2Type<TEX::AltMDSourceID>(), "AltMDSourceID", 817 } },
   { 818, { Type2Type<TEX::SecondaryTradeReportID>(), "SecondaryTradeReportID", 818 } },
   { 819, { Type2Type<TEX::AvgPxIndicator, int>(), "AvgPxIndicator", 819, &TEX::realmbases[201] } },
   { 820, { Type2Type<TEX::TradeLinkID>(), "TradeLinkID", 820 } },
   { 821, { Type2Type<TEX::OrderInputDevice>(), "OrderInputDevice", 821 } },
   { 822, { Type2Type<TEX::UnderlyingTradingSessionID>(), "UnderlyingTradingSessionID", 822 } },
   { 823, { Type2Type<TEX::UnderlyingTradingSessionSubID>(), "UnderlyingTradingSessionSubID", 823 } },
   { 824, { Type2Type<TEX::TradeLegRefID>(), "TradeLegRefID", 824 } },
   { 825, { Type2Type<TEX::ExchangeRule>(), "ExchangeRule", 825 } },
   { 826, { Type2Type<TEX::TradeAllocIndicator, int>(), "TradeAllocIndicator", 826, &TEX::realmbases[202] } },
   { 827, { Type2Type<TEX::ExpirationCycle, int>(), "ExpirationCycle", 827, &TEX::realmbases[203] } },
   { 828, { Type2Type<TEX::TrdType, int>(), "TrdType", 828, &TEX::realmbases[204] } },
   { 829, { Type2Type<TEX::TrdSubType>(), "TrdSubType", 829 } },
   { 830, { Type2Type<TEX::TransferReason>(), "TransferReason", 830 } },
   { 832, { Type2Type<TEX::TotNumAssignmentReports>(), "TotNumAssignmentReports", 832 } },
   { 833, { Type2Type<TEX::AsgnRptID>(), "AsgnRptID", 833 } },
   { 834, { Type2Type<TEX::ThresholdAmount>(), "ThresholdAmount", 834 } },
   { 835, { Type2Type<TEX::PegMoveType, int>(), "PegMoveType", 835, &TEX::realmbases[205] } },
   { 836, { Type2Type<TEX::PegOffsetType, int>(), "PegOffsetType", 836, &TEX::realmbases[206] } },
   { 837, { Type2Type<TEX::PegLimitType, int>(), "PegLimitType", 837, &TEX::realmbases[207] } },
   { 838, { Type2Type<TEX::PegRoundDirection, int>(), "PegRoundDirection", 838, &TEX::realmbases[208] } },
   { 839, { Type2Type<TEX::PeggedPrice>(), "PeggedPrice", 839 } },
   { 840, { Type2Type<TEX::PegScope, int>(), "PegScope", 840, &TEX::realmbases[209] } },
   { 841, { Type2Type<TEX::DiscretionMoveType, int>(), "DiscretionMoveType", 841, &TEX::realmbases[210] } },
   { 842, { Type2Type<TEX::DiscretionOffsetType, int>(), "DiscretionOffsetType", 842, &TEX::realmbases[211] } },
   { 843, { Type2Type<TEX::DiscretionLimitType, int>(), "DiscretionLimitType", 843, &TEX::realmbases[212] } },
   { 844, { Type2Type<TEX::DiscretionRoundDirection, int>(), "DiscretionRoundDirection", 844, &TEX::realmbases[213] } },
   { 845, { Type2Type<TEX::DiscretionPrice>(), "DiscretionPrice", 845 } },
   { 846, { Type2Type<TEX::DiscretionScope, int>(), "DiscretionScope", 846, &TEX::realmbases[214] } },
   { 847, { Type2Type<TEX::TargetStrategy, int>(), "TargetStrategy", 847, &TEX::realmbases[215] } },
   { 848, { Type2Type<TEX::TargetStrategyParameters>(), "TargetStrategyParameters", 848 } },
   { 849, { Type2Type<TEX::ParticipationRate>(), "ParticipationRate", 849 } },
   { 850, { Type2Type<TEX::TargetStrategyPerformance>(), "TargetStrategyPerformance", 850 } },
   { 851, { Type2Type<TEX::LastLiquidityInd, int>(), "LastLiquidityInd", 851, &TEX::realmbases[216] } },
   { 852, { Type2Type<TEX::PublishTrdIndicator, char>(), "PublishTrdIndicator", 852, &TEX::realmbases[217] } },
   { 853, { Type2Type<TEX::ShortSaleReason, int>(), "ShortSaleReason", 853, &TEX::realmbases[218] } },
   { 854, { Type2Type<TEX::QtyType, int>(), "QtyType", 854, &TEX::realmbases[219] } },
   { 855, { Type2Type<TEX::SecondaryTrdType>(), "SecondaryTrdType", 855 } },
   { 856, { Type2Type<TEX::TradeReportType, int>(), "TradeReportType", 856, &TEX::realmbases[220] } },
   { 857, { Type2Type<TEX::AllocNoOrdersType, int>(), "AllocNoOrdersType", 857, &TEX::realmbases[221] } },
   { 858, { Type2Type<TEX::SharedCommission>(), "SharedCommission", 858 } },
   { 859, { Type2Type<TEX::ConfirmReqID>(), "ConfirmReqID", 859 } },
   { 860, { Type2Type<TEX::AvgParPx>(), "AvgParPx", 860 } },
   { 861, { Type2Type<TEX::ReportedPx>(), "ReportedPx", 861 } },
   { 862, { Type2Type<TEX::NoCapacities>(), "NoCapacities", 862 } },
   { 863, { Type2Type<TEX::OrderCapacityQty>(), "OrderCapacityQty", 863 } },
   { 864, { Type2Type<TEX::NoEvents>(), "NoEvents", 864 } },
   { 865, { Type2Type<TEX::EventType, int>(), "EventType", 865, &TEX::realmbases[222] } },
   { 866, { Type2Type<TEX::EventDate>(), "EventDate", 866 } },
   { 867, { Type2Type<TEX::EventPx>(), "EventPx", 867 } },
   { 868, { Type2Type<TEX::EventText>(), "EventText", 868 } },
   { 869, { Type2Type<TEX::PctAtRisk>(), "PctAtRisk", 869 } },
   { 870, { Type2Type<TEX::NoInstrAttrib>(), "NoInstrAttrib", 870 } },
   { 871, { Type2Type<TEX::InstrAttribType, int>(), "InstrAttribType", 871, &TEX::realmbases[223] } },
   { 872, { Type2Type<TEX::InstrAttribValue>(), "InstrAttribValue", 872 } },
   { 873, { Type2Type<TEX::DatedDate>(), "DatedDate", 873 } },
   { 874, { Type2Type<TEX::InterestAccrualDate>(), "InterestAccrualDate", 874 } },
   { 875, { Type2Type<TEX::CPProgram, int>(), "CPProgram", 875, &TEX::realmbases[224] } },
   { 876, { Type2Type<TEX::CPRegType>(), "CPRegType", 876 } },
   { 877, { Type2Type<TEX::UnderlyingCPProgram>(), "UnderlyingCPProgram", 877 } },
   { 878, { Type2Type<TEX::UnderlyingCPRegType>(), "UnderlyingCPRegType", 878 } },
   { 879, { Type2Type<TEX::UnderlyingQty>(), "UnderlyingQty", 879 } },
   { 880, { Type2Type<TEX::TrdMatchID>(), "TrdMatchID", 880 } },
   { 881, { Type2Type<TEX::SecondaryTradeReportRefID>(), "SecondaryTradeReportRefID", 881 } },
   { 882, { Type2Type<TEX::UnderlyingDirtyPrice>(), "UnderlyingDirtyPrice", 882 } },
   { 883, { Type2Type<TEX::UnderlyingEndPrice>(), "UnderlyingEndPrice", 883 } },
   { 884, { Type2Type<TEX::UnderlyingStartValue>(), "UnderlyingStartValue", 884 } },
   { 885, { Type2Type<TEX::UnderlyingCurrentValue>(), "UnderlyingCurrentValue", 885 } },
   { 886, { Type2Type<TEX::UnderlyingEndValue>(), "UnderlyingEndValue", 886 } },
   { 887, { Type2Type<TEX::NoUnderlyingStips>(), "NoUnderlyingStips", 887 } },
   { 888, { Type2Type<TEX::UnderlyingStipType>(), "UnderlyingStipType", 888 } },
   { 889, { Type2Type<TEX::UnderlyingStipValue>(), "UnderlyingStipValue", 889 } },
   { 890, { Type2Type<TEX::MaturityNetMoney>(), "MaturityNetMoney", 890 } },
   { 891, { Type2Type<TEX::MiscFeeBasis, int>(), "MiscFeeBasis", 891, &TEX::realmbases[225] } },
   { 892, { Type2Type<TEX::TotNoAllocs>(), "TotNoAllocs", 892 } },
   { 893, { Type2Type<TEX::LastFragment, char>(), "LastFragment", 893, &TEX::realmbases[226] } },
   { 894, { Type2Type<TEX::CollReqID>(), "CollReqID", 894 } },
   { 895, { Type2Type<TEX::CollAsgnReason, int>(), "CollAsgnReason", 895, &TEX::realmbases[227] } },
   { 896, { Type2Type<TEX::CollInquiryQualifier, int>(), "CollInquiryQualifier", 896, &TEX::realmbases[228] } },
   { 897, { Type2Type<TEX::NoTrades>(), "NoTrades", 897 } },
   { 898, { Type2Type<TEX::MarginRatio>(), "MarginRatio", 898 } },
   { 899, { Type2Type<TEX::MarginExcess>(), "MarginExcess", 899 } },
   { 900, { Type2Type<TEX::TotalNetValue>(), "TotalNetValue", 900 } },
   { 901, { Type2Type<TEX::CashOutstanding>(), "CashOutstanding", 901 } },
   { 902, { Type2Type<TEX::CollAsgnID>(), "CollAsgnID", 902 } },
   { 903, { Type2Type<TEX::CollAsgnTransType, int>(), "CollAsgnTransType", 903, &TEX::realmbases[229] } },
   { 904, { Type2Type<TEX::CollRespID>(), "CollRespID", 904 } },
   { 905, { Type2Type<TEX::CollAsgnRespType, int>(), "CollAsgnRespType", 905, &TEX::realmbases[230] } },
   { 906, { Type2Type<TEX::CollAsgnRejectReason, int>(), "CollAsgnRejectReason", 906, &TEX::realmbases[231] } },
   { 907, { Type2Type<TEX::CollAsgnRefID>(), "CollAsgnRefID", 907 } },
   { 908, { Type2Type<TEX::CollRptID>(), "CollRptID", 908 } },
   { 909, { Type2Type<TEX::CollInquiryID>(), "CollInquiryID", 909 } },
   { 910, { Type2Type<TEX::CollStatus, int>(), "CollStatus", 910, &TEX::realmbases[232] } },
   { 911, { Type2Type<TEX::TotNumReports>(), "TotNumReports", 911 } },
   { 912, { Type2Type<TEX::LastRptRequested, char>(), "LastRptRequested", 912, &TEX::realmbases[233] } },
   { 913, { Type2Type<TEX::AgreementDesc>(), "AgreementDesc", 913 } },
   { 914, { Type2Type<TEX::AgreementID>(), "AgreementID", 914 } },
   { 915, { Type2Type<TEX::AgreementDate>(), "AgreementDate", 915 } },
   { 916, { Type2Type<TEX::StartDate>(), "StartDate", 916 } },
   { 917, { Type2Type<TEX::EndDate>(), "EndDate", 917 } },
   { 918, { Type2Type<TEX::AgreementCurrency>(), "AgreementCurrency", 918 } },
   { 919, { Type2Type<TEX::DeliveryType, int>(), "DeliveryType", 919, &TEX::realmbases[234] } },
   { 920, { Type2Type<TEX::EndAccruedInterestAmt>(), "EndAccruedInterestAmt", 920 } },
   { 921, { Type2Type<TEX::StartCash>(), "StartCash", 921 } },
   { 922, { Type2Type<TEX::EndCash>(), "EndCash", 922 } },
   { 923, { Type2Type<TEX::UserRequestID>(), "UserRequestID", 923 } },
   { 924, { Type2Type<TEX::UserRequestType, int>(), "UserRequestType", 924, &TEX::realmbases[235] } },
   { 925, { Type2Type<TEX::NewPassword>(), "NewPassword", 925 } },
   { 926, { Type2Type<TEX::UserStatus, int>(), "UserStatus", 926, &TEX::realmbases[236] } },
   { 927, { Type2Type<TEX::UserStatusText>(), "UserStatusText", 927 } },
   { 928, { Type2Type<TEX::StatusValue, int>(), "StatusValue", 928, &TEX::realmbases[237] } },
   { 929, { Type2Type<TEX::StatusText>(), "StatusText", 929 } },
   { 930, { Type2Type<TEX::RefCompID>(), "RefCompID", 930 } },
   { 931, { Type2Type<TEX::RefSubID>(), "RefSubID", 931 } },
   { 932, { Type2Type<TEX::NetworkResponseID>(), "NetworkResponseID", 932 } },
   { 933, { Type2Type<TEX::NetworkRequestID>(), "NetworkRequestID", 933 } },
   { 934, { Type2Type<TEX::LastNetworkResponseID>(), "LastNetworkResponseID", 934 } },
   { 935, { Type2Type<TEX::NetworkRequestType, int>(), "NetworkRequestType", 935, &TEX::realmbases[238] } },
   { 936, { Type2Type<TEX::NoCompIDs>(), "NoCompIDs", 936 } },
   { 937, { Type2Type<TEX::NetworkStatusResponseType, int>(), "NetworkStatusResponseType", 937, &TEX::realmbases[239] } },
   { 938, { Type2Type<TEX::NoCollInquiryQualifier>(), "NoCollInquiryQualifier", 938 } },
   { 939, { Type2Type<TEX::TrdRptStatus, int>(), "TrdRptStatus", 939, &TEX::realmbases[240] } },
   { 940, { Type2Type<TEX::AffirmStatus, int>(), "AffirmStatus", 940, &TEX::realmbases[241] } },
   { 941, { Type2Type<TEX::UnderlyingStrikeCurrency>(), "UnderlyingStrikeCurrency", 941 } },
   { 942, { Type2Type<TEX::LegStrikeCurrency>(), "LegStrikeCurrency", 942 } },
   { 943, { Type2Type<TEX::TimeBracket>(), "TimeBracket", 943 } },
   { 944, { Type2Type<TEX::CollAction, int>(), "CollAction", 944, &TEX::realmbases[242] } },
   { 945, { Type2Type<TEX::CollInquiryStatus, int>(), "CollInquiryStatus", 945, &TEX::realmbases[243] } },
   { 946, { Type2Type<TEX::CollInquiryResult, int>(), "CollInquiryResult", 946, &TEX::realmbases[244] } },
   { 947, { Type2Type<TEX::StrikeCurrency>(), "StrikeCurrency", 947 } },
   { 948, { Type2Type<TEX::NoNested3PartyIDs>(), "NoNested3PartyIDs", 948 } },
   { 949, { Type2Type<TEX::Nested3PartyID>(), "Nested3PartyID", 949 } },
   { 950, { Type2Type<TEX::Nested3PartyIDSource>(), "Nested3PartyIDSource", 950 } },
   { 951, { Type2Type<TEX::Nested3PartyRole>(), "Nested3PartyRole", 951 } },
   { 952, { Type2Type<TEX::NoNested3PartySubIDs>(), "NoNested3PartySubIDs", 952 } },
   { 953, { Type2Type<TEX::Nested3PartySubID>(), "Nested3PartySubID", 953 } },
   { 954, { Type2Type<TEX::Nested3PartySubIDType>(), "Nested3PartySubIDType", 954 } },
   { 955, { Type2Type<TEX::LegContractSettlMonth>(), "LegContractSettlMonth", 955 } },
   { 956, { Type2Type<TEX::LegInterestAccrualDate>(), "LegInterestAccrualDate", 956 } }
}; // 910
} // namespace TEX

} // namespace FIX8
