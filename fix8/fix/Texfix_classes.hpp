//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2019-09-19 20:22:18 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-19 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16793600L
#error Texfix_classes.hpp version 1.4.0 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// Texfix_classes.hpp
//-------------------------------------------------------------------------------------------------
#ifndef FIX8_5465786669785F636C61737365732E687070_
#define FIX8_5465786669785F636C61737365732E687070_

#if defined(_MSC_VER) && defined(F8_TEX_API_SHARED)
    #if defined(BUILD_F8_TEX_API)
        #define F8_TEX_API __declspec(dllexport)
    #else
        #define F8_TEX_API __declspec(dllimport)
    #endif
#else
    #define F8_TEX_API
#endif
namespace FIX8 {

extern "C"
{
   F8_TEX_API const F8MetaCntx& TEX_ctx();
}

namespace TEX {

//-------------------------------------------------------------------------------------------------
using Texfix_BaseMsgEntry = MsgTable;
/// Compiler generated metadata object, accessed through this function.
F8_TEX_API const F8MetaCntx& ctx();
class Texfix_Router;

//-------------------------------------------------------------------------------------------------
/// Heartbeat (0), admin, 1 field, 0 groups.
class Heartbeat : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 1;

public:
   explicit Heartbeat(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~Heartbeat() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// TestRequest (1), admin, 1 field, 0 groups.
class TestRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 1;

public:
   explicit TestRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~TestRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ResendRequest (2), admin, 2 fields, 0 groups.
class ResendRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 2;

public:
   explicit ResendRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~ResendRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Reject (3), admin, 7 fields, 0 groups.
class Reject : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 7;

public:
   explicit Reject(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~Reject() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// SequenceReset (4), admin, 2 fields, 0 groups.
class SequenceReset : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 2;

public:
   explicit SequenceReset(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~SequenceReset() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Logout (5), admin, 3 fields, 0 groups.
class Logout : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 3;

public:
   explicit Logout(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~Logout() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// IOI (6), application, 92 fields, 7 groups.
class IOI : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 92;

public:
   explicit IOI(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 199, new NoIOIQualifiers },
            { 215, new NoRoutingIDs },
            { 232, new NoStipulations },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~IOI() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 199: return new NoIOIQualifiers;
      case 215: return new NoRoutingIDs;
      case 232: return new NoStipulations;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoIOIQualifiers (199), application, 1 field, 0 groups, is unique, hash: 0x80001869
   // IOI::NoIOIQualifiers
   class NoIOIQualifiers : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 199 };

      NoIOIQualifiers() : GroupBase(_fnum) {}
      ~NoIOIQualifiers() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // IOI::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // IOI::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // IOI::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 44 fields, 2 groups, is unique, hash: 0x426a7b98
   // IOI::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 44;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 604: return new NoLegSecurityAltID;
         case 683: return new NoLegStipulations;
         default: return nullptr;
         }
      }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // IOI::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // IOI::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // IOI::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // IOI::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // IOI::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // IOI::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// Advertisement (7), application, 61 fields, 4 groups.
class Advertisement : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 61;

public:
   explicit Advertisement(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~Advertisement() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // Advertisement::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // Advertisement::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // Advertisement::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // Advertisement::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // Advertisement::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // Advertisement::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // Advertisement::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// ExecutionReport (8), application, 217 fields, 9 groups.
class ExecutionReport : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 217;

public:
   explicit ExecutionReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 136, new NoMiscFees },
            { 232, new NoStipulations },
            { 382, new NoContraBrokers },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 518, new NoContAmts },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~ExecutionReport() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 136: return new NoMiscFees;
      case 232: return new NoStipulations;
      case 382: return new NoContraBrokers;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 518: return new NoContAmts;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // ExecutionReport::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // ExecutionReport::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoContraBrokers (382), application, 5 fields, 0 groups, is unique, hash: 0x8c0b9037
   // ExecutionReport::NoContraBrokers
   class NoContraBrokers : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 5;

   public:
      enum { _fnum = 382 };

      NoContraBrokers() : GroupBase(_fnum) {}
      ~NoContraBrokers() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // ExecutionReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // ExecutionReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // ExecutionReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoContAmts (518), application, 3 fields, 0 groups, shares static data, hash: 0xb32a7415
   // ExecutionReport::NoContAmts
   class NoContAmts : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 518 };

      NoContAmts() : GroupBase(_fnum) {}
      ~NoContAmts() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 53 fields, 3 groups, shares static data, hash: 0xffa047f8
   // ExecutionReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 53;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 539: return new NoNestedPartyIDs;
         case 604: return new NoLegSecurityAltID;
         case 683: return new NoLegStipulations;
         default: return nullptr;
         }
      }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // ExecutionReport::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // ExecutionReport::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // ExecutionReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // ExecutionReport::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // ExecutionReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // ExecutionReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // ExecutionReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // ExecutionReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderCancelReject (9), application, 21 fields, 0 groups.
class OrderCancelReject : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 21;

public:
   explicit OrderCancelReject(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~OrderCancelReject() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Logon (A), admin, 11 fields, 1 group.
class Logon : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 11;

public:
   explicit Logon(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({384, new NoMsgTypes });
   }
   ~Logon() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 384 ? new NoMsgTypes : nullptr; }

   /// NoMsgTypes (384), application, 2 fields, 0 groups, is unique, hash: 0x232d8808
   // Logon::NoMsgTypes
   class NoMsgTypes : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 384 };

      NoMsgTypes() : GroupBase(_fnum) {}
      ~NoMsgTypes() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// DerivativeSecurityList (AA), application, 52 fields, 3 groups.
class DerivativeSecurityList : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 52;

public:
   explicit DerivativeSecurityList(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 146, new NoRelatedSym },
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
         });
   }
   ~DerivativeSecurityList() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 146: return new NoRelatedSym;
      case 457: return new NoUnderlyingSecurityAltID;
      case 887: return new NoUnderlyingStips;
      default: return nullptr;
      }
   }

   /// NoRelatedSym (146), application, 53 fields, 4 groups, is unique, hash: 0xa2e2b26
   // DerivativeSecurityList::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 53;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 864, new NoEvents },
               { 870, new NoInstrAttrib },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 454: return new NoSecurityAltID;
         case 555: return new NoLegs;
         case 864: return new NoEvents;
         case 870: return new NoInstrAttrib;
         default: return nullptr;
         }
      }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // DerivativeSecurityList::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
      // DerivativeSecurityList::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 42;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // DerivativeSecurityList::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // DerivativeSecurityList::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
      // DerivativeSecurityList::NoRelatedSym::NoInstrAttrib
      class NoInstrAttrib : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 870 };

         NoInstrAttrib() : GroupBase(_fnum) {}
         ~NoInstrAttrib() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // DerivativeSecurityList::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // DerivativeSecurityList::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderMultileg (AB), application, 130 fields, 7 groups.
class NewOrderMultileg : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 130;

public:
   explicit NewOrderMultileg(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 78, new NoAllocs },
            { 386, new NoTradingSessions },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~NewOrderMultileg() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 78: return new NoAllocs;
      case 386: return new NoTradingSessions;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0xe2c9c56d
   // NewOrderMultileg::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 6;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({948, new NoNested3PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 948 ? new NoNested3PartyIDs : nullptr; }

      /// NoNested3PartyIDs (948), application, 4 fields, 1 group, shares static data, hash: 0x1dc2d820
      // NewOrderMultileg::NoAllocs::NoNested3PartyIDs
      class NoNested3PartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 948 };

         NoNested3PartyIDs() : GroupBase(_fnum) {}
         ~NoNested3PartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({952, new NoNested3PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 952 ? new NoNested3PartySubIDs : nullptr; }

         /// NoNested3PartySubIDs (952), application, 2 fields, 0 groups, shares static data, hash: 0x237471ed
         // NewOrderMultileg::NoAllocs::NoNested3PartyIDs::NoNested3PartySubIDs
         class NoNested3PartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 952 };

            NoNested3PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested3PartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // NewOrderMultileg::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // NewOrderMultileg::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // NewOrderMultileg::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // NewOrderMultileg::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 53 fields, 4 groups, shares static data, hash: 0xc2271389
   // NewOrderMultileg::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 53;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 670, new NoLegAllocs },
               { 683, new NoLegStipulations },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 539: return new NoNestedPartyIDs;
         case 604: return new NoLegSecurityAltID;
         case 670: return new NoLegAllocs;
         case 683: return new NoLegStipulations;
         default: return nullptr;
         }
      }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // NewOrderMultileg::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // NewOrderMultileg::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // NewOrderMultileg::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegAllocs (670), application, 6 fields, 1 group, shares static data, hash: 0xad48105b
      // NewOrderMultileg::NoLegs::NoLegAllocs
      class NoLegAllocs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 6;

      public:
         enum { _fnum = 670 };

         NoLegAllocs() : GroupBase(_fnum) {}
         ~NoLegAllocs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({756, new NoNested2PartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 756 ? new NoNested2PartyIDs : nullptr; }

         /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
         // NewOrderMultileg::NoLegs::NoLegAllocs::NoNested2PartyIDs
         class NoNested2PartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 756 };

            NoNested2PartyIDs() : GroupBase(_fnum) {}
            ~NoNested2PartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({806, new NoNested2PartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 806 ? new NoNested2PartySubIDs : nullptr; }

            /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
            // NewOrderMultileg::NoLegs::NoLegAllocs::NoNested2PartyIDs::NoNested2PartySubIDs
            class NoNested2PartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 806 };

               NoNested2PartySubIDs() : GroupBase(_fnum) {}
               ~NoNested2PartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // NewOrderMultileg::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // NewOrderMultileg::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // NewOrderMultileg::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // NewOrderMultileg::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // NewOrderMultileg::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MultilegOrderCancelReplace (AC), application, 133 fields, 7 groups.
class MultilegOrderCancelReplace : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 133;

public:
   explicit MultilegOrderCancelReplace(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 78, new NoAllocs },
            { 386, new NoTradingSessions },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~MultilegOrderCancelReplace() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 78: return new NoAllocs;
      case 386: return new NoTradingSessions;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0xe2c9c56d
   // MultilegOrderCancelReplace::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 6;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({948, new NoNested3PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 948 ? new NoNested3PartyIDs : nullptr; }

      /// NoNested3PartyIDs (948), application, 4 fields, 1 group, shares static data, hash: 0x1dc2d820
      // MultilegOrderCancelReplace::NoAllocs::NoNested3PartyIDs
      class NoNested3PartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 948 };

         NoNested3PartyIDs() : GroupBase(_fnum) {}
         ~NoNested3PartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({952, new NoNested3PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 952 ? new NoNested3PartySubIDs : nullptr; }

         /// NoNested3PartySubIDs (952), application, 2 fields, 0 groups, shares static data, hash: 0x237471ed
         // MultilegOrderCancelReplace::NoAllocs::NoNested3PartyIDs::NoNested3PartySubIDs
         class NoNested3PartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 952 };

            NoNested3PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested3PartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // MultilegOrderCancelReplace::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // MultilegOrderCancelReplace::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // MultilegOrderCancelReplace::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // MultilegOrderCancelReplace::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 53 fields, 4 groups, shares static data, hash: 0xc2271389
   // MultilegOrderCancelReplace::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 53;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 670, new NoLegAllocs },
               { 683, new NoLegStipulations },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 539: return new NoNestedPartyIDs;
         case 604: return new NoLegSecurityAltID;
         case 670: return new NoLegAllocs;
         case 683: return new NoLegStipulations;
         default: return nullptr;
         }
      }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // MultilegOrderCancelReplace::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // MultilegOrderCancelReplace::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // MultilegOrderCancelReplace::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegAllocs (670), application, 6 fields, 1 group, shares static data, hash: 0xad48105b
      // MultilegOrderCancelReplace::NoLegs::NoLegAllocs
      class NoLegAllocs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 6;

      public:
         enum { _fnum = 670 };

         NoLegAllocs() : GroupBase(_fnum) {}
         ~NoLegAllocs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({756, new NoNested2PartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 756 ? new NoNested2PartyIDs : nullptr; }

         /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
         // MultilegOrderCancelReplace::NoLegs::NoLegAllocs::NoNested2PartyIDs
         class NoNested2PartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 756 };

            NoNested2PartyIDs() : GroupBase(_fnum) {}
            ~NoNested2PartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({806, new NoNested2PartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 806 ? new NoNested2PartySubIDs : nullptr; }

            /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
            // MultilegOrderCancelReplace::NoLegs::NoLegAllocs::NoNested2PartyIDs::NoNested2PartySubIDs
            class NoNested2PartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 806 };

               NoNested2PartySubIDs() : GroupBase(_fnum) {}
               ~NoNested2PartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // MultilegOrderCancelReplace::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // MultilegOrderCancelReplace::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // MultilegOrderCancelReplace::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // MultilegOrderCancelReplace::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // MultilegOrderCancelReplace::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// TradeCaptureReportRequest (AD), application, 87 fields, 7 groups.
class TradeCaptureReportRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 87;

public:
   explicit TradeCaptureReportRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 580, new NoDates },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
         });
   }
   ~TradeCaptureReportRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 580: return new NoDates;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      case 870: return new NoInstrAttrib;
      default: return nullptr;
      }
   }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // TradeCaptureReportRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // TradeCaptureReportRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // TradeCaptureReportRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // TradeCaptureReportRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // TradeCaptureReportRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoDates (580), application, 2 fields, 0 groups, is unique, hash: 0x2304a1d8
   // TradeCaptureReportRequest::NoDates
   class NoDates : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 580 };

      NoDates() : GroupBase(_fnum) {}
      ~NoDates() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // TradeCaptureReportRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // TradeCaptureReportRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // TradeCaptureReportRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // TradeCaptureReportRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // TradeCaptureReportRequest::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// TradeCaptureReport (AE), application, 119 fields, 7 groups.
class TradeCaptureReport : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 119;

public:
   explicit TradeCaptureReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 552, new NoSides },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 753, new NoPosAmt },
            { 768, new NoTrdRegTimestamps },
            { 864, new NoEvents },
         });
   }
   ~TradeCaptureReport() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 552: return new NoSides;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 753: return new NoPosAmt;
      case 768: return new NoTrdRegTimestamps;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // TradeCaptureReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSides (552), application, 65 fields, 6 groups, is unique, hash: 0x53faf7d3
   // TradeCaptureReport::NoSides
   class NoSides : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 65;

   public:
      enum { _fnum = 552 };

      NoSides() : GroupBase(_fnum) {}
      ~NoSides() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 78, new NoAllocs },
               { 136, new NoMiscFees },
               { 232, new NoStipulations },
               { 453, new NoPartyIDs },
               { 518, new NoContAmts },
               { 576, new NoClearingInstructions },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 78: return new NoAllocs;
         case 136: return new NoMiscFees;
         case 232: return new NoStipulations;
         case 453: return new NoPartyIDs;
         case 518: return new NoContAmts;
         case 576: return new NoClearingInstructions;
         default: return nullptr;
         }
      }

      /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x651dd3c
      // TradeCaptureReport::NoSides::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 6;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({756, new NoNested2PartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 756 ? new NoNested2PartyIDs : nullptr; }

         /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
         // TradeCaptureReport::NoSides::NoAllocs::NoNested2PartyIDs
         class NoNested2PartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 756 };

            NoNested2PartyIDs() : GroupBase(_fnum) {}
            ~NoNested2PartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({806, new NoNested2PartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 806 ? new NoNested2PartySubIDs : nullptr; }

            /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
            // TradeCaptureReport::NoSides::NoAllocs::NoNested2PartyIDs::NoNested2PartySubIDs
            class NoNested2PartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 806 };

               NoNested2PartySubIDs() : GroupBase(_fnum) {}
               ~NoNested2PartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
      // TradeCaptureReport::NoSides::NoMiscFees
      class NoMiscFees : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 136 };

         NoMiscFees() : GroupBase(_fnum) {}
         ~NoMiscFees() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // TradeCaptureReport::NoSides::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // TradeCaptureReport::NoSides::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 802 ? new NoPartySubIDs : nullptr; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // TradeCaptureReport::NoSides::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoContAmts (518), application, 3 fields, 0 groups, shares static data, hash: 0xb32a7415
      // TradeCaptureReport::NoSides::NoContAmts
      class NoContAmts : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 3;

      public:
         enum { _fnum = 518 };

         NoContAmts() : GroupBase(_fnum) {}
         ~NoContAmts() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoClearingInstructions (576), application, 1 field, 0 groups, shares static data, hash: 0x80001a40
      // TradeCaptureReport::NoSides::NoClearingInstructions
      class NoClearingInstructions : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 1;

      public:
         enum { _fnum = 576 };

         NoClearingInstructions() : GroupBase(_fnum) {}
         ~NoClearingInstructions() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoLegs (555), application, 53 fields, 3 groups, shares static data, hash: 0xffa047f8
   // TradeCaptureReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 53;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 539: return new NoNestedPartyIDs;
         case 604: return new NoLegSecurityAltID;
         case 683: return new NoLegStipulations;
         default: return nullptr;
         }
      }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // TradeCaptureReport::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // TradeCaptureReport::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // TradeCaptureReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // TradeCaptureReport::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // TradeCaptureReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // TradeCaptureReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // TradeCaptureReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPosAmt (753), application, 2 fields, 0 groups, shares static data, hash: 0x235b1ef7
   // TradeCaptureReport::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrdRegTimestamps (768), application, 3 fields, 0 groups, shares static data, hash: 0xab0f1c11
   // TradeCaptureReport::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // TradeCaptureReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderMassStatusRequest (AF), application, 96 fields, 5 groups.
class OrderMassStatusRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 96;

public:
   explicit OrderMassStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 457, new NoUnderlyingSecurityAltID },
            { 864, new NoEvents },
            { 887, new NoUnderlyingStips },
         });
   }
   ~OrderMassStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 457: return new NoUnderlyingSecurityAltID;
      case 864: return new NoEvents;
      case 887: return new NoUnderlyingStips;
      default: return nullptr;
      }
   }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderMassStatusRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderMassStatusRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderMassStatusRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // OrderMassStatusRequest::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // OrderMassStatusRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // OrderMassStatusRequest::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteRequestReject (AG), application, 7 fields, 1 group.
class QuoteRequestReject : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 7;

public:
   explicit QuoteRequestReject(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({146, new NoRelatedSym });
   }
   ~QuoteRequestReject() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 146 ? new NoRelatedSym : nullptr; }

   /// NoRelatedSym (146), application, 98 fields, 7 groups, is unique, hash: 0x9ba31fbe
   // QuoteRequestReject::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 98;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 232, new NoStipulations },
               { 453, new NoPartyIDs },
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 711, new NoUnderlyings },
               { 735, new NoQuoteQualifiers },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 232: return new NoStipulations;
         case 453: return new NoPartyIDs;
         case 454: return new NoSecurityAltID;
         case 555: return new NoLegs;
         case 711: return new NoUnderlyings;
         case 735: return new NoQuoteQualifiers;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // QuoteRequestReject::NoRelatedSym::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // QuoteRequestReject::NoRelatedSym::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 802 ? new NoPartySubIDs : nullptr; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // QuoteRequestReject::NoRelatedSym::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // QuoteRequestReject::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 53 fields, 3 groups, shares static data, hash: 0xbd2d1dba
      // QuoteRequestReject::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 53;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 539, new NoNestedPartyIDs },
                  { 604, new NoLegSecurityAltID },
                  { 683, new NoLegStipulations },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 539: return new NoNestedPartyIDs;
            case 604: return new NoLegSecurityAltID;
            case 683: return new NoLegStipulations;
            default: return nullptr;
            }
         }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // QuoteRequestReject::NoRelatedSym::NoLegs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // QuoteRequestReject::NoRelatedSym::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // QuoteRequestReject::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
         // QuoteRequestReject::NoRelatedSym::NoLegs::NoLegStipulations
         class NoLegStipulations : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 683 };

            NoLegStipulations() : GroupBase(_fnum) {}
            ~NoLegStipulations() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
      // QuoteRequestReject::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 46;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 457, new NoUnderlyingSecurityAltID },
                  { 887, new NoUnderlyingStips },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 457: return new NoUnderlyingSecurityAltID;
            case 887: return new NoUnderlyingStips;
            default: return nullptr;
            }
         }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // QuoteRequestReject::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // QuoteRequestReject::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
      // QuoteRequestReject::NoRelatedSym::NoQuoteQualifiers
      class NoQuoteQualifiers : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 1;

      public:
         enum { _fnum = 735 };

         NoQuoteQualifiers() : GroupBase(_fnum) {}
         ~NoQuoteQualifiers() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // QuoteRequestReject::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// RFQRequest (AH), application, 3 fields, 1 group.
class RFQRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 3;

public:
   explicit RFQRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({146, new NoRelatedSym });
   }
   ~RFQRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 146 ? new NoRelatedSym : nullptr; }

   /// NoRelatedSym (146), application, 49 fields, 4 groups, is unique, hash: 0x53c2d835
   // RFQRequest::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 49;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 711, new NoUnderlyings },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 454: return new NoSecurityAltID;
         case 555: return new NoLegs;
         case 711: return new NoUnderlyings;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // RFQRequest::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
      // RFQRequest::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 42;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // RFQRequest::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
      // RFQRequest::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 46;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 457, new NoUnderlyingSecurityAltID },
                  { 887, new NoUnderlyingStips },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 457: return new NoUnderlyingSecurityAltID;
            case 887: return new NoUnderlyingStips;
            default: return nullptr;
            }
         }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // RFQRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // RFQRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // RFQRequest::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteStatusReport (AI), application, 126 fields, 7 groups.
class QuoteStatusReport : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 126;

public:
   explicit QuoteStatusReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 735, new NoQuoteQualifiers },
            { 864, new NoEvents },
         });
   }
   ~QuoteStatusReport() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 735: return new NoQuoteQualifiers;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // QuoteStatusReport::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // QuoteStatusReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // QuoteStatusReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // QuoteStatusReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 48 fields, 3 groups, is unique, hash: 0xfcfb20bf
   // QuoteStatusReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 48;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 539: return new NoNestedPartyIDs;
         case 604: return new NoLegSecurityAltID;
         case 683: return new NoLegStipulations;
         default: return nullptr;
         }
      }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // QuoteStatusReport::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // QuoteStatusReport::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // QuoteStatusReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // QuoteStatusReport::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // QuoteStatusReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // QuoteStatusReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // QuoteStatusReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
   // QuoteStatusReport::NoQuoteQualifiers
   class NoQuoteQualifiers : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 735 };

      NoQuoteQualifiers() : GroupBase(_fnum) {}
      ~NoQuoteQualifiers() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // QuoteStatusReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteResponse (AJ), application, 126 fields, 7 groups.
class QuoteResponse : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 126;

public:
   explicit QuoteResponse(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 735, new NoQuoteQualifiers },
            { 864, new NoEvents },
         });
   }
   ~QuoteResponse() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 735: return new NoQuoteQualifiers;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // QuoteResponse::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // QuoteResponse::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // QuoteResponse::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // QuoteResponse::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 56 fields, 3 groups, shares static data, hash: 0x2b7ebcba
   // QuoteResponse::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 56;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 539: return new NoNestedPartyIDs;
         case 604: return new NoLegSecurityAltID;
         case 683: return new NoLegStipulations;
         default: return nullptr;
         }
      }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // QuoteResponse::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // QuoteResponse::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // QuoteResponse::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // QuoteResponse::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // QuoteResponse::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // QuoteResponse::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // QuoteResponse::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
   // QuoteResponse::NoQuoteQualifiers
   class NoQuoteQualifiers : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 735 };

      NoQuoteQualifiers() : GroupBase(_fnum) {}
      ~NoQuoteQualifiers() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // QuoteResponse::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// Confirmation (AK), application, 135 fields, 12 groups.
class Confirmation : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 135;

public:
   explicit Confirmation(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 73, new NoOrders },
            { 85, new NoDlvyInst },
            { 136, new NoMiscFees },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 768, new NoTrdRegTimestamps },
            { 862, new NoCapacities },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
         });
   }
   ~Confirmation() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 73: return new NoOrders;
      case 85: return new NoDlvyInst;
      case 136: return new NoMiscFees;
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 768: return new NoTrdRegTimestamps;
      case 862: return new NoCapacities;
      case 864: return new NoEvents;
      case 870: return new NoInstrAttrib;
      default: return nullptr;
      }
   }

   /// NoOrders (73), application, 9 fields, 1 group, shares static data, hash: 0x44626914
   // Confirmation::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 9;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 756 ? new NoNested2PartyIDs : nullptr; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // Confirmation::NoOrders::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 806 ? new NoNested2PartySubIDs : nullptr; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // Confirmation::NoOrders::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
   // Confirmation::NoDlvyInst
   class NoDlvyInst : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 85 };

      NoDlvyInst() : GroupBase(_fnum) {}
      ~NoDlvyInst() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({781, new NoSettlPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 781 ? new NoSettlPartyIDs : nullptr; }

      /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
      // Confirmation::NoDlvyInst::NoSettlPartyIDs
      class NoSettlPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 781 };

         NoSettlPartyIDs() : GroupBase(_fnum) {}
         ~NoSettlPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 801 ? new NoSettlPartySubIDs : nullptr; }

         /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
         // Confirmation::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
         class NoSettlPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 801 };

            NoSettlPartySubIDs() : GroupBase(_fnum) {}
            ~NoSettlPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // Confirmation::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // Confirmation::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // Confirmation::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // Confirmation::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // Confirmation::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // Confirmation::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // Confirmation::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // Confirmation::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // Confirmation::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // Confirmation::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTrdRegTimestamps (768), application, 3 fields, 0 groups, shares static data, hash: 0xab0f1c11
   // Confirmation::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoCapacities (862), application, 3 fields, 0 groups, is unique, hash: 0xef291272
   // Confirmation::NoCapacities
   class NoCapacities : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 862 };

      NoCapacities() : GroupBase(_fnum) {}
      ~NoCapacities() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // Confirmation::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // Confirmation::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// PositionMaintenanceRequest (AL), application, 67 fields, 7 groups.
class PositionMaintenanceRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 67;

public:
   explicit PositionMaintenanceRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 386, new NoTradingSessions },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 702, new NoPositions },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~PositionMaintenanceRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 386: return new NoTradingSessions;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 702: return new NoPositions;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // PositionMaintenanceRequest::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // PositionMaintenanceRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // PositionMaintenanceRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // PositionMaintenanceRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // PositionMaintenanceRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // PositionMaintenanceRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPositions (702), application, 5 fields, 1 group, shares static data, hash: 0x6736ade7
   // PositionMaintenanceRequest::NoPositions
   class NoPositions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 5;

   public:
      enum { _fnum = 702 };

      NoPositions() : GroupBase(_fnum) {}
      ~NoPositions() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // PositionMaintenanceRequest::NoPositions::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // PositionMaintenanceRequest::NoPositions::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // PositionMaintenanceRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // PositionMaintenanceRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // PositionMaintenanceRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // PositionMaintenanceRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// PositionMaintenanceReport (AM), application, 68 fields, 8 groups.
class PositionMaintenanceReport : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 68;

public:
   explicit PositionMaintenanceReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 386, new NoTradingSessions },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 702, new NoPositions },
            { 711, new NoUnderlyings },
            { 753, new NoPosAmt },
            { 864, new NoEvents },
         });
   }
   ~PositionMaintenanceReport() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 386: return new NoTradingSessions;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 702: return new NoPositions;
      case 711: return new NoUnderlyings;
      case 753: return new NoPosAmt;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // PositionMaintenanceReport::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // PositionMaintenanceReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // PositionMaintenanceReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // PositionMaintenanceReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // PositionMaintenanceReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // PositionMaintenanceReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPositions (702), application, 5 fields, 1 group, shares static data, hash: 0x6736ade7
   // PositionMaintenanceReport::NoPositions
   class NoPositions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 5;

   public:
      enum { _fnum = 702 };

      NoPositions() : GroupBase(_fnum) {}
      ~NoPositions() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // PositionMaintenanceReport::NoPositions::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // PositionMaintenanceReport::NoPositions::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // PositionMaintenanceReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // PositionMaintenanceReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // PositionMaintenanceReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPosAmt (753), application, 2 fields, 0 groups, shares static data, hash: 0x235b1ef7
   // PositionMaintenanceReport::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // PositionMaintenanceReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// RequestForPositions (AN), application, 63 fields, 6 groups.
class RequestForPositions : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 63;

public:
   explicit RequestForPositions(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 386, new NoTradingSessions },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~RequestForPositions() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 386: return new NoTradingSessions;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // RequestForPositions::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // RequestForPositions::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // RequestForPositions::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // RequestForPositions::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // RequestForPositions::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // RequestForPositions::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // RequestForPositions::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // RequestForPositions::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // RequestForPositions::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // RequestForPositions::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// RequestForPositionsAck (AO), application, 60 fields, 5 groups.
class RequestForPositionsAck : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 60;

public:
   explicit RequestForPositionsAck(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~RequestForPositionsAck() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // RequestForPositionsAck::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // RequestForPositionsAck::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // RequestForPositionsAck::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // RequestForPositionsAck::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // RequestForPositionsAck::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // RequestForPositionsAck::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // RequestForPositionsAck::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // RequestForPositionsAck::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // RequestForPositionsAck::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// PositionReport (AP), application, 69 fields, 7 groups.
class PositionReport : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 69;

public:
   explicit PositionReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 702, new NoPositions },
            { 711, new NoUnderlyings },
            { 753, new NoPosAmt },
            { 864, new NoEvents },
         });
   }
   ~PositionReport() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 702: return new NoPositions;
      case 711: return new NoUnderlyings;
      case 753: return new NoPosAmt;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // PositionReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // PositionReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // PositionReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // PositionReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // PositionReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPositions (702), application, 5 fields, 1 group, shares static data, hash: 0x6736ade7
   // PositionReport::NoPositions
   class NoPositions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 5;

   public:
      enum { _fnum = 702 };

      NoPositions() : GroupBase(_fnum) {}
      ~NoPositions() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // PositionReport::NoPositions::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // PositionReport::NoPositions::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 48 fields, 2 groups, is unique, hash: 0x744f767a
   // PositionReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 48;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // PositionReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // PositionReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPosAmt (753), application, 2 fields, 0 groups, shares static data, hash: 0x235b1ef7
   // PositionReport::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // PositionReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// TradeCaptureReportRequestAck (AQ), application, 56 fields, 4 groups.
class TradeCaptureReportRequestAck : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 56;

public:
   explicit TradeCaptureReportRequestAck(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~TradeCaptureReportRequestAck() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // TradeCaptureReportRequestAck::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // TradeCaptureReportRequestAck::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // TradeCaptureReportRequestAck::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // TradeCaptureReportRequestAck::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // TradeCaptureReportRequestAck::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // TradeCaptureReportRequestAck::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // TradeCaptureReportRequestAck::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// TradeCaptureReportAck (AR), application, 78 fields, 5 groups.
class TradeCaptureReportAck : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 78;

public:
   explicit TradeCaptureReportAck(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 78, new NoAllocs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 768, new NoTrdRegTimestamps },
            { 864, new NoEvents },
         });
   }
   ~TradeCaptureReportAck() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 78: return new NoAllocs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 768: return new NoTrdRegTimestamps;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x651dd3c
   // TradeCaptureReportAck::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 6;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 756 ? new NoNested2PartyIDs : nullptr; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // TradeCaptureReportAck::NoAllocs::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 806 ? new NoNested2PartySubIDs : nullptr; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // TradeCaptureReportAck::NoAllocs::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // TradeCaptureReportAck::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 53 fields, 3 groups, shares static data, hash: 0xffa047f8
   // TradeCaptureReportAck::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 53;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 539: return new NoNestedPartyIDs;
         case 604: return new NoLegSecurityAltID;
         case 683: return new NoLegStipulations;
         default: return nullptr;
         }
      }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // TradeCaptureReportAck::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // TradeCaptureReportAck::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // TradeCaptureReportAck::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // TradeCaptureReportAck::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTrdRegTimestamps (768), application, 3 fields, 0 groups, shares static data, hash: 0xab0f1c11
   // TradeCaptureReportAck::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // TradeCaptureReportAck::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationReport (AS), application, 130 fields, 10 groups.
class AllocationReport : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 130;

public:
   explicit AllocationReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 73, new NoOrders },
            { 78, new NoAllocs },
            { 124, new NoExecs },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
         });
   }
   ~AllocationReport() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 73: return new NoOrders;
      case 78: return new NoAllocs;
      case 124: return new NoExecs;
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      case 870: return new NoInstrAttrib;
      default: return nullptr;
      }
   }

   /// NoOrders (73), application, 9 fields, 1 group, shares static data, hash: 0x44626914
   // AllocationReport::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 9;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 756 ? new NoNested2PartyIDs : nullptr; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // AllocationReport::NoOrders::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 806 ? new NoNested2PartySubIDs : nullptr; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // AllocationReport::NoOrders::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoAllocs (78), application, 36 fields, 4 groups, shares static data, hash: 0x848065cb
   // AllocationReport::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 36;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 85, new NoDlvyInst },
               { 136, new NoMiscFees },
               { 539, new NoNestedPartyIDs },
               { 576, new NoClearingInstructions },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 85: return new NoDlvyInst;
         case 136: return new NoMiscFees;
         case 539: return new NoNestedPartyIDs;
         case 576: return new NoClearingInstructions;
         default: return nullptr;
         }
      }

      /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
      // AllocationReport::NoAllocs::NoDlvyInst
      class NoDlvyInst : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 3;

      public:
         enum { _fnum = 85 };

         NoDlvyInst() : GroupBase(_fnum) {}
         ~NoDlvyInst() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 781 ? new NoSettlPartyIDs : nullptr; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // AllocationReport::NoAllocs::NoDlvyInst::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 801 ? new NoSettlPartySubIDs : nullptr; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // AllocationReport::NoAllocs::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
      // AllocationReport::NoAllocs::NoMiscFees
      class NoMiscFees : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 136 };

         NoMiscFees() : GroupBase(_fnum) {}
         ~NoMiscFees() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AllocationReport::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AllocationReport::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoClearingInstructions (576), application, 1 field, 0 groups, shares static data, hash: 0x80001a40
      // AllocationReport::NoAllocs::NoClearingInstructions
      class NoClearingInstructions : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 1;

      public:
         enum { _fnum = 576 };

         NoClearingInstructions() : GroupBase(_fnum) {}
         ~NoClearingInstructions() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoExecs (124), application, 6 fields, 0 groups, shares static data, hash: 0x40c7a97a
   // AllocationReport::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 6;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // AllocationReport::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AllocationReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AllocationReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // AllocationReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // AllocationReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // AllocationReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // AllocationReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // AllocationReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // AllocationReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // AllocationReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // AllocationReport::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationReportAck (AT), application, 17 fields, 2 groups.
class AllocationReportAck : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 17;

public:
   explicit AllocationReportAck(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 78, new NoAllocs },
            { 453, new NoPartyIDs },
         });
   }
   ~AllocationReportAck() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 78: return new NoAllocs;
      case 453: return new NoPartyIDs;
      default: return nullptr;
      }
   }

   /// NoAllocs (78), application, 8 fields, 0 groups, shares static data, hash: 0xbc647def
   // AllocationReportAck::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 8;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AllocationReportAck::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AllocationReportAck::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// ConfirmationAck (AU), application, 9 fields, 0 groups.
class ConfirmationAck : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 9;

public:
   explicit ConfirmationAck(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~ConfirmationAck() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// SettlementInstructionRequest (AV), application, 15 fields, 1 group.
class SettlementInstructionRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 15;

public:
   explicit SettlementInstructionRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({453, new NoPartyIDs });
   }
   ~SettlementInstructionRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 453 ? new NoPartyIDs : nullptr; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // SettlementInstructionRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // SettlementInstructionRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// AssignmentReport (AW), application, 68 fields, 7 groups.
class AssignmentReport : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 68;

public:
   explicit AssignmentReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 702, new NoPositions },
            { 711, new NoUnderlyings },
            { 753, new NoPosAmt },
            { 864, new NoEvents },
         });
   }
   ~AssignmentReport() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 702: return new NoPositions;
      case 711: return new NoUnderlyings;
      case 753: return new NoPosAmt;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AssignmentReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AssignmentReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // AssignmentReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // AssignmentReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // AssignmentReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPositions (702), application, 5 fields, 1 group, shares static data, hash: 0x6736ade7
   // AssignmentReport::NoPositions
   class NoPositions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 5;

   public:
      enum { _fnum = 702 };

      NoPositions() : GroupBase(_fnum) {}
      ~NoPositions() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AssignmentReport::NoPositions::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AssignmentReport::NoPositions::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // AssignmentReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // AssignmentReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // AssignmentReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPosAmt (753), application, 2 fields, 0 groups, shares static data, hash: 0x235b1ef7
   // AssignmentReport::NoPosAmt
   class NoPosAmt : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 753 };

      NoPosAmt() : GroupBase(_fnum) {}
      ~NoPosAmt() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // AssignmentReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralRequest (AX), application, 99 fields, 10 groups.
class CollateralRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 99;

public:
   explicit CollateralRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 124, new NoExecs },
            { 136, new NoMiscFees },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 768, new NoTrdRegTimestamps },
            { 864, new NoEvents },
            { 897, new NoTrades },
         });
   }
   ~CollateralRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 124: return new NoExecs;
      case 136: return new NoMiscFees;
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 768: return new NoTrdRegTimestamps;
      case 864: return new NoEvents;
      case 897: return new NoTrades;
      default: return nullptr;
      }
   }

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralRequest::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // CollateralRequest::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralRequest::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // CollateralRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 47 fields, 2 groups, shares static data, hash: 0xcf791f16
   // CollateralRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 47;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTrdRegTimestamps (768), application, 3 fields, 0 groups, shares static data, hash: 0xab0f1c11
   // CollateralRequest::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // CollateralRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralRequest::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralAssignment (AY), application, 107 fields, 11 groups.
class CollateralAssignment : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 107;

public:
   explicit CollateralAssignment(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 85, new NoDlvyInst },
            { 124, new NoExecs },
            { 136, new NoMiscFees },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 768, new NoTrdRegTimestamps },
            { 864, new NoEvents },
            { 897, new NoTrades },
         });
   }
   ~CollateralAssignment() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 85: return new NoDlvyInst;
      case 124: return new NoExecs;
      case 136: return new NoMiscFees;
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 768: return new NoTrdRegTimestamps;
      case 864: return new NoEvents;
      case 897: return new NoTrades;
      default: return nullptr;
      }
   }

   /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
   // CollateralAssignment::NoDlvyInst
   class NoDlvyInst : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 85 };

      NoDlvyInst() : GroupBase(_fnum) {}
      ~NoDlvyInst() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({781, new NoSettlPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 781 ? new NoSettlPartyIDs : nullptr; }

      /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
      // CollateralAssignment::NoDlvyInst::NoSettlPartyIDs
      class NoSettlPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 781 };

         NoSettlPartyIDs() : GroupBase(_fnum) {}
         ~NoSettlPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 801 ? new NoSettlPartySubIDs : nullptr; }

         /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
         // CollateralAssignment::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
         class NoSettlPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 801 };

            NoSettlPartySubIDs() : GroupBase(_fnum) {}
            ~NoSettlPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralAssignment::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // CollateralAssignment::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralAssignment::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralAssignment::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralAssignment::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralAssignment::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // CollateralAssignment::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralAssignment::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 47 fields, 2 groups, shares static data, hash: 0xcf791f16
   // CollateralAssignment::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 47;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralAssignment::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralAssignment::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTrdRegTimestamps (768), application, 3 fields, 0 groups, shares static data, hash: 0xab0f1c11
   // CollateralAssignment::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // CollateralAssignment::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralAssignment::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralResponse (AZ), application, 98 fields, 10 groups.
class CollateralResponse : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 98;

public:
   explicit CollateralResponse(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 124, new NoExecs },
            { 136, new NoMiscFees },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 768, new NoTrdRegTimestamps },
            { 864, new NoEvents },
            { 897, new NoTrades },
         });
   }
   ~CollateralResponse() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 124: return new NoExecs;
      case 136: return new NoMiscFees;
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 768: return new NoTrdRegTimestamps;
      case 864: return new NoEvents;
      case 897: return new NoTrades;
      default: return nullptr;
      }
   }

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralResponse::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // CollateralResponse::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralResponse::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralResponse::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralResponse::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralResponse::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // CollateralResponse::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralResponse::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 47 fields, 2 groups, shares static data, hash: 0xcf791f16
   // CollateralResponse::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 47;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralResponse::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralResponse::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTrdRegTimestamps (768), application, 3 fields, 0 groups, shares static data, hash: 0xab0f1c11
   // CollateralResponse::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // CollateralResponse::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralResponse::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// News (B), application, 13 fields, 5 groups.
class News : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 13;

public:
   explicit News(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 33, new NoLinesOfText },
            { 146, new NoRelatedSym },
            { 215, new NoRoutingIDs },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
         });
   }
   ~News() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 33: return new NoLinesOfText;
      case 146: return new NoRelatedSym;
      case 215: return new NoRoutingIDs;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      default: return nullptr;
      }
   }

   /// NoLinesOfText (33), application, 3 fields, 0 groups, shares static data, hash: 0x474fa799
   // News::NoLinesOfText
   class NoLinesOfText : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 33 };

      NoLinesOfText() : GroupBase(_fnum) {}
      ~NoLinesOfText() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRelatedSym (146), application, 42 fields, 2 groups, shares static data, hash: 0x7854138a
   // News::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 454: return new NoSecurityAltID;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // News::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // News::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // News::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // News::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // News::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // News::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // News::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // News::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralReport (BA), application, 105 fields, 11 groups.
class CollateralReport : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 105;

public:
   explicit CollateralReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 85, new NoDlvyInst },
            { 124, new NoExecs },
            { 136, new NoMiscFees },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 768, new NoTrdRegTimestamps },
            { 864, new NoEvents },
            { 897, new NoTrades },
         });
   }
   ~CollateralReport() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 85: return new NoDlvyInst;
      case 124: return new NoExecs;
      case 136: return new NoMiscFees;
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 768: return new NoTrdRegTimestamps;
      case 864: return new NoEvents;
      case 897: return new NoTrades;
      default: return nullptr;
      }
   }

   /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
   // CollateralReport::NoDlvyInst
   class NoDlvyInst : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 85 };

      NoDlvyInst() : GroupBase(_fnum) {}
      ~NoDlvyInst() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({781, new NoSettlPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 781 ? new NoSettlPartyIDs : nullptr; }

      /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
      // CollateralReport::NoDlvyInst::NoSettlPartyIDs
      class NoSettlPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 781 };

         NoSettlPartyIDs() : GroupBase(_fnum) {}
         ~NoSettlPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 801 ? new NoSettlPartySubIDs : nullptr; }

         /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
         // CollateralReport::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
         class NoSettlPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 801 };

            NoSettlPartySubIDs() : GroupBase(_fnum) {}
            ~NoSettlPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralReport::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
   // CollateralReport::NoMiscFees
   class NoMiscFees : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 136 };

      NoMiscFees() : GroupBase(_fnum) {}
      ~NoMiscFees() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralReport::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralReport::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralReport::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // CollateralReport::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralReport::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // CollateralReport::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralReport::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralReport::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTrdRegTimestamps (768), application, 3 fields, 0 groups, shares static data, hash: 0xab0f1c11
   // CollateralReport::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // CollateralReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralReport::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// CollateralInquiry (BB), application, 104 fields, 11 groups.
class CollateralInquiry : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 104;

public:
   explicit CollateralInquiry(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 85, new NoDlvyInst },
            { 124, new NoExecs },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 768, new NoTrdRegTimestamps },
            { 864, new NoEvents },
            { 897, new NoTrades },
            { 938, new NoCollInquiryQualifier },
         });
   }
   ~CollateralInquiry() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 85: return new NoDlvyInst;
      case 124: return new NoExecs;
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 768: return new NoTrdRegTimestamps;
      case 864: return new NoEvents;
      case 897: return new NoTrades;
      case 938: return new NoCollInquiryQualifier;
      default: return nullptr;
      }
   }

   /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
   // CollateralInquiry::NoDlvyInst
   class NoDlvyInst : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 85 };

      NoDlvyInst() : GroupBase(_fnum) {}
      ~NoDlvyInst() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({781, new NoSettlPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 781 ? new NoSettlPartyIDs : nullptr; }

      /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
      // CollateralInquiry::NoDlvyInst::NoSettlPartyIDs
      class NoSettlPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 781 };

         NoSettlPartyIDs() : GroupBase(_fnum) {}
         ~NoSettlPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({801, new NoSettlPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 801 ? new NoSettlPartySubIDs : nullptr; }

         /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
         // CollateralInquiry::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
         class NoSettlPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 801 };

            NoSettlPartySubIDs() : GroupBase(_fnum) {}
            ~NoSettlPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralInquiry::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CollateralInquiry::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralInquiry::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralInquiry::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralInquiry::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // CollateralInquiry::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralInquiry::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // CollateralInquiry::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralInquiry::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralInquiry::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoTrdRegTimestamps (768), application, 3 fields, 0 groups, shares static data, hash: 0xab0f1c11
   // CollateralInquiry::NoTrdRegTimestamps
   class NoTrdRegTimestamps : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 768 };

      NoTrdRegTimestamps() : GroupBase(_fnum) {}
      ~NoTrdRegTimestamps() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // CollateralInquiry::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralInquiry::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoCollInquiryQualifier (938), application, 1 field, 0 groups, shares static data, hash: 0x80001b81
   // CollateralInquiry::NoCollInquiryQualifier
   class NoCollInquiryQualifier : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 938 };

      NoCollInquiryQualifier() : GroupBase(_fnum) {}
      ~NoCollInquiryQualifier() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// NetworkCounterpartySystemStatusRequest (BC), application, 3 fields, 1 group.
class NetworkCounterpartySystemStatusRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 3;

public:
   explicit NetworkCounterpartySystemStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({936, new NoCompIDs });
   }
   ~NetworkCounterpartySystemStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 936 ? new NoCompIDs : nullptr; }

   /// NoCompIDs (936), application, 4 fields, 0 groups, is unique, hash: 0x87f17dd0
   // NetworkCounterpartySystemStatusRequest::NoCompIDs
   class NoCompIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 936 };

      NoCompIDs() : GroupBase(_fnum) {}
      ~NoCompIDs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// NetworkCounterpartySystemStatusResponse (BD), application, 5 fields, 1 group.
class NetworkCounterpartySystemStatusResponse : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 5;

public:
   explicit NetworkCounterpartySystemStatusResponse(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({936, new NoCompIDs });
   }
   ~NetworkCounterpartySystemStatusResponse() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 936 ? new NoCompIDs : nullptr; }

   /// NoCompIDs (936), application, 6 fields, 0 groups, is unique, hash: 0xa80f7cc0
   // NetworkCounterpartySystemStatusResponse::NoCompIDs
   class NoCompIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 6;

   public:
      enum { _fnum = 936 };

      NoCompIDs() : GroupBase(_fnum) {}
      ~NoCompIDs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// UserRequest (BE), application, 7 fields, 0 groups.
class UserRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 7;

public:
   explicit UserRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~UserRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// UserResponse (BF), application, 4 fields, 0 groups.
class UserResponse : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 4;

public:
   explicit UserResponse(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~UserResponse() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// CollateralInquiryAck (BG), application, 81 fields, 8 groups.
class CollateralInquiryAck : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 81;

public:
   explicit CollateralInquiryAck(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 124, new NoExecs },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 897, new NoTrades },
            { 938, new NoCollInquiryQualifier },
         });
   }
   ~CollateralInquiryAck() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 124: return new NoExecs;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      case 897: return new NoTrades;
      case 938: return new NoCollInquiryQualifier;
      default: return nullptr;
      }
   }

   /// NoExecs (124), application, 1 field, 0 groups, shares static data, hash: 0x80001810
   // CollateralInquiryAck::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // CollateralInquiryAck::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // CollateralInquiryAck::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CollateralInquiryAck::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // CollateralInquiryAck::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CollateralInquiryAck::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // CollateralInquiryAck::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CollateralInquiryAck::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CollateralInquiryAck::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // CollateralInquiryAck::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTrades (897), application, 2 fields, 0 groups, shares static data, hash: 0x234400c7
   // CollateralInquiryAck::NoTrades
   class NoTrades : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 897 };

      NoTrades() : GroupBase(_fnum) {}
      ~NoTrades() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoCollInquiryQualifier (938), application, 1 field, 0 groups, shares static data, hash: 0x80001b81
   // CollateralInquiryAck::NoCollInquiryQualifier
   class NoCollInquiryQualifier : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 938 };

      NoCollInquiryQualifier() : GroupBase(_fnum) {}
      ~NoCollInquiryQualifier() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// ConfirmationRequest (BH), application, 13 fields, 1 group.
class ConfirmationRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 13;

public:
   explicit ConfirmationRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({73, new NoOrders });
   }
   ~ConfirmationRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 73 ? new NoOrders : nullptr; }

   /// NoOrders (73), application, 9 fields, 1 group, shares static data, hash: 0x44626914
   // ConfirmationRequest::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 9;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 756 ? new NoNested2PartyIDs : nullptr; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // ConfirmationRequest::NoOrders::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 806 ? new NoNested2PartySubIDs : nullptr; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // ConfirmationRequest::NoOrders::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// Email (C), application, 15 fields, 5 groups.
class Email : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 15;

public:
   explicit Email(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 33, new NoLinesOfText },
            { 146, new NoRelatedSym },
            { 215, new NoRoutingIDs },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
         });
   }
   ~Email() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 33: return new NoLinesOfText;
      case 146: return new NoRelatedSym;
      case 215: return new NoRoutingIDs;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      default: return nullptr;
      }
   }

   /// NoLinesOfText (33), application, 3 fields, 0 groups, shares static data, hash: 0x474fa799
   // Email::NoLinesOfText
   class NoLinesOfText : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 33 };

      NoLinesOfText() : GroupBase(_fnum) {}
      ~NoLinesOfText() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRelatedSym (146), application, 42 fields, 2 groups, shares static data, hash: 0x7854138a
   // Email::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 454: return new NoSecurityAltID;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // Email::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // Email::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // Email::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // Email::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // Email::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // Email::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // Email::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // Email::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderSingle (D), application, 155 fields, 7 groups.
class NewOrderSingle : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 155;

public:
   explicit NewOrderSingle(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 78, new NoAllocs },
            { 232, new NoStipulations },
            { 386, new NoTradingSessions },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~NewOrderSingle() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 78: return new NoAllocs;
      case 232: return new NoStipulations;
      case 386: return new NoTradingSessions;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
   // NewOrderSingle::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 6;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // NewOrderSingle::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // NewOrderSingle::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // NewOrderSingle::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // NewOrderSingle::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // NewOrderSingle::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // NewOrderSingle::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // NewOrderSingle::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // NewOrderSingle::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // NewOrderSingle::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // NewOrderSingle::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // NewOrderSingle::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderList (E), application, 19 fields, 1 group.
class NewOrderList : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 19;

public:
   explicit NewOrderList(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({73, new NoOrders });
   }
   ~NewOrderList() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 73 ? new NoOrders : nullptr; }

   /// NoOrders (73), application, 146 fields, 7 groups, is unique, hash: 0xa939ae21
   // NewOrderList::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 146;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 78, new NoAllocs },
               { 232, new NoStipulations },
               { 386, new NoTradingSessions },
               { 453, new NoPartyIDs },
               { 454, new NoSecurityAltID },
               { 711, new NoUnderlyings },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 78: return new NoAllocs;
         case 232: return new NoStipulations;
         case 386: return new NoTradingSessions;
         case 453: return new NoPartyIDs;
         case 454: return new NoSecurityAltID;
         case 711: return new NoUnderlyings;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
      // NewOrderList::NoOrders::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 6;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({539, new NoNestedPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // NewOrderList::NoOrders::NoAllocs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // NewOrderList::NoOrders::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // NewOrderList::NoOrders::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
      // NewOrderList::NoOrders::NoTradingSessions
      class NoTradingSessions : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 386 };

         NoTradingSessions() : GroupBase(_fnum) {}
         ~NoTradingSessions() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // NewOrderList::NoOrders::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 802 ? new NoPartySubIDs : nullptr; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // NewOrderList::NoOrders::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // NewOrderList::NoOrders::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
      // NewOrderList::NoOrders::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 46;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 457, new NoUnderlyingSecurityAltID },
                  { 887, new NoUnderlyingStips },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 457: return new NoUnderlyingSecurityAltID;
            case 887: return new NoUnderlyingStips;
            default: return nullptr;
            }
         }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // NewOrderList::NoOrders::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // NewOrderList::NoOrders::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // NewOrderList::NoOrders::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderCancelRequest (F), application, 74 fields, 4 groups.
class OrderCancelRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 74;

public:
   explicit OrderCancelRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~OrderCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderCancelRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderCancelRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderCancelRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // OrderCancelRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // OrderCancelRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // OrderCancelRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // OrderCancelRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderCancelReplaceRequest (G), application, 154 fields, 6 groups.
class OrderCancelReplaceRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 154;

public:
   explicit OrderCancelReplaceRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 78, new NoAllocs },
            { 386, new NoTradingSessions },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~OrderCancelReplaceRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 78: return new NoAllocs;
      case 386: return new NoTradingSessions;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
   // OrderCancelReplaceRequest::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 6;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // OrderCancelReplaceRequest::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // OrderCancelReplaceRequest::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // OrderCancelReplaceRequest::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderCancelReplaceRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderCancelReplaceRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderCancelReplaceRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // OrderCancelReplaceRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // OrderCancelReplaceRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // OrderCancelReplaceRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // OrderCancelReplaceRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderStatusRequest (H), application, 61 fields, 4 groups.
class OrderStatusRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 61;

public:
   explicit OrderStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~OrderStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // OrderStatusRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // OrderStatusRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderStatusRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // OrderStatusRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // OrderStatusRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // OrderStatusRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // OrderStatusRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationInstruction (J), application, 126 fields, 10 groups.
class AllocationInstruction : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 126;

public:
   explicit AllocationInstruction(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 73, new NoOrders },
            { 78, new NoAllocs },
            { 124, new NoExecs },
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
         });
   }
   ~AllocationInstruction() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 73: return new NoOrders;
      case 78: return new NoAllocs;
      case 124: return new NoExecs;
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      case 870: return new NoInstrAttrib;
      default: return nullptr;
      }
   }

   /// NoOrders (73), application, 9 fields, 1 group, shares static data, hash: 0x44626914
   // AllocationInstruction::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 9;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({756, new NoNested2PartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 756 ? new NoNested2PartyIDs : nullptr; }

      /// NoNested2PartyIDs (756), application, 4 fields, 1 group, shares static data, hash: 0xf972e961
      // AllocationInstruction::NoOrders::NoNested2PartyIDs
      class NoNested2PartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 756 };

         NoNested2PartyIDs() : GroupBase(_fnum) {}
         ~NoNested2PartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({806, new NoNested2PartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 806 ? new NoNested2PartySubIDs : nullptr; }

         /// NoNested2PartySubIDs (806), application, 2 fields, 0 groups, shares static data, hash: 0x235c7841
         // AllocationInstruction::NoOrders::NoNested2PartyIDs::NoNested2PartySubIDs
         class NoNested2PartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 806 };

            NoNested2PartySubIDs() : GroupBase(_fnum) {}
            ~NoNested2PartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoAllocs (78), application, 36 fields, 4 groups, shares static data, hash: 0x848065cb
   // AllocationInstruction::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 36;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 85, new NoDlvyInst },
               { 136, new NoMiscFees },
               { 539, new NoNestedPartyIDs },
               { 576, new NoClearingInstructions },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 85: return new NoDlvyInst;
         case 136: return new NoMiscFees;
         case 539: return new NoNestedPartyIDs;
         case 576: return new NoClearingInstructions;
         default: return nullptr;
         }
      }

      /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
      // AllocationInstruction::NoAllocs::NoDlvyInst
      class NoDlvyInst : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 3;

      public:
         enum { _fnum = 85 };

         NoDlvyInst() : GroupBase(_fnum) {}
         ~NoDlvyInst() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 781 ? new NoSettlPartyIDs : nullptr; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // AllocationInstruction::NoAllocs::NoDlvyInst::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 801 ? new NoSettlPartySubIDs : nullptr; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // AllocationInstruction::NoAllocs::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoMiscFees (136), application, 4 fields, 0 groups, shares static data, hash: 0x4e6deec9
      // AllocationInstruction::NoAllocs::NoMiscFees
      class NoMiscFees : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 136 };

         NoMiscFees() : GroupBase(_fnum) {}
         ~NoMiscFees() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // AllocationInstruction::NoAllocs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // AllocationInstruction::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoClearingInstructions (576), application, 1 field, 0 groups, shares static data, hash: 0x80001a40
      // AllocationInstruction::NoAllocs::NoClearingInstructions
      class NoClearingInstructions : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 1;

      public:
         enum { _fnum = 576 };

         NoClearingInstructions() : GroupBase(_fnum) {}
         ~NoClearingInstructions() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoExecs (124), application, 6 fields, 0 groups, shares static data, hash: 0x40c7a97a
   // AllocationInstruction::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 6;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // AllocationInstruction::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AllocationInstruction::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AllocationInstruction::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // AllocationInstruction::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // AllocationInstruction::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // AllocationInstruction::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // AllocationInstruction::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // AllocationInstruction::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // AllocationInstruction::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // AllocationInstruction::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // AllocationInstruction::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// ListCancelRequest (K), application, 7 fields, 0 groups.
class ListCancelRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 7;

public:
   explicit ListCancelRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~ListCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ListExecute (L), application, 7 fields, 0 groups.
class ListExecute : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 7;

public:
   explicit ListExecute(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~ListExecute() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ListStatusRequest (M), application, 4 fields, 0 groups.
class ListStatusRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 4;

public:
   explicit ListStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~ListStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ListStatus (N), application, 12 fields, 1 group.
class ListStatus : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 12;

public:
   explicit ListStatus(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({73, new NoOrders });
   }
   ~ListStatus() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 73 ? new NoOrders : nullptr; }

   /// NoOrders (73), application, 12 fields, 0 groups, is unique, hash: 0x639f4d2e
   // ListStatus::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 12;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationInstructionAck (P), application, 16 fields, 2 groups.
class AllocationInstructionAck : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 16;

public:
   explicit AllocationInstructionAck(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 78, new NoAllocs },
            { 453, new NoPartyIDs },
         });
   }
   ~AllocationInstructionAck() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 78: return new NoAllocs;
      case 453: return new NoPartyIDs;
      default: return nullptr;
      }
   }

   /// NoAllocs (78), application, 8 fields, 0 groups, shares static data, hash: 0xbc647def
   // AllocationInstructionAck::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 8;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // AllocationInstructionAck::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // AllocationInstructionAck::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// DontKnowTrade (Q), application, 59 fields, 4 groups.
class DontKnowTrade : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 59;

public:
   explicit DontKnowTrade(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~DontKnowTrade() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // DontKnowTrade::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // DontKnowTrade::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // DontKnowTrade::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // DontKnowTrade::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // DontKnowTrade::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // DontKnowTrade::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // DontKnowTrade::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteRequest (R), application, 8 fields, 1 group.
class QuoteRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 8;

public:
   explicit QuoteRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({146, new NoRelatedSym });
   }
   ~QuoteRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 146 ? new NoRelatedSym : nullptr; }

   /// NoRelatedSym (146), application, 99 fields, 7 groups, is unique, hash: 0xbc434c11
   // QuoteRequest::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 99;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 232, new NoStipulations },
               { 453, new NoPartyIDs },
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 711, new NoUnderlyings },
               { 735, new NoQuoteQualifiers },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 232: return new NoStipulations;
         case 453: return new NoPartyIDs;
         case 454: return new NoSecurityAltID;
         case 555: return new NoLegs;
         case 711: return new NoUnderlyings;
         case 735: return new NoQuoteQualifiers;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // QuoteRequest::NoRelatedSym::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // QuoteRequest::NoRelatedSym::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 802 ? new NoPartySubIDs : nullptr; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // QuoteRequest::NoRelatedSym::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // QuoteRequest::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 53 fields, 3 groups, shares static data, hash: 0xbd2d1dba
      // QuoteRequest::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 53;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 539, new NoNestedPartyIDs },
                  { 604, new NoLegSecurityAltID },
                  { 683, new NoLegStipulations },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 539: return new NoNestedPartyIDs;
            case 604: return new NoLegSecurityAltID;
            case 683: return new NoLegStipulations;
            default: return nullptr;
            }
         }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // QuoteRequest::NoRelatedSym::NoLegs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // QuoteRequest::NoRelatedSym::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // QuoteRequest::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
         // QuoteRequest::NoRelatedSym::NoLegs::NoLegStipulations
         class NoLegStipulations : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 683 };

            NoLegStipulations() : GroupBase(_fnum) {}
            ~NoLegStipulations() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
      // QuoteRequest::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 46;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 457, new NoUnderlyingSecurityAltID },
                  { 887, new NoUnderlyingStips },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 457: return new NoUnderlyingSecurityAltID;
            case 887: return new NoUnderlyingStips;
            default: return nullptr;
            }
         }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // QuoteRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // QuoteRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
      // QuoteRequest::NoRelatedSym::NoQuoteQualifiers
      class NoQuoteQualifiers : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 1;

      public:
         enum { _fnum = 735 };

         NoQuoteQualifiers() : GroupBase(_fnum) {}
         ~NoQuoteQualifiers() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // QuoteRequest::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// Quote (S), application, 124 fields, 7 groups.
class Quote : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 124;

public:
   explicit Quote(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 232, new NoStipulations },
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 735, new NoQuoteQualifiers },
            { 864, new NoEvents },
         });
   }
   ~Quote() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 232: return new NoStipulations;
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 735: return new NoQuoteQualifiers;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // Quote::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // Quote::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // Quote::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // Quote::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 56 fields, 3 groups, shares static data, hash: 0x2b7ebcba
   // Quote::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 56;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 539, new NoNestedPartyIDs },
               { 604, new NoLegSecurityAltID },
               { 683, new NoLegStipulations },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 539: return new NoNestedPartyIDs;
         case 604: return new NoLegSecurityAltID;
         case 683: return new NoLegStipulations;
         default: return nullptr;
         }
      }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // Quote::NoLegs::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // Quote::NoLegs::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // Quote::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
      // Quote::NoLegs::NoLegStipulations
      class NoLegStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 683 };

         NoLegStipulations() : GroupBase(_fnum) {}
         ~NoLegStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // Quote::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // Quote::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // Quote::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoQuoteQualifiers (735), application, 1 field, 0 groups, shares static data, hash: 0x80001ab6
   // Quote::NoQuoteQualifiers
   class NoQuoteQualifiers : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 735 };

      NoQuoteQualifiers() : GroupBase(_fnum) {}
      ~NoQuoteQualifiers() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // Quote::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SettlementInstructions (T), application, 10 fields, 1 group.
class SettlementInstructions : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 10;

public:
   explicit SettlementInstructions(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({778, new NoSettlInst });
   }
   ~SettlementInstructions() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 778 ? new NoSettlInst : nullptr; }

   /// NoSettlInst (778), application, 25 fields, 2 groups, is unique, hash: 0xe4690b52
   // SettlementInstructions::NoSettlInst
   class NoSettlInst : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 25;

   public:
      enum { _fnum = 778 };

      NoSettlInst() : GroupBase(_fnum) {}
      ~NoSettlInst() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 85, new NoDlvyInst },
               { 453, new NoPartyIDs },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 85: return new NoDlvyInst;
         case 453: return new NoPartyIDs;
         default: return nullptr;
         }
      }

      /// NoDlvyInst (85), application, 3 fields, 1 group, shares static data, hash: 0x501d4298
      // SettlementInstructions::NoSettlInst::NoDlvyInst
      class NoDlvyInst : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 3;

      public:
         enum { _fnum = 85 };

         NoDlvyInst() : GroupBase(_fnum) {}
         ~NoDlvyInst() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({781, new NoSettlPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 781 ? new NoSettlPartyIDs : nullptr; }

         /// NoSettlPartyIDs (781), application, 4 fields, 1 group, shares static data, hash: 0x881e8116
         // SettlementInstructions::NoSettlInst::NoDlvyInst::NoSettlPartyIDs
         class NoSettlPartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 781 };

            NoSettlPartyIDs() : GroupBase(_fnum) {}
            ~NoSettlPartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({801, new NoSettlPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 801 ? new NoSettlPartySubIDs : nullptr; }

            /// NoSettlPartySubIDs (801), application, 2 fields, 0 groups, shares static data, hash: 0x236164c7
            // SettlementInstructions::NoSettlInst::NoDlvyInst::NoSettlPartyIDs::NoSettlPartySubIDs
            class NoSettlPartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 801 };

               NoSettlPartySubIDs() : GroupBase(_fnum) {}
               ~NoSettlPartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // SettlementInstructions::NoSettlInst::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 802 ? new NoPartySubIDs : nullptr; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // SettlementInstructions::NoSettlInst::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataRequest (V), application, 10 fields, 2 groups.
class MarketDataRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 10;

public:
   explicit MarketDataRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 146, new NoRelatedSym },
            { 267, new NoMDEntryTypes },
         });
   }
   ~MarketDataRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 146: return new NoRelatedSym;
      case 267: return new NoMDEntryTypes;
      default: return nullptr;
      }
   }

   /// NoRelatedSym (146), application, 47 fields, 5 groups, is unique, hash: 0x44c70e09
   // MarketDataRequest::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 47;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 386, new NoTradingSessions },
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 711, new NoUnderlyings },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 386: return new NoTradingSessions;
         case 454: return new NoSecurityAltID;
         case 555: return new NoLegs;
         case 711: return new NoUnderlyings;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
      // MarketDataRequest::NoRelatedSym::NoTradingSessions
      class NoTradingSessions : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 386 };

         NoTradingSessions() : GroupBase(_fnum) {}
         ~NoTradingSessions() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // MarketDataRequest::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
      // MarketDataRequest::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 42;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // MarketDataRequest::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
      // MarketDataRequest::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 46;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 457, new NoUnderlyingSecurityAltID },
                  { 887, new NoUnderlyingStips },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 457: return new NoUnderlyingSecurityAltID;
            case 887: return new NoUnderlyingStips;
            default: return nullptr;
            }
         }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // MarketDataRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // MarketDataRequest::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // MarketDataRequest::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoMDEntryTypes (267), application, 1 field, 0 groups, is unique, hash: 0x8000190c
   // MarketDataRequest::NoMDEntryTypes
   class NoMDEntryTypes : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 267 };

      NoMDEntryTypes() : GroupBase(_fnum) {}
      ~NoMDEntryTypes() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataSnapshotFullRefresh (W), application, 51 fields, 5 groups.
class MarketDataSnapshotFullRefresh : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 51;

public:
   explicit MarketDataSnapshotFullRefresh(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 268, new NoMDEntries },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~MarketDataSnapshotFullRefresh() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 268: return new NoMDEntries;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoMDEntries (268), application, 33 fields, 0 groups, is unique, hash: 0x8dfddd97
   // MarketDataSnapshotFullRefresh::NoMDEntries
   class NoMDEntries : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 33;

   public:
      enum { _fnum = 268 };

      NoMDEntries() : GroupBase(_fnum) {}
      ~NoMDEntries() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // MarketDataSnapshotFullRefresh::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // MarketDataSnapshotFullRefresh::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // MarketDataSnapshotFullRefresh::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // MarketDataSnapshotFullRefresh::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // MarketDataSnapshotFullRefresh::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // MarketDataSnapshotFullRefresh::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // MarketDataSnapshotFullRefresh::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataIncrementalRefresh (X), application, 4 fields, 1 group.
class MarketDataIncrementalRefresh : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 4;

public:
   explicit MarketDataIncrementalRefresh(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({268, new NoMDEntries });
   }
   ~MarketDataIncrementalRefresh() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 268 ? new NoMDEntries : nullptr; }

   /// NoMDEntries (268), application, 84 fields, 4 groups, is unique, hash: 0x96e7fd85
   // MarketDataIncrementalRefresh::NoMDEntries
   class NoMDEntries : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 84;

   public:
      enum { _fnum = 268 };

      NoMDEntries() : GroupBase(_fnum) {}
      ~NoMDEntries() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 711, new NoUnderlyings },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 454: return new NoSecurityAltID;
         case 555: return new NoLegs;
         case 711: return new NoUnderlyings;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // MarketDataIncrementalRefresh::NoMDEntries::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
      // MarketDataIncrementalRefresh::NoMDEntries::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 42;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // MarketDataIncrementalRefresh::NoMDEntries::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
      // MarketDataIncrementalRefresh::NoMDEntries::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 46;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 457, new NoUnderlyingSecurityAltID },
                  { 887, new NoUnderlyingStips },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 457: return new NoUnderlyingSecurityAltID;
            case 887: return new NoUnderlyingStips;
            default: return nullptr;
            }
         }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // MarketDataIncrementalRefresh::NoMDEntries::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // MarketDataIncrementalRefresh::NoMDEntries::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // MarketDataIncrementalRefresh::NoMDEntries::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataRequestReject (Y), application, 6 fields, 1 group.
class MarketDataRequestReject : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 6;

public:
   explicit MarketDataRequestReject(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({816, new NoAltMDSource });
   }
   ~MarketDataRequestReject() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 816 ? new NoAltMDSource : nullptr; }

   /// NoAltMDSource (816), application, 1 field, 0 groups, is unique, hash: 0x80001b30
   // MarketDataRequestReject::NoAltMDSource
   class NoAltMDSource : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 816 };

      NoAltMDSource() : GroupBase(_fnum) {}
      ~NoAltMDSource() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteCancel (Z), application, 11 fields, 2 groups.
class QuoteCancel : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 11;

public:
   explicit QuoteCancel(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 295, new NoQuoteEntries },
            { 453, new NoPartyIDs },
         });
   }
   ~QuoteCancel() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 295: return new NoQuoteEntries;
      case 453: return new NoPartyIDs;
      default: return nullptr;
      }
   }

   /// NoQuoteEntries (295), application, 53 fields, 4 groups, is unique, hash: 0xf085a58b
   // QuoteCancel::NoQuoteEntries
   class NoQuoteEntries : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 53;

   public:
      enum { _fnum = 295 };

      NoQuoteEntries() : GroupBase(_fnum) {}
      ~NoQuoteEntries() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 711, new NoUnderlyings },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 454: return new NoSecurityAltID;
         case 555: return new NoLegs;
         case 711: return new NoUnderlyings;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // QuoteCancel::NoQuoteEntries::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
      // QuoteCancel::NoQuoteEntries::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 42;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({604, new NoLegSecurityAltID });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // QuoteCancel::NoQuoteEntries::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
      // QuoteCancel::NoQuoteEntries::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 46;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 457, new NoUnderlyingSecurityAltID },
                  { 887, new NoUnderlyingStips },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 457: return new NoUnderlyingSecurityAltID;
            case 887: return new NoUnderlyingStips;
            default: return nullptr;
            }
         }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // QuoteCancel::NoQuoteEntries::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // QuoteCancel::NoQuoteEntries::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // QuoteCancel::NoQuoteEntries::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // QuoteCancel::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // QuoteCancel::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteStatusRequest (a), application, 62 fields, 5 groups.
class QuoteStatusRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 62;

public:
   explicit QuoteStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 453, new NoPartyIDs },
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~QuoteStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 453: return new NoPartyIDs;
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // QuoteStatusRequest::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // QuoteStatusRequest::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // QuoteStatusRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // QuoteStatusRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // QuoteStatusRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // QuoteStatusRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // QuoteStatusRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // QuoteStatusRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // QuoteStatusRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MassQuoteAcknowledgement (b), application, 14 fields, 2 groups.
class MassQuoteAcknowledgement : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 14;

public:
   explicit MassQuoteAcknowledgement(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 296, new NoQuoteSets },
            { 453, new NoPartyIDs },
         });
   }
   ~MassQuoteAcknowledgement() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 296: return new NoQuoteSets;
      case 453: return new NoPartyIDs;
      default: return nullptr;
      }
   }

   /// NoQuoteSets (296), application, 50 fields, 3 groups, is unique, hash: 0x7919921c
   // MassQuoteAcknowledgement::NoQuoteSets
   class NoQuoteSets : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 50;

   public:
      enum { _fnum = 296 };

      NoQuoteSets() : GroupBase(_fnum) {}
      ~NoQuoteSets() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 295, new NoQuoteEntries },
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 295: return new NoQuoteEntries;
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoQuoteEntries (295), application, 68 fields, 3 groups, is unique, hash: 0x86b80070
      // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries
      class NoQuoteEntries : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait _traits[];
         static F8_TEX_API const FieldTrait_Hash_Array _ftha;
         static F8_TEX_API const MsgType _msgtype;
         static const unsigned _fieldcnt = 68;

      public:
         enum { _fnum = 295 };

         NoQuoteEntries() : GroupBase(_fnum) {}
         ~NoQuoteEntries() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 454, new NoSecurityAltID },
                  { 555, new NoLegs },
                  { 864, new NoEvents },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 454: return new NoSecurityAltID;
            case 555: return new NoLegs;
            case 864: return new NoEvents;
            default: return nullptr;
            }
         }

         /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
         // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoSecurityAltID
         class NoSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 454 };

            NoSecurityAltID() : GroupBase(_fnum) {}
            ~NoSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
         // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoLegs
         class NoLegs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 42;

         public:
            enum { _fnum = 555 };

            NoLegs() : GroupBase(_fnum) {}
            ~NoLegs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({604, new NoLegSecurityAltID });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

            /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
            // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoLegs::NoLegSecurityAltID
            class NoLegSecurityAltID : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 604 };

               NoLegSecurityAltID() : GroupBase(_fnum) {}
               ~NoLegSecurityAltID() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
         // MassQuoteAcknowledgement::NoQuoteSets::NoQuoteEntries::NoEvents
         class NoEvents : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 864 };

            NoEvents() : GroupBase(_fnum) {}
            ~NoEvents() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // MassQuoteAcknowledgement::NoQuoteSets::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // MassQuoteAcknowledgement::NoQuoteSets::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // MassQuoteAcknowledgement::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // MassQuoteAcknowledgement::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityDefinitionRequest (c), application, 57 fields, 5 groups.
class SecurityDefinitionRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 57;

public:
   explicit SecurityDefinitionRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
         });
   }
   ~SecurityDefinitionRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      case 870: return new NoInstrAttrib;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityDefinitionRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // SecurityDefinitionRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityDefinitionRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // SecurityDefinitionRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityDefinitionRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityDefinitionRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // SecurityDefinitionRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityDefinitionRequest::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityDefinition (d), application, 59 fields, 5 groups.
class SecurityDefinition : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 59;

public:
   explicit SecurityDefinition(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
         });
   }
   ~SecurityDefinition() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      case 870: return new NoInstrAttrib;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityDefinition::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // SecurityDefinition::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityDefinition::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // SecurityDefinition::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityDefinition::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityDefinition::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // SecurityDefinition::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityDefinition::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityStatusRequest (e), application, 52 fields, 5 groups.
class SecurityStatusRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 52;

public:
   explicit SecurityStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
         });
   }
   ~SecurityStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      case 870: return new NoInstrAttrib;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityStatusRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // SecurityStatusRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityStatusRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // SecurityStatusRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityStatusRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityStatusRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // SecurityStatusRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityStatusRequest::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityStatus (f), application, 68 fields, 5 groups.
class SecurityStatus : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 68;

public:
   explicit SecurityStatus(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
         });
   }
   ~SecurityStatus() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      case 870: return new NoInstrAttrib;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityStatus::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // SecurityStatus::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityStatus::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // SecurityStatus::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityStatus::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityStatus::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // SecurityStatus::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityStatus::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// TradingSessionStatusRequest (g), application, 6 fields, 0 groups.
class TradingSessionStatusRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 6;

public:
   explicit TradingSessionStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~TradingSessionStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// TradingSessionStatus (h), application, 17 fields, 0 groups.
class TradingSessionStatus : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 17;

public:
   explicit TradingSessionStatus(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~TradingSessionStatus() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// header (header), application, 27 fields, 1 group.
class header : public MessageBase
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 27;

   begin_string *_begin_string;
   body_length *_body_length;
   msg_type *_msg_type;

public:
   explicit header(bool deepctor=true) : MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha),
      _begin_string(new begin_string(ctx()._beginStr)), _body_length(new body_length), _msg_type(new msg_type) { add_preamble(); }
   ~header() = default;

   static const MsgType& get_msgtype() { return _msgtype; }

	begin_string *get_begin_string() { return _begin_string; };
	body_length *get_body_length() { return _body_length; };
	msg_type *get_msg_type() { return _msg_type; };

	void add_preamble()
	{
		add_field(Common_BeginString, 1, _begin_string, false);
		add_field(Common_BodyLength, 2, _body_length, false);
		add_field(Common_MsgType, 3, _msg_type, false);
	}
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 627 ? new NoHops : nullptr; }

   /// NoHops (627), application, 3 fields, 0 groups, is unique, hash: 0x7f240fc4
   // header::NoHops
   class NoHops : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 627 };

      NoHops() : GroupBase(_fnum) {}
      ~NoHops() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MassQuote (i), application, 11 fields, 2 groups.
class MassQuote : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 11;

public:
   explicit MassQuote(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 296, new NoQuoteSets },
            { 453, new NoPartyIDs },
         });
   }
   ~MassQuote() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 296: return new NoQuoteSets;
      case 453: return new NoPartyIDs;
      default: return nullptr;
      }
   }

   /// NoQuoteSets (296), application, 51 fields, 3 groups, is unique, hash: 0xec59cd81
   // MassQuote::NoQuoteSets
   class NoQuoteSets : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 51;

   public:
      enum { _fnum = 296 };

      NoQuoteSets() : GroupBase(_fnum) {}
      ~NoQuoteSets() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 295, new NoQuoteEntries },
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 295: return new NoQuoteEntries;
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoQuoteEntries (295), application, 67 fields, 3 groups, is unique, hash: 0x4d1a0785
      // MassQuote::NoQuoteSets::NoQuoteEntries
      class NoQuoteEntries : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait _traits[];
         static F8_TEX_API const FieldTrait_Hash_Array _ftha;
         static F8_TEX_API const MsgType _msgtype;
         static const unsigned _fieldcnt = 67;

      public:
         enum { _fnum = 295 };

         NoQuoteEntries() : GroupBase(_fnum) {}
         ~NoQuoteEntries() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 454, new NoSecurityAltID },
                  { 555, new NoLegs },
                  { 864, new NoEvents },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 454: return new NoSecurityAltID;
            case 555: return new NoLegs;
            case 864: return new NoEvents;
            default: return nullptr;
            }
         }

         /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
         // MassQuote::NoQuoteSets::NoQuoteEntries::NoSecurityAltID
         class NoSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 454 };

            NoSecurityAltID() : GroupBase(_fnum) {}
            ~NoSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
         // MassQuote::NoQuoteSets::NoQuoteEntries::NoLegs
         class NoLegs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 42;

         public:
            enum { _fnum = 555 };

            NoLegs() : GroupBase(_fnum) {}
            ~NoLegs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({604, new NoLegSecurityAltID });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

            /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
            // MassQuote::NoQuoteSets::NoQuoteEntries::NoLegs::NoLegSecurityAltID
            class NoLegSecurityAltID : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 604 };

               NoLegSecurityAltID() : GroupBase(_fnum) {}
               ~NoLegSecurityAltID() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };

         /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
         // MassQuote::NoQuoteSets::NoQuoteEntries::NoEvents
         class NoEvents : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 864 };

            NoEvents() : GroupBase(_fnum) {}
            ~NoEvents() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // MassQuote::NoQuoteSets::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // MassQuote::NoQuoteSets::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // MassQuote::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // MassQuote::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// BusinessMessageReject (j), application, 7 fields, 0 groups.
class BusinessMessageReject : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 7;

public:
   explicit BusinessMessageReject(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~BusinessMessageReject() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// BidRequest (k), application, 29 fields, 2 groups.
class BidRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 29;

public:
   explicit BidRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 398, new NoBidDescriptors },
            { 420, new NoBidComponents },
         });
   }
   ~BidRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 398: return new NoBidDescriptors;
      case 420: return new NoBidComponents;
      default: return nullptr;
      }
   }

   /// NoBidDescriptors (398), application, 11 fields, 0 groups, is unique, hash: 0x80e3528e
   // BidRequest::NoBidDescriptors
   class NoBidDescriptors : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 11;

   public:
      enum { _fnum = 398 };

      NoBidDescriptors() : GroupBase(_fnum) {}
      ~NoBidDescriptors() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoBidComponents (420), application, 9 fields, 0 groups, is unique, hash: 0xbb9cc9f3
   // BidRequest::NoBidComponents
   class NoBidComponents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 9;

   public:
      enum { _fnum = 420 };

      NoBidComponents() : GroupBase(_fnum) {}
      ~NoBidComponents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// BidResponse (l), application, 3 fields, 1 group.
class BidResponse : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 3;

public:
   explicit BidResponse(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({420, new NoBidComponents });
   }
   ~BidResponse() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 420 ? new NoBidComponents : nullptr; }

   /// NoBidComponents (420), application, 18 fields, 0 groups, is unique, hash: 0x7610cb63
   // BidResponse::NoBidComponents
   class NoBidComponents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 18;

   public:
      enum { _fnum = 420 };

      NoBidComponents() : GroupBase(_fnum) {}
      ~NoBidComponents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// ListStrikePrice (m), application, 5 fields, 2 groups.
class ListStrikePrice : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 5;

public:
   explicit ListStrikePrice(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 428, new NoStrikes },
            { 711, new NoUnderlyings },
         });
   }
   ~ListStrikePrice() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 428: return new NoStrikes;
      case 711: return new NoUnderlyings;
      default: return nullptr;
      }
   }

   /// NoStrikes (428), application, 42 fields, 2 groups, is unique, hash: 0x7854138a
   // ListStrikePrice::NoStrikes
   class NoStrikes : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 428 };

      NoStrikes() : GroupBase(_fnum) {}
      ~NoStrikes() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 454, new NoSecurityAltID },
               { 864, new NoEvents },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 454: return new NoSecurityAltID;
         case 864: return new NoEvents;
         default: return nullptr;
         }
      }

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // ListStrikePrice::NoStrikes::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // ListStrikePrice::NoStrikes::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 55 fields, 2 groups, is unique, hash: 0x374deaf1
   // ListStrikePrice::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 55;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // ListStrikePrice::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // ListStrikePrice::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// RegistrationInstructions (o), application, 12 fields, 3 groups.
class RegistrationInstructions : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 12;

public:
   explicit RegistrationInstructions(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 453, new NoPartyIDs },
            { 473, new NoRegistDtls },
            { 510, new NoDistribInsts },
         });
   }
   ~RegistrationInstructions() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 453: return new NoPartyIDs;
      case 473: return new NoRegistDtls;
      case 510: return new NoDistribInsts;
      default: return nullptr;
      }
   }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // RegistrationInstructions::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // RegistrationInstructions::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoRegistDtls (473), application, 8 fields, 1 group, is unique, hash: 0xffbc6e69
   // RegistrationInstructions::NoRegistDtls
   class NoRegistDtls : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 8;

   public:
      enum { _fnum = 473 };

      NoRegistDtls() : GroupBase(_fnum) {}
      ~NoRegistDtls() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({539, new NoNestedPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

      /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
      // RegistrationInstructions::NoRegistDtls::NoNestedPartyIDs
      class NoNestedPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 539 };

         NoNestedPartyIDs() : GroupBase(_fnum) {}
         ~NoNestedPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({804, new NoNestedPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

         /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
         // RegistrationInstructions::NoRegistDtls::NoNestedPartyIDs::NoNestedPartySubIDs
         class NoNestedPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 804 };

            NoNestedPartySubIDs() : GroupBase(_fnum) {}
            ~NoNestedPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoDistribInsts (510), application, 8 fields, 0 groups, is unique, hash: 0xaec1cd2b
   // RegistrationInstructions::NoDistribInsts
   class NoDistribInsts : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 8;

   public:
      enum { _fnum = 510 };

      NoDistribInsts() : GroupBase(_fnum) {}
      ~NoDistribInsts() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// RegistrationInstructionsResponse (p), application, 10 fields, 1 group.
class RegistrationInstructionsResponse : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 10;

public:
   explicit RegistrationInstructionsResponse(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({453, new NoPartyIDs });
   }
   ~RegistrationInstructionsResponse() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 453 ? new NoPartyIDs : nullptr; }

   /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
   // RegistrationInstructionsResponse::NoPartyIDs
   class NoPartyIDs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 453 };

      NoPartyIDs() : GroupBase(_fnum) {}
      ~NoPartyIDs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({802, new NoPartySubIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 802 ? new NoPartySubIDs : nullptr; }

      /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
      // RegistrationInstructionsResponse::NoPartyIDs::NoPartySubIDs
      class NoPartySubIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 802 };

         NoPartySubIDs() : GroupBase(_fnum) {}
         ~NoPartySubIDs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderMassCancelRequest (q), application, 98 fields, 4 groups.
class OrderMassCancelRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 98;

public:
   explicit OrderMassCancelRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 457, new NoUnderlyingSecurityAltID },
            { 864, new NoEvents },
            { 887, new NoUnderlyingStips },
         });
   }
   ~OrderMassCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 457: return new NoUnderlyingSecurityAltID;
      case 864: return new NoEvents;
      case 887: return new NoUnderlyingStips;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderMassCancelRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // OrderMassCancelRequest::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // OrderMassCancelRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // OrderMassCancelRequest::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderMassCancelReport (r), application, 104 fields, 5 groups.
class OrderMassCancelReport : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 104;

public:
   explicit OrderMassCancelReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 457, new NoUnderlyingSecurityAltID },
            { 534, new NoAffectedOrders },
            { 864, new NoEvents },
            { 887, new NoUnderlyingStips },
         });
   }
   ~OrderMassCancelReport() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 457: return new NoUnderlyingSecurityAltID;
      case 534: return new NoAffectedOrders;
      case 864: return new NoEvents;
      case 887: return new NoUnderlyingStips;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // OrderMassCancelReport::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // OrderMassCancelReport::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoAffectedOrders (534), application, 3 fields, 0 groups, is unique, hash: 0xb213de0
   // OrderMassCancelReport::NoAffectedOrders
   class NoAffectedOrders : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 534 };

      NoAffectedOrders() : GroupBase(_fnum) {}
      ~NoAffectedOrders() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // OrderMassCancelReport::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // OrderMassCancelReport::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderCross (s), application, 109 fields, 7 groups.
class NewOrderCross : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 109;

public:
   explicit NewOrderCross(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 232, new NoStipulations },
            { 386, new NoTradingSessions },
            { 454, new NoSecurityAltID },
            { 552, new NoSides },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~NewOrderCross() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 232: return new NoStipulations;
      case 386: return new NoTradingSessions;
      case 454: return new NoSecurityAltID;
      case 552: return new NoSides;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // NewOrderCross::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // NewOrderCross::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // NewOrderCross::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSides (552), application, 40 fields, 2 groups, is unique, hash: 0xe9304de7
   // NewOrderCross::NoSides
   class NoSides : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 40;

   public:
      enum { _fnum = 552 };

      NoSides() : GroupBase(_fnum) {}
      ~NoSides() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 78, new NoAllocs },
               { 453, new NoPartyIDs },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 78: return new NoAllocs;
         case 453: return new NoPartyIDs;
         default: return nullptr;
         }
      }

      /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
      // NewOrderCross::NoSides::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 6;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({539, new NoNestedPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // NewOrderCross::NoSides::NoAllocs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // NewOrderCross::NoSides::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // NewOrderCross::NoSides::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 802 ? new NoPartySubIDs : nullptr; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // NewOrderCross::NoSides::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // NewOrderCross::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // NewOrderCross::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // NewOrderCross::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // NewOrderCross::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // NewOrderCross::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // NewOrderCross::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// CrossOrderCancelReplaceRequest (t), application, 111 fields, 7 groups.
class CrossOrderCancelReplaceRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 111;

public:
   explicit CrossOrderCancelReplaceRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 232, new NoStipulations },
            { 386, new NoTradingSessions },
            { 454, new NoSecurityAltID },
            { 552, new NoSides },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~CrossOrderCancelReplaceRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 232: return new NoStipulations;
      case 386: return new NoTradingSessions;
      case 454: return new NoSecurityAltID;
      case 552: return new NoSides;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
   // CrossOrderCancelReplaceRequest::NoStipulations
   class NoStipulations : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 232 };

      NoStipulations() : GroupBase(_fnum) {}
      ~NoStipulations() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTradingSessions (386), application, 2 fields, 0 groups, shares static data, hash: 0x23290f55
   // CrossOrderCancelReplaceRequest::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CrossOrderCancelReplaceRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSides (552), application, 42 fields, 2 groups, is unique, hash: 0x2c7234ba
   // CrossOrderCancelReplaceRequest::NoSides
   class NoSides : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 552 };

      NoSides() : GroupBase(_fnum) {}
      ~NoSides() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 78, new NoAllocs },
               { 453, new NoPartyIDs },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 78: return new NoAllocs;
         case 453: return new NoPartyIDs;
         default: return nullptr;
         }
      }

      /// NoAllocs (78), application, 6 fields, 1 group, shares static data, hash: 0x210f1ab6
      // CrossOrderCancelReplaceRequest::NoSides::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 6;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({539, new NoNestedPartyIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 539 ? new NoNestedPartyIDs : nullptr; }

         /// NoNestedPartyIDs (539), application, 4 fields, 1 group, shares static data, hash: 0x797a0073
         // CrossOrderCancelReplaceRequest::NoSides::NoAllocs::NoNestedPartyIDs
         class NoNestedPartyIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 4;

         public:
            enum { _fnum = 539 };

            NoNestedPartyIDs() : GroupBase(_fnum) {}
            ~NoNestedPartyIDs() = default;
            MessageBase *create_group(bool deepctor) const
            {
               MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
               if (deepctor)
                  mb->get_groups().insert({804, new NoNestedPartySubIDs });
               return mb;
            }

            static const MsgType& get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const
               { return fnum == 804 ? new NoNestedPartySubIDs : nullptr; }

            /// NoNestedPartySubIDs (804), application, 2 fields, 0 groups, shares static data, hash: 0x2347438c
            // CrossOrderCancelReplaceRequest::NoSides::NoAllocs::NoNestedPartyIDs::NoNestedPartySubIDs
            class NoNestedPartySubIDs : public GroupBase // depth: 4
            {
               static F8_TEX_API const FieldTrait *_traits;
               static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
               static F8_TEX_API const MsgType& _msgtype;
               static const unsigned _fieldcnt = 2;

            public:
               enum { _fnum = 804 };

               NoNestedPartySubIDs() : GroupBase(_fnum) {}
               ~NoNestedPartySubIDs() = default;
               MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

               static const MsgType& get_msgtype() { return _msgtype; }
            };
         };
      };

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // CrossOrderCancelReplaceRequest::NoSides::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 802 ? new NoPartySubIDs : nullptr; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // CrossOrderCancelReplaceRequest::NoSides::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // CrossOrderCancelReplaceRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CrossOrderCancelReplaceRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // CrossOrderCancelReplaceRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CrossOrderCancelReplaceRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CrossOrderCancelReplaceRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // CrossOrderCancelReplaceRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// trailer (trailer), application, 3 fields, 0 groups.
class trailer : public MessageBase
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 3;

   check_sum *_check_sum;

public:
   explicit trailer(bool deepctor=true) : MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha),
      _check_sum(new check_sum) { add_preamble(); }
   ~trailer() = default;

   static const MsgType& get_msgtype() { return _msgtype; }

	check_sum *get_check_sum() { return _check_sum; };

	void add_preamble()
	{
		add_field(Common_CheckSum, 3, _check_sum, false);
	}
};

//-------------------------------------------------------------------------------------------------
/// CrossOrderCancelRequest (u), application, 51 fields, 5 groups.
class CrossOrderCancelRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 51;

public:
   explicit CrossOrderCancelRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 552, new NoSides },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
         });
   }
   ~CrossOrderCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 552: return new NoSides;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // CrossOrderCancelRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoSides (552), application, 18 fields, 1 group, is unique, hash: 0x4a9f9102
   // CrossOrderCancelRequest::NoSides
   class NoSides : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 18;

   public:
      enum { _fnum = 552 };

      NoSides() : GroupBase(_fnum) {}
      ~NoSides() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({453, new NoPartyIDs });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 453 ? new NoPartyIDs : nullptr; }

      /// NoPartyIDs (453), application, 4 fields, 1 group, shares static data, hash: 0xe5f4bbef
      // CrossOrderCancelRequest::NoSides::NoPartyIDs
      class NoPartyIDs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 453 };

         NoPartyIDs() : GroupBase(_fnum) {}
         ~NoPartyIDs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({802, new NoPartySubIDs });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
            { return fnum == 802 ? new NoPartySubIDs : nullptr; }

         /// NoPartySubIDs (802), application, 2 fields, 0 groups, shares static data, hash: 0x234206ea
         // CrossOrderCancelRequest::NoSides::NoPartyIDs::NoPartySubIDs
         class NoPartySubIDs : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 802 };

            NoPartySubIDs() : GroupBase(_fnum) {}
            ~NoPartySubIDs() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // CrossOrderCancelRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // CrossOrderCancelRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // CrossOrderCancelRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // CrossOrderCancelRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // CrossOrderCancelRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // CrossOrderCancelRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityTypeRequest (v), application, 9 fields, 0 groups.
class SecurityTypeRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 9;

public:
   explicit SecurityTypeRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~SecurityTypeRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// SecurityTypes (w), application, 12 fields, 1 group.
class SecurityTypes : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 12;

public:
   explicit SecurityTypes(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({558, new NoSecurityTypes });
   }
   ~SecurityTypes() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 558 ? new NoSecurityTypes : nullptr; }

   /// NoSecurityTypes (558), application, 4 fields, 0 groups, is unique, hash: 0xd5520a6e
   // SecurityTypes::NoSecurityTypes
   class NoSecurityTypes : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 558 };

      NoSecurityTypes() : GroupBase(_fnum) {}
      ~NoSecurityTypes() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityListRequest (x), application, 65 fields, 5 groups.
class SecurityListRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 65;

public:
   explicit SecurityListRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 454, new NoSecurityAltID },
            { 555, new NoLegs },
            { 711, new NoUnderlyings },
            { 864, new NoEvents },
            { 870, new NoInstrAttrib },
         });
   }
   ~SecurityListRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 454: return new NoSecurityAltID;
      case 555: return new NoLegs;
      case 711: return new NoUnderlyings;
      case 864: return new NoEvents;
      case 870: return new NoInstrAttrib;
      default: return nullptr;
      }
   }

   /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
   // SecurityListRequest::NoSecurityAltID
   class NoSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 454 };

      NoSecurityAltID() : GroupBase(_fnum) {}
      ~NoSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoLegs (555), application, 42 fields, 1 group, shares static data, hash: 0x465a94d2
   // SecurityListRequest::NoLegs
   class NoLegs : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 42;

   public:
      enum { _fnum = 555 };

      NoLegs() : GroupBase(_fnum) {}
      ~NoLegs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({604, new NoLegSecurityAltID });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 604 ? new NoLegSecurityAltID : nullptr; }

      /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
      // SecurityListRequest::NoLegs::NoLegSecurityAltID
      class NoLegSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 604 };

         NoLegSecurityAltID() : GroupBase(_fnum) {}
         ~NoLegSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
   // SecurityListRequest::NoUnderlyings
   class NoUnderlyings : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 46;

   public:
      enum { _fnum = 711 };

      NoUnderlyings() : GroupBase(_fnum) {}
      ~NoUnderlyings() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 457, new NoUnderlyingSecurityAltID },
               { 887, new NoUnderlyingStips },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 457: return new NoUnderlyingSecurityAltID;
         case 887: return new NoUnderlyingStips;
         default: return nullptr;
         }
      }

      /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
      // SecurityListRequest::NoUnderlyings::NoUnderlyingSecurityAltID
      class NoUnderlyingSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 457 };

         NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
         ~NoUnderlyingSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
      // SecurityListRequest::NoUnderlyings::NoUnderlyingStips
      class NoUnderlyingStips : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 887 };

         NoUnderlyingStips() : GroupBase(_fnum) {}
         ~NoUnderlyingStips() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
   // SecurityListRequest::NoEvents
   class NoEvents : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 864 };

      NoEvents() : GroupBase(_fnum) {}
      ~NoEvents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
   // SecurityListRequest::NoInstrAttrib
   class NoInstrAttrib : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 870 };

      NoInstrAttrib() : GroupBase(_fnum) {}
      ~NoInstrAttrib() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityList (y), application, 6 fields, 1 group.
class SecurityList : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 6;

public:
   explicit SecurityList(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({146, new NoRelatedSym });
   }
   ~SecurityList() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 146 ? new NoRelatedSym : nullptr; }

   /// NoRelatedSym (146), application, 80 fields, 6 groups, is unique, hash: 0xd7e02893
   // SecurityList::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait _traits[];
      static F8_TEX_API const FieldTrait_Hash_Array _ftha;
      static F8_TEX_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 80;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 232, new NoStipulations },
               { 454, new NoSecurityAltID },
               { 555, new NoLegs },
               { 711, new NoUnderlyings },
               { 864, new NoEvents },
               { 870, new NoInstrAttrib },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 232: return new NoStipulations;
         case 454: return new NoSecurityAltID;
         case 555: return new NoLegs;
         case 711: return new NoUnderlyings;
         case 864: return new NoEvents;
         case 870: return new NoInstrAttrib;
         default: return nullptr;
         }
      }

      /// NoStipulations (232), application, 2 fields, 0 groups, shares static data, hash: 0x231e1b39
      // SecurityList::NoRelatedSym::NoStipulations
      class NoStipulations : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 232 };

         NoStipulations() : GroupBase(_fnum) {}
         ~NoStipulations() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoSecurityAltID (454), application, 2 fields, 0 groups, shares static data, hash: 0x233bfebe
      // SecurityList::NoRelatedSym::NoSecurityAltID
      class NoSecurityAltID : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 454 };

         NoSecurityAltID() : GroupBase(_fnum) {}
         ~NoSecurityAltID() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoLegs (555), application, 50 fields, 2 groups, is unique, hash: 0x5e4564e6
      // SecurityList::NoRelatedSym::NoLegs
      class NoLegs : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait _traits[];
         static F8_TEX_API const FieldTrait_Hash_Array _ftha;
         static F8_TEX_API const MsgType _msgtype;
         static const unsigned _fieldcnt = 50;

      public:
         enum { _fnum = 555 };

         NoLegs() : GroupBase(_fnum) {}
         ~NoLegs() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 604, new NoLegSecurityAltID },
                  { 683, new NoLegStipulations },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 604: return new NoLegSecurityAltID;
            case 683: return new NoLegStipulations;
            default: return nullptr;
            }
         }

         /// NoLegSecurityAltID (604), application, 2 fields, 0 groups, shares static data, hash: 0x2348cd14
         // SecurityList::NoRelatedSym::NoLegs::NoLegSecurityAltID
         class NoLegSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 604 };

            NoLegSecurityAltID() : GroupBase(_fnum) {}
            ~NoLegSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoLegStipulations (683), application, 2 fields, 0 groups, shares static data, hash: 0x2355708d
         // SecurityList::NoRelatedSym::NoLegs::NoLegStipulations
         class NoLegStipulations : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 683 };

            NoLegStipulations() : GroupBase(_fnum) {}
            ~NoLegStipulations() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoUnderlyings (711), application, 46 fields, 2 groups, shares static data, hash: 0x1fa6658d
      // SecurityList::NoRelatedSym::NoUnderlyings
      class NoUnderlyings : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 46;

      public:
         enum { _fnum = 711 };

         NoUnderlyings() : GroupBase(_fnum) {}
         ~NoUnderlyings() = default;
         MessageBase *create_group(bool deepctor) const
         {
            MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
            if (deepctor)
               mb->get_groups().insert({
                  { 457, new NoUnderlyingSecurityAltID },
                  { 887, new NoUnderlyingStips },
               });
            return mb;
         }

         static const MsgType& get_msgtype() { return _msgtype; }

         GroupBase *create_nested_group(unsigned short fnum) const
         {
            switch(fnum)
            {
            case 457: return new NoUnderlyingSecurityAltID;
            case 887: return new NoUnderlyingStips;
            default: return nullptr;
            }
         }

         /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
         // SecurityList::NoRelatedSym::NoUnderlyings::NoUnderlyingSecurityAltID
         class NoUnderlyingSecurityAltID : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 457 };

            NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
            ~NoUnderlyingSecurityAltID() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };

         /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
         // SecurityList::NoRelatedSym::NoUnderlyings::NoUnderlyingStips
         class NoUnderlyingStips : public GroupBase // depth: 3
         {
            static F8_TEX_API const FieldTrait *_traits;
            static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
            static F8_TEX_API const MsgType& _msgtype;
            static const unsigned _fieldcnt = 2;

         public:
            enum { _fnum = 887 };

            NoUnderlyingStips() : GroupBase(_fnum) {}
            ~NoUnderlyingStips() = default;
            MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

            static const MsgType& get_msgtype() { return _msgtype; }
         };
      };

      /// NoEvents (864), application, 4 fields, 0 groups, shares static data, hash: 0x939dc2f1
      // SecurityList::NoRelatedSym::NoEvents
      class NoEvents : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 4;

      public:
         enum { _fnum = 864 };

         NoEvents() : GroupBase(_fnum) {}
         ~NoEvents() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoInstrAttrib (870), application, 2 fields, 0 groups, shares static data, hash: 0x236faa16
      // SecurityList::NoRelatedSym::NoInstrAttrib
      class NoInstrAttrib : public GroupBase // depth: 2
      {
         static F8_TEX_API const FieldTrait *_traits;
         static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
         static F8_TEX_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 870 };

         NoInstrAttrib() : GroupBase(_fnum) {}
         ~NoInstrAttrib() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// DerivativeSecurityListRequest (z), application, 56 fields, 2 groups.
class DerivativeSecurityListRequest : public Message
{
   static F8_TEX_API const FieldTrait _traits[];
   static F8_TEX_API const FieldTrait_Hash_Array _ftha; 
   static F8_TEX_API const MsgType _msgtype;
   static F8_TEX_API const unsigned _fieldcnt = 56;

public:
   explicit DerivativeSecurityListRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 457, new NoUnderlyingSecurityAltID },
            { 887, new NoUnderlyingStips },
         });
   }
   ~DerivativeSecurityListRequest() = default;
   bool process(Router& rt) const { return (static_cast<Texfix_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 457: return new NoUnderlyingSecurityAltID;
      case 887: return new NoUnderlyingStips;
      default: return nullptr;
      }
   }

   /// NoUnderlyingSecurityAltID (457), application, 2 fields, 0 groups, shares static data, hash: 0x233a5f13
   // DerivativeSecurityListRequest::NoUnderlyingSecurityAltID
   class NoUnderlyingSecurityAltID : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 457 };

      NoUnderlyingSecurityAltID() : GroupBase(_fnum) {}
      ~NoUnderlyingSecurityAltID() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoUnderlyingStips (887), application, 2 fields, 0 groups, shares static data, hash: 0x236c49ff
   // DerivativeSecurityListRequest::NoUnderlyingStips
   class NoUnderlyingStips : public GroupBase // depth: 1
   {
      static F8_TEX_API const FieldTrait *_traits;
      static F8_TEX_API const FieldTrait_Hash_Array& _ftha;
      static F8_TEX_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 887 };

      NoUnderlyingStips() : GroupBase(_fnum) {}
      ~NoUnderlyingStips() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------

} // namespace TEX
} // namespace FIX8
#endif // FIX8_5465786669785F636C61737365732E687070_
