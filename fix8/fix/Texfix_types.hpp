//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2019-09-19 20:22:18 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-19 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16793600L
#error Texfix_types.hpp version 1.4.0 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// Texfix_types.hpp
//-------------------------------------------------------------------------------------------------
#ifndef FIX8_5465786669785F74797065732E687070_
#define FIX8_5465786669785F74797065732E687070_

namespace FIX8 {
namespace TEX {

//-------------------------------------------------------------------------------------------------
using Account = Field<f8String, 1>;
//-------------------------------------------------------------------------------------------------
using AdvId = Field<f8String, 2>;
//-------------------------------------------------------------------------------------------------
using AdvRefID = Field<f8String, 3>;
//-------------------------------------------------------------------------------------------------
using AdvSide = Field<char, 4>;
const char AdvSide_BUY('B');
const char AdvSide_SELL('S');
const char AdvSide_TRADE('T');
const char AdvSide_CROSS('X');
const size_t AdvSide_realm_els(4);
//-------------------------------------------------------------------------------------------------
using AdvTransType = Field<f8String, 5>;
const f8String AdvTransType_ADVCANCEL("C");
const f8String AdvTransType_ADVNEW("N");
const f8String AdvTransType_ADVREPLACE("R");
const size_t AdvTransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using AvgPx = Field<price, 6>;
//-------------------------------------------------------------------------------------------------
using BeginSeqNo = Field<SeqNum, 7>;
//-------------------------------------------------------------------------------------------------
using BeginString = Field<f8String, 8>;
//-------------------------------------------------------------------------------------------------
using BodyLength = Field<Length, 9>;
//-------------------------------------------------------------------------------------------------
using CheckSum = Field<f8String, 10>;
//-------------------------------------------------------------------------------------------------
using ClOrdID = Field<f8String, 11>;
//-------------------------------------------------------------------------------------------------
using Commission = Field<Amt, 12>;
//-------------------------------------------------------------------------------------------------
using CommType = Field<char, 13>;
const char CommType_PER_UNIT('1');
const char CommType_PERCENT('2');
const char CommType_ABSOLUTE('3');
const char CommType_PCTWAIVEDCSHDISC('4');
const char CommType_PCTWAIVEDENUNITS('5');
const char CommType_PERBOND('6');
const size_t CommType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using CumQty = Field<Qty, 14>;
//-------------------------------------------------------------------------------------------------
using Currency = Field<currency, 15>;
//-------------------------------------------------------------------------------------------------
using EndSeqNo = Field<SeqNum, 16>;
//-------------------------------------------------------------------------------------------------
using ExecID = Field<f8String, 17>;
//-------------------------------------------------------------------------------------------------
using ExecInst = Field<MultipleStringValue, 18>;
const f8String ExecInst_STAYOFFER("0");
const f8String ExecInst_NOTHELD("1");
const f8String ExecInst_WORK("2");
const f8String ExecInst_GOALONG("3");
const f8String ExecInst_OVERDAY("4");
const f8String ExecInst_HELD("5");
const f8String ExecInst_PARTNOTINIT("6");
const f8String ExecInst_STRICTSCALE("7");
const f8String ExecInst_TRYTOSCALE("8");
const f8String ExecInst_STAYBID("9");
const f8String ExecInst_NOCROSS("A");
const f8String ExecInst_OKCROSS("B");
const f8String ExecInst_CALLFIRST("C");
const f8String ExecInst_PERCVOL("D");
const f8String ExecInst_DNI("E");
const f8String ExecInst_DNR("F");
const f8String ExecInst_AON("G");
const f8String ExecInst_RESTATEONSYSFAIL("H");
const f8String ExecInst_INSTITONLY("I");
const f8String ExecInst_RESTATEONTRADINGHALT("J");
const f8String ExecInst_CANCELONTRADINGHALT("K");
const f8String ExecInst_LASTPEG("L");
const f8String ExecInst_MIDPRCPEG("M");
const f8String ExecInst_NONNEGO("N");
const f8String ExecInst_OPENPEG("O");
const f8String ExecInst_MARKPEG("P");
const f8String ExecInst_CANCELONSYSFAIL("Q");
const f8String ExecInst_PRIMPEG("R");
const f8String ExecInst_SUSPEND("S");
const f8String ExecInst_CUSTDISPINST("U");
const f8String ExecInst_NETTING("V");
const f8String ExecInst_PEGVWAP("W");
const f8String ExecInst_TRADEALONG("X");
const f8String ExecInst_TRYTOSTOP("Y");
const f8String ExecInst_CXLIFNOTBEST("Z");
const f8String ExecInst_TRAILSTOPPEG("a");
const f8String ExecInst_STRICTLIMIT("b");
const f8String ExecInst_IGNOREPRICECHK("c");
const f8String ExecInst_PEGTOLIMIT("d");
const f8String ExecInst_WORKTOSTRATEGY("e");
const size_t ExecInst_realm_els(40);
//-------------------------------------------------------------------------------------------------
using ExecRefID = Field<f8String, 19>;
//-------------------------------------------------------------------------------------------------
using HandlInst = Field<char, 21>;
const char HandlInst_AUTOEXECPRIV('1');
const char HandlInst_AUTOEXECPUB('2');
const char HandlInst_MANUAL('3');
const size_t HandlInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using SecurityIDSource = Field<f8String, 22>;
const f8String SecurityIDSource_CUSIP("1");
const f8String SecurityIDSource_SEDOL("2");
const f8String SecurityIDSource_QUIK("3");
const f8String SecurityIDSource_ISIN("4");
const f8String SecurityIDSource_RIC("5");
const f8String SecurityIDSource_ISOCURR("6");
const f8String SecurityIDSource_ISOCOUNTRY("7");
const f8String SecurityIDSource_EXCHSYMB("8");
const f8String SecurityIDSource_CTA("9");
const f8String SecurityIDSource_BLMBRG("A");
const f8String SecurityIDSource_WERTPAPIER("B");
const f8String SecurityIDSource_DUTCH("C");
const f8String SecurityIDSource_VALOREN("D");
const f8String SecurityIDSource_SICOVAM("E");
const f8String SecurityIDSource_BELGIAN("F");
const f8String SecurityIDSource_COMMON("G");
const f8String SecurityIDSource_CLEARINGHOUSE("H");
const f8String SecurityIDSource_FPML("I");
const f8String SecurityIDSource_OPTIONPRICEREPORTINGAUTHORITY("J");
const size_t SecurityIDSource_realm_els(19);
//-------------------------------------------------------------------------------------------------
using IOIID = Field<f8String, 23>;
//-------------------------------------------------------------------------------------------------
using IOIQltyInd = Field<char, 25>;
const char IOIQltyInd_HIGH('H');
const char IOIQltyInd_LOW('L');
const char IOIQltyInd_MEDIUM('M');
const size_t IOIQltyInd_realm_els(3);
//-------------------------------------------------------------------------------------------------
using IOIRefID = Field<f8String, 26>;
//-------------------------------------------------------------------------------------------------
using IOIQty = Field<f8String, 27>;
//-------------------------------------------------------------------------------------------------
using IOITransType = Field<char, 28>;
const char IOITransType_CANCEL('C');
const char IOITransType_NEW('N');
const char IOITransType_REPLACE('R');
const size_t IOITransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using LastCapacity = Field<char, 29>;
const char LastCapacity_A('1');
const char LastCapacity_XA('2');
const char LastCapacity_XP('3');
const char LastCapacity_P('4');
const size_t LastCapacity_realm_els(4);
//-------------------------------------------------------------------------------------------------
using LastMkt = Field<Exchange, 30>;
//-------------------------------------------------------------------------------------------------
using LastPx = Field<price, 31>;
//-------------------------------------------------------------------------------------------------
using LastQty = Field<Qty, 32>;
//-------------------------------------------------------------------------------------------------
using NoLinesOfText = Field<NumInGroup, 33>;
//-------------------------------------------------------------------------------------------------
using MsgSeqNum = Field<SeqNum, 34>;
//-------------------------------------------------------------------------------------------------
using MsgType = Field<f8String, 35>;
const f8String MsgType_HEARTBEAT("0");
const f8String MsgType_TESTREQUEST("1");
const f8String MsgType_RESENDREQUEST("2");
const f8String MsgType_REJECT("3");
const f8String MsgType_SEQUENCERESET("4");
const f8String MsgType_LOGOUT("5");
const f8String MsgType_IOI("6");
const f8String MsgType_ADVERTISEMENT("7");
const f8String MsgType_EXECUTIONREPORT("8");
const f8String MsgType_ORDERCANCELREJECT("9");
const f8String MsgType_LOGON("A");
const f8String MsgType_DERIVATIVESECURITYLIST("AA");
const f8String MsgType_NEWORDERMULTILEG("AB");
const f8String MsgType_MULTILEGORDERCANCELREPLACE("AC");
const f8String MsgType_TRADECAPTUREREPORTREQUEST("AD");
const f8String MsgType_TRADECAPTUREREPORT("AE");
const f8String MsgType_ORDERMASSSTATUSREQUEST("AF");
const f8String MsgType_QUOTEREQUESTREJECT("AG");
const f8String MsgType_RFQREQUEST("AH");
const f8String MsgType_QUOTESTATUSREPORT("AI");
const f8String MsgType_QUOTERESPONSE("AJ");
const f8String MsgType_CONFIRMATION("AK");
const f8String MsgType_POSITIONMAINTENANCEREQUEST("AL");
const f8String MsgType_POSITIONMAINTENANCEREPORT("AM");
const f8String MsgType_REQUESTFORPOSITIONS("AN");
const f8String MsgType_REQUESTFORPOSITIONSACK("AO");
const f8String MsgType_POSITIONREPORT("AP");
const f8String MsgType_TRADECAPTUREREPORTREQUESTACK("AQ");
const f8String MsgType_TRADECAPTUREREPORTACK("AR");
const f8String MsgType_ALLOCATIONREPORT("AS");
const f8String MsgType_ALLOCATIONREPORTACK("AT");
const f8String MsgType_CONFIRMATIONACK("AU");
const f8String MsgType_SETTLEMENTINSTRUCTIONREQUEST("AV");
const f8String MsgType_ASSIGNMENTREPORT("AW");
const f8String MsgType_COLLATERALREQUEST("AX");
const f8String MsgType_COLLATERALASSIGNMENT("AY");
const f8String MsgType_COLLATERALRESPONSE("AZ");
const f8String MsgType_NEWS("B");
const f8String MsgType_COLLATERALREPORT("BA");
const f8String MsgType_COLLATERALINQUIRY("BB");
const f8String MsgType_NETWORKCOUNTERPARTYSYSTEMSTATUSREQUEST("BC");
const f8String MsgType_NETWORKCOUNTERPARTYSYSTEMSTATUSRESPONSE("BD");
const f8String MsgType_USERREQUEST("BE");
const f8String MsgType_USERRESPONSE("BF");
const f8String MsgType_COLLATERALINQUIRYACK("BG");
const f8String MsgType_CONFIRMATIONREQUEST("BH");
const f8String MsgType_EMAIL("C");
const f8String MsgType_NEWORDERSINGLE("D");
const f8String MsgType_NEWORDERLIST("E");
const f8String MsgType_ORDERCANCELREQUEST("F");
const f8String MsgType_ORDERCANCELREPLACEREQUEST("G");
const f8String MsgType_ORDERSTATUSREQUEST("H");
const f8String MsgType_ALLOCATIONINSTRUCTION("J");
const f8String MsgType_LISTCANCELREQUEST("K");
const f8String MsgType_LISTEXECUTE("L");
const f8String MsgType_LISTSTATUSREQUEST("M");
const f8String MsgType_LISTSTATUS("N");
const f8String MsgType_ALLOCATIONINSTRUCTIONACK("P");
const f8String MsgType_DONTKNOWTRADEDK("Q");
const f8String MsgType_QUOTEREQUEST("R");
const f8String MsgType_QUOTE("S");
const f8String MsgType_SETTLEMENTINSTRUCTIONS("T");
const f8String MsgType_MARKETDATAREQUEST("V");
const f8String MsgType_MARKETDATASNAPSHOTFULLREFRESH("W");
const f8String MsgType_MARKETDATAINCREMENTALREFRESH("X");
const f8String MsgType_MARKETDATAREQUESTREJECT("Y");
const f8String MsgType_QUOTECANCEL("Z");
const f8String MsgType_QUOTESTATUSREQUEST("a");
const f8String MsgType_MASSQUOTEACKNOWLEDGEMENT("b");
const f8String MsgType_SECURITYDEFINITIONREQUEST("c");
const f8String MsgType_SECURITYDEFINITION("d");
const f8String MsgType_SECURITYSTATUSREQUEST("e");
const f8String MsgType_SECURITYSTATUS("f");
const f8String MsgType_TRADINGSESSIONSTATUSREQUEST("g");
const f8String MsgType_TRADINGSESSIONSTATUS("h");
const f8String MsgType_MASSQUOTE("i");
const f8String MsgType_BUSINESSMESSAGEREJECT("j");
const f8String MsgType_BIDREQUEST("k");
const f8String MsgType_BIDRESPONSE("l");
const f8String MsgType_LISTSTRIKEPRICE("m");
const f8String MsgType_XMLNONFIX("n");
const f8String MsgType_REGISTRATIONINSTRUCTIONS("o");
const f8String MsgType_REGISTRATIONINSTRUCTIONSRESPONSE("p");
const f8String MsgType_ORDERMASSCANCELREQUEST("q");
const f8String MsgType_ORDERMASSCANCELREPORT("r");
const f8String MsgType_NEWORDERCROSS("s");
const f8String MsgType_CROSSORDERCANCELREPLACEREQUEST("t");
const f8String MsgType_CROSSORDERCANCELREQUEST("u");
const f8String MsgType_SECURITYTYPEREQUEST("v");
const f8String MsgType_SECURITYTYPES("w");
const f8String MsgType_SECURITYLISTREQUEST("x");
const f8String MsgType_SECURITYLIST("y");
const f8String MsgType_DERIVATIVESECURITYLISTREQUEST("z");
const size_t MsgType_realm_els(93);
//-------------------------------------------------------------------------------------------------
using NewSeqNo = Field<SeqNum, 36>;
//-------------------------------------------------------------------------------------------------
using OrderID = Field<f8String, 37>;
//-------------------------------------------------------------------------------------------------
using OrderQty = Field<Qty, 38>;
//-------------------------------------------------------------------------------------------------
using OrdStatus = Field<char, 39>;
const char OrdStatus_NEW('0');
const char OrdStatus_PARTIAL('1');
const char OrdStatus_FILLED('2');
const char OrdStatus_DONE('3');
const char OrdStatus_CANCELED('4');
const char OrdStatus_PENDING_CANCEL('6');
const char OrdStatus_STOPPED('7');
const char OrdStatus_REJECTED('8');
const char OrdStatus_SUSPENDED('9');
const char OrdStatus_PENDINGNEW('A');
const char OrdStatus_CALCULATED('B');
const char OrdStatus_EXPIRED('C');
const char OrdStatus_ACCEPTBIDDING('D');
const char OrdStatus_PENDINGREP('E');
const size_t OrdStatus_realm_els(14);
//-------------------------------------------------------------------------------------------------
using OrdType = Field<char, 40>;
const char OrdType_MARKET('1');
const char OrdType_LIMIT('2');
const char OrdType_STOP('3');
const char OrdType_STOPLIMIT('4');
const char OrdType_MARKETONCLOSE('5');
const char OrdType_WITHORWITHOUT('6');
const char OrdType_LIMITORBETTER('7');
const char OrdType_LIMITWITHORWITHOUT('8');
const char OrdType_ONBASIS('9');
const char OrdType_ONCLOSE('A');
const char OrdType_LIMITONCLOSE('B');
const char OrdType_FOREXMARKET('C');
const char OrdType_PREVIOUSLYQUOTED('D');
const char OrdType_PREVIOUSLYINDICATED('E');
const char OrdType_FOREXLIMIT('F');
const char OrdType_FOREXSWAP('G');
const char OrdType_FOREXPREVIOUSLYQUOTED('H');
const char OrdType_FUNARI('I');
const char OrdType_MARKETIFTOUCHED('J');
const char OrdType_MARKETWITHLEFTOVERLIMIT('K');
const char OrdType_PREVIOUSFUNDVALUATIONPOINT('L');
const char OrdType_NEXTFUNDVALUATIONPOINT('M');
const char OrdType_PEGGED('P');
const size_t OrdType_realm_els(23);
//-------------------------------------------------------------------------------------------------
using OrigClOrdID = Field<f8String, 41>;
//-------------------------------------------------------------------------------------------------
using OrigTime = Field<UTCTimestamp, 42>;
//-------------------------------------------------------------------------------------------------
using PossDupFlag = Field<Boolean, 43>;
const char PossDupFlag_NO('N');
const char PossDupFlag_YES('Y');
const size_t PossDupFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using Price = Field<price, 44>;
//-------------------------------------------------------------------------------------------------
using RefSeqNum = Field<SeqNum, 45>;
//-------------------------------------------------------------------------------------------------
using SecurityID = Field<f8String, 48>;
//-------------------------------------------------------------------------------------------------
using SenderCompID = Field<f8String, 49>;
//-------------------------------------------------------------------------------------------------
using SenderSubID = Field<f8String, 50>;
//-------------------------------------------------------------------------------------------------
using SendingTime = Field<UTCTimestamp, 52>;
//-------------------------------------------------------------------------------------------------
using Quantity = Field<Qty, 53>;
//-------------------------------------------------------------------------------------------------
using Side = Field<char, 54>;
const char Side_BUY('1');
const char Side_SELL('2');
const char Side_BUYMIN('3');
const char Side_SELLPLUS('4');
const char Side_SELLSHT('5');
const char Side_SELLSHTEX('6');
const char Side_UNDISC('7');
const char Side_CROSS('8');
const char Side_CROSSSHORT('9');
const char Side_CROSSSHORTEX('A');
const char Side_ASDEFINED('B');
const char Side_OPPOSITE('C');
const char Side_SUBSCRIBE('D');
const char Side_REDEEM('E');
const char Side_LENDFINANCING('F');
const char Side_BORROWFINANCING('G');
const size_t Side_realm_els(16);
//-------------------------------------------------------------------------------------------------
using Symbol = Field<f8String, 55>;
//-------------------------------------------------------------------------------------------------
using TargetCompID = Field<f8String, 56>;
//-------------------------------------------------------------------------------------------------
using TargetSubID = Field<f8String, 57>;
//-------------------------------------------------------------------------------------------------
using Text = Field<f8String, 58>;
//-------------------------------------------------------------------------------------------------
using TimeInForce = Field<char, 59>;
const char TimeInForce_DAY('0');
const char TimeInForce_GOODTILLCANCEL('1');
const char TimeInForce_ATTHEOPENING('2');
const char TimeInForce_IMMEDIATEORCANCEL('3');
const char TimeInForce_FILLORKILL('4');
const char TimeInForce_GOODTILLCROSSING('5');
const char TimeInForce_GOODTILLDATE('6');
const char TimeInForce_ATTHECLOSE('7');
const size_t TimeInForce_realm_els(8);
//-------------------------------------------------------------------------------------------------
using TransactTime = Field<UTCTimestamp, 60>;
//-------------------------------------------------------------------------------------------------
using Urgency = Field<char, 61>;
const char Urgency_NORMAL('0');
const char Urgency_FLASH('1');
const char Urgency_BACKGROUND('2');
const size_t Urgency_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ValidUntilTime = Field<UTCTimestamp, 62>;
//-------------------------------------------------------------------------------------------------
using SettlType = Field<char, 63>;
const char SettlType_REGULAR('0');
const char SettlType_CASH('1');
const char SettlType_NEXTDAY('2');
const char SettlType_T2('3');
const char SettlType_T3('4');
const char SettlType_T4('5');
const char SettlType_FUTURE('6');
const char SettlType_WHENISSUED('7');
const char SettlType_T5('8');
const char SettlType_T1('9');
const size_t SettlType_realm_els(10);
//-------------------------------------------------------------------------------------------------
using SettlDate = Field<LocalMktDate, 64>;
//-------------------------------------------------------------------------------------------------
using SymbolSfx = Field<f8String, 65>;
const f8String SymbolSfx_EUCPLUMPSUMINTEREST("CD");
const f8String SymbolSfx_WHENISSUED("WI");
const size_t SymbolSfx_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ListID = Field<f8String, 66>;
//-------------------------------------------------------------------------------------------------
using ListSeqNo = Field<int, 67>;
//-------------------------------------------------------------------------------------------------
using TotNoOrders = Field<int, 68>;
//-------------------------------------------------------------------------------------------------
using ListExecInst = Field<f8String, 69>;
//-------------------------------------------------------------------------------------------------
using AllocID = Field<f8String, 70>;
//-------------------------------------------------------------------------------------------------
using AllocTransType = Field<char, 71>;
const char AllocTransType_NEW('0');
const char AllocTransType_REPLACE('1');
const char AllocTransType_CANCEL('2');
const char AllocTransType_PRELIMINARY('3');
const char AllocTransType_CALCULATED('4');
const char AllocTransType_CALCULATEDWITHOUTPRELIMINARY('5');
const size_t AllocTransType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using RefAllocID = Field<f8String, 72>;
//-------------------------------------------------------------------------------------------------
using NoOrders = Field<NumInGroup, 73>;
//-------------------------------------------------------------------------------------------------
using AvgPxPrecision = Field<int, 74>;
//-------------------------------------------------------------------------------------------------
using TradeDate = Field<LocalMktDate, 75>;
//-------------------------------------------------------------------------------------------------
using PositionEffect = Field<char, 77>;
const char PositionEffect_CLOSE('C');
const char PositionEffect_FIFO('F');
const char PositionEffect_OPEN('O');
const char PositionEffect_ROLLED('R');
const size_t PositionEffect_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NoAllocs = Field<NumInGroup, 78>;
//-------------------------------------------------------------------------------------------------
using AllocAccount = Field<f8String, 79>;
//-------------------------------------------------------------------------------------------------
using AllocQty = Field<Qty, 80>;
//-------------------------------------------------------------------------------------------------
using ProcessCode = Field<char, 81>;
const char ProcessCode_REGULAR('0');
const char ProcessCode_SOFTDOLLAR('1');
const char ProcessCode_STEPIN('2');
const char ProcessCode_STEPOUT('3');
const char ProcessCode_STEPINSOFT('4');
const char ProcessCode_STEPOUTSOFT('5');
const char ProcessCode_PLANSPONSOR('6');
const size_t ProcessCode_realm_els(7);
//-------------------------------------------------------------------------------------------------
using NoRpts = Field<int, 82>;
//-------------------------------------------------------------------------------------------------
using RptSeq = Field<int, 83>;
//-------------------------------------------------------------------------------------------------
using CxlQty = Field<Qty, 84>;
//-------------------------------------------------------------------------------------------------
using NoDlvyInst = Field<NumInGroup, 85>;
//-------------------------------------------------------------------------------------------------
using AllocStatus = Field<int, 87>;
const int AllocStatus_ACCEPTEDSUCCESSFULLYPROCESSED(0);
const int AllocStatus_BLOCKLEVELREJECT(1);
const int AllocStatus_ACCOUNTLEVELREJECT(2);
const int AllocStatus_RECEIVEDRECEIVEDNOTYETPROCESSED(3);
const int AllocStatus_INCOMPLETE(4);
const int AllocStatus_REJECTEDBYINTERMEDIARY(5);
const size_t AllocStatus_realm_els(6);
//-------------------------------------------------------------------------------------------------
using AllocRejCode = Field<int, 88>;
const int AllocRejCode_UNKNOWNACCT(0);
const int AllocRejCode_INCORRECTQTY(1);
const int AllocRejCode_INCORRECTAVGPRC(2);
const int AllocRejCode_INCORRECTBRKMNC(3);
const int AllocRejCode_COMMDIFF(4);
const int AllocRejCode_UNKNOWNORDID(5);
const int AllocRejCode_UNKNOWNLISTID(6);
const int AllocRejCode_OTHER(7);
const int AllocRejCode_INCORRECTALLOCATEDQUANTITY(8);
const int AllocRejCode_CALCULATIONDIFFERENCE(9);
const int AllocRejCode_UNKNOWNORSTALEEXECID(10);
const int AllocRejCode_MISMATCHEDDATA(11);
const int AllocRejCode_UNKNOWNCLORDID(12);
const int AllocRejCode_WAREHOUSEREQUESTREJECTED(13);
const size_t AllocRejCode_realm_els(14);
//-------------------------------------------------------------------------------------------------
using Signature = Field<data, 89>;
//-------------------------------------------------------------------------------------------------
using SecureDataLen = Field<Length, 90>;
//-------------------------------------------------------------------------------------------------
using SecureData = Field<data, 91>;
//-------------------------------------------------------------------------------------------------
using SignatureLength = Field<Length, 93>;
//-------------------------------------------------------------------------------------------------
using EmailType = Field<char, 94>;
const char EmailType_NEW('0');
const char EmailType_REPLY('1');
const char EmailType_ADMINREPLY('2');
const size_t EmailType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using RawDataLength = Field<Length, 95>;
//-------------------------------------------------------------------------------------------------
using RawData = Field<data, 96>;
//-------------------------------------------------------------------------------------------------
using PossResend = Field<Boolean, 97>;
const char PossResend_NO('N');
const char PossResend_YES('Y');
const size_t PossResend_realm_els(2);
//-------------------------------------------------------------------------------------------------
using EncryptMethod = Field<int, 98>;
const int EncryptMethod_NONEOTHER(0);
const int EncryptMethod_PKCSPROPRIETARY(1);
const int EncryptMethod_DESECBMODE(2);
const int EncryptMethod_PKCSDESPROPRIETARY(3);
const int EncryptMethod_PGPDESDEFUNCT(4);
const int EncryptMethod_PGPDESMD5SEEAPPNOTEONFIXWEBSITE(5);
const int EncryptMethod_PEMDESMD5SEEAPPNOTEONFIXWEBSITENAFORFIXMLNOTUSED(6);
const size_t EncryptMethod_realm_els(7);
//-------------------------------------------------------------------------------------------------
using StopPx = Field<price, 99>;
//-------------------------------------------------------------------------------------------------
using ExDestination = Field<Exchange, 100>;
//-------------------------------------------------------------------------------------------------
using CxlRejReason = Field<int, 102>;
const int CxlRejReason_TOOLATE(0);
const int CxlRejReason_UNKNOWN(1);
const int CxlRejReason_BROKEROPT(2);
const int CxlRejReason_ALREADYPENDINGCXL(3);
const int CxlRejReason_UNABLETOPROCESS(4);
const int CxlRejReason_ORIGORDMODTIMEMISMATCH(5);
const int CxlRejReason_DUPCLORDID(6);
const int CxlRejReason_OTHER(99);
const size_t CxlRejReason_realm_els(8);
//-------------------------------------------------------------------------------------------------
using OrdRejReason = Field<int, 103>;
const int OrdRejReason_BROKEROPT(0);
const int OrdRejReason_UNKNOWNSYM(1);
const int OrdRejReason_EXCHCLOSED(2);
const int OrdRejReason_EXCEEDSLIM(3);
const int OrdRejReason_TOOLATE(4);
const int OrdRejReason_UNKNOWN(5);
const int OrdRejReason_DUPLICATE(6);
const int OrdRejReason_DUPLICATEVERBAL(7);
const int OrdRejReason_STALE(8);
const int OrdRejReason_TRADEALONGREQ(9);
const int OrdRejReason_INVINVID(10);
const int OrdRejReason_UNSUPPORDERCHAR(11);
const int OrdRejReason_SURVEILLENCE(12);
const int OrdRejReason_INCORRECTQUANTITY(13);
const int OrdRejReason_INCORRECTALLOCATEDQUANTITY(14);
const int OrdRejReason_UNKNOWNACCOUNTS(15);
const int OrdRejReason_OTHER(99);
const size_t OrdRejReason_realm_els(17);
//-------------------------------------------------------------------------------------------------
using IOIQualifier = Field<char, 104>;
const char IOIQualifier_AON('A');
const char IOIQualifier_MOC('B');
const char IOIQualifier_ATCLOSE('C');
const char IOIQualifier_VWAP('D');
const char IOIQualifier_INTOUCH('I');
const char IOIQualifier_LIMIT('L');
const char IOIQualifier_MOREBEHIND('M');
const char IOIQualifier_ATOPEN('O');
const char IOIQualifier_TAKEPOSITION('P');
const char IOIQualifier_ATMARKET('Q');
const char IOIQualifier_READYTRADE('R');
const char IOIQualifier_PORTSHOW('S');
const char IOIQualifier_THROUGHDAY('T');
const char IOIQualifier_VERSUS('V');
const char IOIQualifier_INDWRKAWAY('W');
const char IOIQualifier_CROSSOPP('X');
const char IOIQualifier_ATMID('Y');
const char IOIQualifier_PREOPEN('Z');
const size_t IOIQualifier_realm_els(18);
//-------------------------------------------------------------------------------------------------
using Issuer = Field<f8String, 106>;
//-------------------------------------------------------------------------------------------------
using SecurityDesc = Field<f8String, 107>;
//-------------------------------------------------------------------------------------------------
using HeartBtInt = Field<int, 108>;
//-------------------------------------------------------------------------------------------------
using MinQty = Field<Qty, 110>;
//-------------------------------------------------------------------------------------------------
using MaxFloor = Field<Qty, 111>;
//-------------------------------------------------------------------------------------------------
using TestReqID = Field<f8String, 112>;
//-------------------------------------------------------------------------------------------------
using ReportToExch = Field<Boolean, 113>;
const char ReportToExch_NO('N');
const char ReportToExch_YES('Y');
const size_t ReportToExch_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LocateReqd = Field<Boolean, 114>;
const char LocateReqd_NO('N');
const char LocateReqd_YES('Y');
const size_t LocateReqd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OnBehalfOfCompID = Field<f8String, 115>;
//-------------------------------------------------------------------------------------------------
using OnBehalfOfSubID = Field<f8String, 116>;
//-------------------------------------------------------------------------------------------------
using QuoteID = Field<f8String, 117>;
//-------------------------------------------------------------------------------------------------
using NetMoney = Field<Amt, 118>;
//-------------------------------------------------------------------------------------------------
using SettlCurrAmt = Field<Amt, 119>;
//-------------------------------------------------------------------------------------------------
using SettlCurrency = Field<currency, 120>;
//-------------------------------------------------------------------------------------------------
using ForexReq = Field<Boolean, 121>;
const char ForexReq_NO('N');
const char ForexReq_YES('Y');
const size_t ForexReq_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OrigSendingTime = Field<UTCTimestamp, 122>;
//-------------------------------------------------------------------------------------------------
using GapFillFlag = Field<Boolean, 123>;
const char GapFillFlag_NO('N');
const char GapFillFlag_YES('Y');
const size_t GapFillFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoExecs = Field<NumInGroup, 124>;
//-------------------------------------------------------------------------------------------------
using ExpireTime = Field<UTCTimestamp, 126>;
//-------------------------------------------------------------------------------------------------
using DKReason = Field<char, 127>;
const char DKReason_UNKNOWNSYMBOL('A');
const char DKReason_WRONGSIDE('B');
const char DKReason_QUANTITYEXCEEDSORDER('C');
const char DKReason_NOMATCH('D');
const char DKReason_PRICEEXCEEDSLIMIT('E');
const char DKReason_CALCULATIONDIFFERENCE('F');
const char DKReason_OTHER('Z');
const size_t DKReason_realm_els(7);
//-------------------------------------------------------------------------------------------------
using DeliverToCompID = Field<f8String, 128>;
//-------------------------------------------------------------------------------------------------
using DeliverToSubID = Field<f8String, 129>;
//-------------------------------------------------------------------------------------------------
using IOINaturalFlag = Field<Boolean, 130>;
const char IOINaturalFlag_NO('N');
const char IOINaturalFlag_YES('Y');
const size_t IOINaturalFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using QuoteReqID = Field<f8String, 131>;
//-------------------------------------------------------------------------------------------------
using BidPx = Field<price, 132>;
//-------------------------------------------------------------------------------------------------
using OfferPx = Field<price, 133>;
//-------------------------------------------------------------------------------------------------
using BidSize = Field<Qty, 134>;
//-------------------------------------------------------------------------------------------------
using OfferSize = Field<Qty, 135>;
//-------------------------------------------------------------------------------------------------
using NoMiscFees = Field<NumInGroup, 136>;
//-------------------------------------------------------------------------------------------------
using MiscFeeAmt = Field<Amt, 137>;
//-------------------------------------------------------------------------------------------------
using MiscFeeCurr = Field<currency, 138>;
//-------------------------------------------------------------------------------------------------
using MiscFeeType = Field<char, 139>;
const char MiscFeeType_REG('1');
const char MiscFeeType_TAX('2');
const char MiscFeeType_LOCALCOMM('3');
const char MiscFeeType_EXCHFEE('4');
const char MiscFeeType_STAMP('5');
const char MiscFeeType_LEVY('6');
const char MiscFeeType_OTHER('7');
const char MiscFeeType_MARKUP('8');
const char MiscFeeType_CONSUMPTION('9');
const size_t MiscFeeType_realm_els(9);
//-------------------------------------------------------------------------------------------------
using PrevClosePx = Field<price, 140>;
//-------------------------------------------------------------------------------------------------
using ResetSeqNumFlag = Field<Boolean, 141>;
const char ResetSeqNumFlag_NO('N');
const char ResetSeqNumFlag_YES('Y');
const size_t ResetSeqNumFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SenderLocationID = Field<f8String, 142>;
//-------------------------------------------------------------------------------------------------
using TargetLocationID = Field<f8String, 143>;
//-------------------------------------------------------------------------------------------------
using OnBehalfOfLocationID = Field<f8String, 144>;
//-------------------------------------------------------------------------------------------------
using DeliverToLocationID = Field<f8String, 145>;
//-------------------------------------------------------------------------------------------------
using NoRelatedSym = Field<NumInGroup, 146>;
//-------------------------------------------------------------------------------------------------
using Subject = Field<f8String, 147>;
//-------------------------------------------------------------------------------------------------
using Headline = Field<f8String, 148>;
//-------------------------------------------------------------------------------------------------
using URLLink = Field<f8String, 149>;
//-------------------------------------------------------------------------------------------------
using ExecType = Field<char, 150>;
const char ExecType_NEW('0');
const char ExecType_DONE('3');
const char ExecType_CANCELED('4');
const char ExecType_REPLACED('5');
const char ExecType_PENDINGCXL('6');
const char ExecType_STOPPED('7');
const char ExecType_REJECTED('8');
const char ExecType_SUSPENDED('9');
const char ExecType_PENDINGNEW('A');
const char ExecType_CALCULATED('B');
const char ExecType_EXPIRED('C');
const char ExecType_RESTATED('D');
const char ExecType_PENDINGREPLACE('E');
const char ExecType_TRADE('F');
const char ExecType_TRADECORRECT('G');
const char ExecType_TRADECANCEL('H');
const char ExecType_ORDERSTATUS('I');
const size_t ExecType_realm_els(17);
//-------------------------------------------------------------------------------------------------
using LeavesQty = Field<Qty, 151>;
//-------------------------------------------------------------------------------------------------
using CashOrderQty = Field<Qty, 152>;
//-------------------------------------------------------------------------------------------------
using AllocAvgPx = Field<price, 153>;
//-------------------------------------------------------------------------------------------------
using AllocNetMoney = Field<Amt, 154>;
//-------------------------------------------------------------------------------------------------
using SettlCurrFxRate = Field<fp_type, 155>;
//-------------------------------------------------------------------------------------------------
using SettlCurrFxRateCalc = Field<char, 156>;
const char SettlCurrFxRateCalc_DIVIDE('D');
const char SettlCurrFxRateCalc_MULTIPLY('M');
const size_t SettlCurrFxRateCalc_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NumDaysInterest = Field<int, 157>;
//-------------------------------------------------------------------------------------------------
using AccruedInterestRate = Field<Percentage, 158>;
//-------------------------------------------------------------------------------------------------
using AccruedInterestAmt = Field<Amt, 159>;
//-------------------------------------------------------------------------------------------------
using SettlInstMode = Field<char, 160>;
const char SettlInstMode_DEFAULT('0');
const char SettlInstMode_SIPROVIDED('1');
const char SettlInstMode_ACCOUNTOVERRIDING('2');
const char SettlInstMode_ACCOUNTSTANDING('3');
const char SettlInstMode_CIVORDERSINGLEACCT('4');
const char SettlInstMode_REJECT('5');
const size_t SettlInstMode_realm_els(6);
//-------------------------------------------------------------------------------------------------
using AllocText = Field<f8String, 161>;
//-------------------------------------------------------------------------------------------------
using SettlInstID = Field<f8String, 162>;
//-------------------------------------------------------------------------------------------------
using SettlInstTransType = Field<char, 163>;
const char SettlInstTransType_CANCEL('C');
const char SettlInstTransType_NEW('N');
const char SettlInstTransType_REPLACE('R');
const char SettlInstTransType_RESTATE('T');
const size_t SettlInstTransType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using EmailThreadID = Field<f8String, 164>;
//-------------------------------------------------------------------------------------------------
using SettlInstSource = Field<char, 165>;
const char SettlInstSource_BROKERINSTR('1');
const char SettlInstSource_INSTINSTR('2');
const char SettlInstSource_INVESTORCIV('3');
const size_t SettlInstSource_realm_els(3);
//-------------------------------------------------------------------------------------------------
using SecurityType = Field<f8String, 167>;
const f8String SecurityType_ASSETBACKEDSECURITIES("ABS");
const f8String SecurityType_AMENDEDRESTATED("AMENDED");
const f8String SecurityType_OTHERANTICIPATIONNOTESBANGANETC("AN");
const f8String SecurityType_BANKERSACCEPTANCE("BA");
const f8String SecurityType_BANKNOTES("BN");
const f8String SecurityType_BILLOFEXCHANGES("BOX");
const f8String SecurityType_BRADYBOND("BRADY");
const f8String SecurityType_BRIDGELOAN("BRIDGE");
const f8String SecurityType_BUYSELLBACK("BUYSELL");
const f8String SecurityType_CONVERTIBLEBOND("CB");
const f8String SecurityType_CERTIFICATEOFDEPOSIT("CD");
const f8String SecurityType_CALLLOANS("CL");
const f8String SecurityType_CORPMORTGAGEBACKEDSECURITIES("CMBS");
const f8String SecurityType_COLLATERALIZEDMORTGAGEOBLIGATION("CMO");
const f8String SecurityType_CERTIFICATEOFOBLIGATION("COFO");
const f8String SecurityType_CERTIFICATEOFPARTICIPATION("COFP");
const f8String SecurityType_CORPORATEBOND("CORP");
const f8String SecurityType_COMMERCIALPAPER("CP");
const f8String SecurityType_CORPORATEPRIVATEPLACEMENT("CPP");
const f8String SecurityType_COMMONSTOCK("CS");
const f8String SecurityType_DEFAULTED("DEFLTED");
const f8String SecurityType_DEBTORINPOSSESSION("DINP");
const f8String SecurityType_DEPOSITNOTES("DN");
const f8String SecurityType_DUALCURRENCY("DUAL");
const f8String SecurityType_EUROCERTIFICATEOFDEPOSIT("EUCD");
const f8String SecurityType_EUROCORPORATEBOND("EUCORP");
const f8String SecurityType_EUROCOMMERCIALPAPER("EUCP");
const f8String SecurityType_EUROSOVEREIGNS("EUSOV");
const f8String SecurityType_EUROSUPRANATIONALCOUPONS("EUSUPRA");
const f8String SecurityType_FEDERALAGENCYCOUPON("FAC");
const f8String SecurityType_FEDERALAGENCYDISCOUNTNOTE("FADN");
const f8String SecurityType_FOREIGNEXCHANGECONTRACT("FOR");
const f8String SecurityType_FORWARD("FORWARD");
const f8String SecurityType_FUTURE("FUT");
const f8String SecurityType_GENERALOBLIGATIONBONDS("GO");
const f8String SecurityType_IOETTEMORTGAGE("IET");
const f8String SecurityType_LETTEROFCREDIT("LOFC");
const f8String SecurityType_LIQUIDITYNOTE("LQN");
const f8String SecurityType_MATURED("MATURED");
const f8String SecurityType_MORTGAGEBACKEDSECURITIES("MBS");
const f8String SecurityType_MUTUALFUND("MF");
const f8String SecurityType_MORTGAGEINTERESTONLY("MIO");
const f8String SecurityType_MULTILEGINSTRUMENT("MLEG");
const f8String SecurityType_MORTGAGEPRINCIPALONLY("MPO");
const f8String SecurityType_MORTGAGEPRIVATEPLACEMENT("MPP");
const f8String SecurityType_MISCELLANEOUSPASSTHROUGH("MPT");
const f8String SecurityType_MANDATORYTENDER("MT");
const f8String SecurityType_MEDIUMTERMNOTES("MTN");
const f8String SecurityType_NOSECURITYTYPE("NONE");
const f8String SecurityType_OVERNIGHT("ONITE");
const f8String SecurityType_OPTION("OPT");
const f8String SecurityType_PRIVATEEXPORTFUNDING("PEF");
const f8String SecurityType_PFANDBRIEFE("PFAND");
const f8String SecurityType_PROMISSORYNOTE("PN");
const f8String SecurityType_PREFERREDSTOCK("PS");
const f8String SecurityType_PLAZOSFIJOS("PZFJ");
const f8String SecurityType_REVENUEANTICIPATIONNOTE("RAN");
const f8String SecurityType_REPLACED("REPLACD");
const f8String SecurityType_REPURCHASE("REPO");
const f8String SecurityType_RETIRED("RETIRED");
const f8String SecurityType_REVENUEBONDS("REV");
const f8String SecurityType_REVOLVERLOAN("RVLV");
const f8String SecurityType_REVOLVERTERMLOAN("RVLVTRM");
const f8String SecurityType_SECURITIESLOAN("SECLOAN");
const f8String SecurityType_SECURITIESPLEDGE("SECPLEDGE");
const f8String SecurityType_SPECIALASSESSMENT("SPCLA");
const f8String SecurityType_SPECIALOBLIGATION("SPCLO");
const f8String SecurityType_SPECIALTAX("SPCLT");
const f8String SecurityType_SHORTTERMLOANNOTE("STN");
const f8String SecurityType_STRUCTUREDNOTES("STRUCT");
const f8String SecurityType_USDSUPRANATIONALCOUPONS("SUPRA");
const f8String SecurityType_SWINGLINEFACILITY("SWING");
const f8String SecurityType_TAXANTICIPATIONNOTE("TAN");
const f8String SecurityType_TAXALLOCATION("TAXA");
const f8String SecurityType_TOBEANNOUNCED("TBA");
const f8String SecurityType_USTREASURYBILL("TBILL");
const f8String SecurityType_USTREASURYBOND("TBOND");
const f8String SecurityType_PRINCIPALSTRIPOFACALLABLEBONDORNOTE("TCAL");
const f8String SecurityType_TIMEDEPOSIT("TD");
const f8String SecurityType_TAXEXEMPTCOMMERCIALPAPER("TECP");
const f8String SecurityType_TERMLOAN("TERM");
const f8String SecurityType_INTERESTSTRIPFROMANYBONDORNOTE("TINT");
const f8String SecurityType_TREASURYINFLATIONPROTECTEDSECURITIES("TIPS");
const f8String SecurityType_USTREASURYNOTE("TNOTE");
const f8String SecurityType_PRINCIPALSTRIPFROMANONCALLABLEBONDORNOTE("TPRN");
const f8String SecurityType_TAXREVENUEANTICIPATIONNOTE("TRAN");
const f8String SecurityType_USTREASURYNOTEDEPRECATEDVALUEUSETNOTE("UST");
const f8String SecurityType_USTREASURYBILLDEPRECATEDVALUEUSETBILL("USTB");
const f8String SecurityType_VARIABLERATEDEMANDNOTE("VRDN");
const f8String SecurityType_WARRANT("WAR");
const f8String SecurityType_WITHDRAWN("WITHDRN");
const f8String SecurityType_WILDCARDENTRY("WLD");
const f8String SecurityType_EXTENDEDCOMMNOTE("XCN");
const f8String SecurityType_INDEXEDLINKED("XLINKD");
const f8String SecurityType_YANKEECORPORATEBOND("YANK");
const f8String SecurityType_YANKEECERTIFICATEOFDEPOSIT("YCD");
const size_t SecurityType_realm_els(96);
//-------------------------------------------------------------------------------------------------
using EffectiveTime = Field<UTCTimestamp, 168>;
//-------------------------------------------------------------------------------------------------
using StandInstDbType = Field<int, 169>;
const int StandInstDbType_OTHER(0);
const int StandInstDbType_SID(1);
const int StandInstDbType_ALERT(2);
const int StandInstDbType_CUSTODIAN(3);
const int StandInstDbType_ACCOUNTNET(4);
const size_t StandInstDbType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using StandInstDbName = Field<f8String, 170>;
//-------------------------------------------------------------------------------------------------
using StandInstDbID = Field<f8String, 171>;
//-------------------------------------------------------------------------------------------------
using SettlDeliveryType = Field<int, 172>;
//-------------------------------------------------------------------------------------------------
using BidSpotRate = Field<price, 188>;
//-------------------------------------------------------------------------------------------------
using BidForwardPoints = Field<PriceOffset, 189>;
//-------------------------------------------------------------------------------------------------
using OfferSpotRate = Field<price, 190>;
//-------------------------------------------------------------------------------------------------
using OfferForwardPoints = Field<PriceOffset, 191>;
//-------------------------------------------------------------------------------------------------
using OrderQty2 = Field<Qty, 192>;
//-------------------------------------------------------------------------------------------------
using SettlDate2 = Field<LocalMktDate, 193>;
//-------------------------------------------------------------------------------------------------
using LastSpotRate = Field<price, 194>;
//-------------------------------------------------------------------------------------------------
using LastForwardPoints = Field<PriceOffset, 195>;
//-------------------------------------------------------------------------------------------------
using AllocLinkID = Field<f8String, 196>;
//-------------------------------------------------------------------------------------------------
using AllocLinkType = Field<int, 197>;
const int AllocLinkType_FXNETTING(0);
const int AllocLinkType_FXSWAP(1);
const size_t AllocLinkType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SecondaryOrderID = Field<f8String, 198>;
//-------------------------------------------------------------------------------------------------
using NoIOIQualifiers = Field<NumInGroup, 199>;
//-------------------------------------------------------------------------------------------------
using MaturityMonthYear = Field<MonthYear, 200>;
//-------------------------------------------------------------------------------------------------
using StrikePrice = Field<price, 202>;
//-------------------------------------------------------------------------------------------------
using CoveredOrUncovered = Field<int, 203>;
const int CoveredOrUncovered_COVERED(0);
const int CoveredOrUncovered_UNCOVERED(1);
const size_t CoveredOrUncovered_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OptAttribute = Field<char, 206>;
//-------------------------------------------------------------------------------------------------
using SecurityExchange = Field<Exchange, 207>;
//-------------------------------------------------------------------------------------------------
using NotifyBrokerOfCredit = Field<Boolean, 208>;
const char NotifyBrokerOfCredit_NO('N');
const char NotifyBrokerOfCredit_YES('Y');
const size_t NotifyBrokerOfCredit_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AllocHandlInst = Field<int, 209>;
const int AllocHandlInst_MATCH(1);
const int AllocHandlInst_FORWARD(2);
const int AllocHandlInst_FORWARDMATCH(3);
const size_t AllocHandlInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MaxShow = Field<Qty, 210>;
//-------------------------------------------------------------------------------------------------
using PegOffsetValue = Field<fp_type, 211>;
//-------------------------------------------------------------------------------------------------
using XmlDataLen = Field<Length, 212>;
//-------------------------------------------------------------------------------------------------
using XmlData = Field<data, 213>;
//-------------------------------------------------------------------------------------------------
using SettlInstRefID = Field<f8String, 214>;
//-------------------------------------------------------------------------------------------------
using NoRoutingIDs = Field<NumInGroup, 215>;
//-------------------------------------------------------------------------------------------------
using RoutingType = Field<int, 216>;
const int RoutingType_TARGETFIRM(1);
const int RoutingType_TARGETLIST(2);
const int RoutingType_BLOCKFIRM(3);
const int RoutingType_BLOCKLIST(4);
const size_t RoutingType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using RoutingID = Field<f8String, 217>;
//-------------------------------------------------------------------------------------------------
using Spread = Field<PriceOffset, 218>;
//-------------------------------------------------------------------------------------------------
using BenchmarkCurveCurrency = Field<currency, 220>;
//-------------------------------------------------------------------------------------------------
using BenchmarkCurveName = Field<f8String, 221>;
const f8String BenchmarkCurveName_EONIA("EONIA");
const f8String BenchmarkCurveName_EUREPO("EUREPO");
const f8String BenchmarkCurveName_EURIBOR("Euribor");
const f8String BenchmarkCurveName_FUTURESWAP("FutureSWAP");
const f8String BenchmarkCurveName_LIBID("LIBID");
const f8String BenchmarkCurveName_LIBOR("LIBOR");
const f8String BenchmarkCurveName_MUNIAAA("MuniAAA");
const f8String BenchmarkCurveName_OTHER("OTHER");
const f8String BenchmarkCurveName_PFANDBRIEFE("Pfandbriefe");
const f8String BenchmarkCurveName_SONIA("SONIA");
const f8String BenchmarkCurveName_SWAP("SWAP");
const f8String BenchmarkCurveName_TREASURY("Treasury");
const size_t BenchmarkCurveName_realm_els(12);
//-------------------------------------------------------------------------------------------------
using BenchmarkCurvePoint = Field<f8String, 222>;
//-------------------------------------------------------------------------------------------------
using CouponRate = Field<Percentage, 223>;
//-------------------------------------------------------------------------------------------------
using CouponPaymentDate = Field<LocalMktDate, 224>;
//-------------------------------------------------------------------------------------------------
using IssueDate = Field<LocalMktDate, 225>;
//-------------------------------------------------------------------------------------------------
using RepurchaseTerm = Field<int, 226>;
//-------------------------------------------------------------------------------------------------
using RepurchaseRate = Field<Percentage, 227>;
//-------------------------------------------------------------------------------------------------
using Factor = Field<fp_type, 228>;
//-------------------------------------------------------------------------------------------------
using TradeOriginationDate = Field<LocalMktDate, 229>;
//-------------------------------------------------------------------------------------------------
using ExDate = Field<LocalMktDate, 230>;
//-------------------------------------------------------------------------------------------------
using ContractMultiplier = Field<fp_type, 231>;
//-------------------------------------------------------------------------------------------------
using NoStipulations = Field<NumInGroup, 232>;
//-------------------------------------------------------------------------------------------------
using StipulationType = Field<f8String, 233>;
const f8String StipulationType_ABSOLUTEPREPAYMENTSPEED("ABS");
const f8String StipulationType_AMT("AMT");
const f8String StipulationType_AUTOREINVESTMENTATRATEORBETTER("AUTOREINV");
const f8String StipulationType_BANKQUALIFIED("BANKQUAL");
const f8String StipulationType_BARGAINCONDITIONS("BGNCON");
const f8String StipulationType_COUPONRANGE("COUPON");
const f8String StipulationType_CONSTANTPREPAYMENTPENALTY("CPP");
const f8String StipulationType_CONSTANTPREPAYMENTRATE("CPR");
const f8String StipulationType_CONSTANTPREPAYMENTYIELD("CPY");
const f8String StipulationType_ISOCURRENCYCODE("CURRENCY");
const f8String StipulationType_CUSTOMSTARTENDDATE("CUSTOMDATE");
const f8String StipulationType_GEOGRAPHICSANDRANGE("GEOG");
const f8String StipulationType_VALUATIONDISCOUNT("HAIRCUT");
const f8String StipulationType_FINALCPROFHOMEEQUITYPREPAYMENTCURVE("HEP");
const f8String StipulationType_INSURED("INSURED");
const f8String StipulationType_YEARORYEARMONTHOFISSUE("ISSUE");
const f8String StipulationType_ISSUERSTICKER("ISSUER");
const f8String StipulationType_ISSUESIZERANGE("ISSUESIZE");
const f8String StipulationType_LOOKBACKDAYS("LOOKBACK");
const f8String StipulationType_EXPLICITLOTIDENTIFIER("LOT");
const f8String StipulationType_LOTVARIANCEVALUEINPERCENTMAXIMUMOVERORUNDERALLOCATIONALLOWED("LOTVAR");
const f8String StipulationType_MATURITYYEARANDMONTH("MAT");
const f8String StipulationType_MATURITYRANGE("MATURITY");
const f8String StipulationType_MAXIMUMDENOMINATION("MAXDNOM");
const f8String StipulationType_MAXIMUMSUBSTITUTIONSREPO("MAXSUBS");
const f8String StipulationType_PERCENTOFMANUFACTUREDHOUSINGPREPAYMENTCURVE("MHP");
const f8String StipulationType_MINIMUMDENOMINATION("MINDNOM");
const f8String StipulationType_MINIMUMINCREMENT("MININCR");
const f8String StipulationType_MINIMUMQUANTITY("MINQTY");
const f8String StipulationType_MONTHLYPREPAYMENTRATE("MPR");
const f8String StipulationType_PAYMENTFREQUENCYCALENDAR("PAYFREQ");
const f8String StipulationType_NUMBEROFPIECES("PIECES");
const f8String StipulationType_POOLSMAXIMUM("PMAX");
const f8String StipulationType_POOLSMINIMUM("PMIN");
const f8String StipulationType_PERCENTOFPROSPECTUSPREPAYMENTCURVE("PPC");
const f8String StipulationType_POOLSPERLOT("PPL");
const f8String StipulationType_POOLSPERMILLION("PPM");
const f8String StipulationType_POOLSPERTRADE("PPT");
const f8String StipulationType_PRICERANGE("PRICE");
const f8String StipulationType_PRICINGFREQUENCY("PRICEFREQ");
const f8String StipulationType_PRODUCTIONYEAR("PROD");
const f8String StipulationType_CALLPROTECTION("PROTECT");
const f8String StipulationType_PERCENTOFBMAPREPAYMENTCURVE("PSA");
const f8String StipulationType_PURPOSE("PURPOSE");
const f8String StipulationType_BENCHMARKPRICESOURCE("PXSOURCE");
const f8String StipulationType_RATINGSOURCEANDRANGE("RATING");
const f8String StipulationType_TYPEOFREDEMPTIONVALUESARE("REDEMPTION");
const f8String StipulationType_RESTRICTED("RESTRICTED");
const f8String StipulationType_MARKETSECTOR("SECTOR");
const f8String StipulationType_SECURITYTYPEINCLUDEDOREXCLUDED("SECTYPE");
const f8String StipulationType_SINGLEMONTHLYMORTALITY("SMM");
const f8String StipulationType_STRUCTURE("STRUCT");
const f8String StipulationType_SUBSTITUTIONSFREQUENCYREPO("SUBSFREQ");
const f8String StipulationType_SUBSTITUTIONSLEFTREPO("SUBSLEFT");
const f8String StipulationType_FREEFORMTEXT("TEXT");
const f8String StipulationType_TRADEVARIANCEVALUEINPERCENTMAXIMUMOVERORUNDERALLOCATIONALLOWED("TRDVAR");
const f8String StipulationType_WEIGHTEDAVERAGECOUPON("WAC");
const f8String StipulationType_WEIGHTEDAVERAGELIFECOUPON("WAL");
const f8String StipulationType_WEIGHTEDAVERAGELOANAGE("WALA");
const f8String StipulationType_WEIGHTEDAVERAGEMATURITY("WAM");
const f8String StipulationType_WHOLEPOOL("WHOLE");
const f8String StipulationType_YIELDRANGE("YIELD");
const size_t StipulationType_realm_els(62);
//-------------------------------------------------------------------------------------------------
using StipulationValue = Field<f8String, 234>;
//-------------------------------------------------------------------------------------------------
using YieldType = Field<f8String, 235>;
const f8String YieldType_AFTERTAXYIELD("AFTERTAX");
const f8String YieldType_ANNUALYIELD("ANNUAL");
const f8String YieldType_YIELDATISSUE("ATISSUE");
const f8String YieldType_YIELDTOAVGMATURITY("AVGMATURITY");
const f8String YieldType_BOOKYIELD("BOOK");
const f8String YieldType_YIELDTONEXTCALL("CALL");
const f8String YieldType_YIELDCHANGESINCECLOSE("CHANGE");
const f8String YieldType_CLOSINGYIELD("CLOSE");
const f8String YieldType_COMPOUNDYIELD("COMPOUND");
const f8String YieldType_CURRENTYIELD("CURRENT");
const f8String YieldType_GVNTEQUIVALENTYIELD("GOVTEQUIV");
const f8String YieldType_TRUEGROSSYIELD("GROSS");
const f8String YieldType_YIELDINFLATIONASSUMPTION("INFLATION");
const f8String YieldType_INVFLOATERBONDYIELD("INVERSEFLOATER");
const f8String YieldType_MOSTRECENTCLOSINGYIELD("LASTCLOSE");
const f8String YieldType_CLOSINGYIELDMOSTRECENTMONTH("LASTMONTH");
const f8String YieldType_CLOSINGYIELDMOSTRECENTQUARTER("LASTQUARTER");
const f8String YieldType_CLOSINGYIELDMOSTRECENTYEAR("LASTYEAR");
const f8String YieldType_YIELDTOLONGESTAVERAGELIFE("LONGAVGLIFE");
const f8String YieldType_MARKTOMARKETYIELD("MARK");
const f8String YieldType_YIELDTOMATURITY("MATURITY");
const f8String YieldType_YIELDTONEXTREFUNDSINKING("NEXTREFUND");
const f8String YieldType_OPENAVERAGEYIELD("OPENAVG");
const f8String YieldType_PREVIOUSCLOSEYIELD("PREVCLOSE");
const f8String YieldType_PROCEEDSYIELD("PROCEEDS");
const f8String YieldType_YIELDTONEXTPUT("PUT");
const f8String YieldType_SEMI("SEMIANNUAL");
const f8String YieldType_YIELDTOSHORTESTAVERAGELIFE("SHORTAVGLIFE");
const f8String YieldType_SIMPLEYIELD("SIMPLE");
const f8String YieldType_TAXEQUIVALENTYIELD("TAXEQUIV");
const f8String YieldType_YIELDTOTENDERDATE("TENDER");
const f8String YieldType_TRUEYIELD("TRUE");
const f8String YieldType_YIELDVALUEOF132("VALUE1_32");
const f8String YieldType_YIELDTOWORSTCONVENTION("WORST");
const size_t YieldType_realm_els(34);
//-------------------------------------------------------------------------------------------------
using Yield = Field<Percentage, 236>;
//-------------------------------------------------------------------------------------------------
using TotalTakedown = Field<Amt, 237>;
//-------------------------------------------------------------------------------------------------
using Concession = Field<Amt, 238>;
//-------------------------------------------------------------------------------------------------
using RepoCollateralSecurityType = Field<int, 239>;
//-------------------------------------------------------------------------------------------------
using RedemptionDate = Field<LocalMktDate, 240>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCouponPaymentDate = Field<LocalMktDate, 241>;
//-------------------------------------------------------------------------------------------------
using UnderlyingIssueDate = Field<LocalMktDate, 242>;
//-------------------------------------------------------------------------------------------------
using UnderlyingRepoCollateralSecurityType = Field<int, 243>;
//-------------------------------------------------------------------------------------------------
using UnderlyingRepurchaseTerm = Field<int, 244>;
//-------------------------------------------------------------------------------------------------
using UnderlyingRepurchaseRate = Field<Percentage, 245>;
//-------------------------------------------------------------------------------------------------
using UnderlyingFactor = Field<fp_type, 246>;
//-------------------------------------------------------------------------------------------------
using UnderlyingRedemptionDate = Field<LocalMktDate, 247>;
//-------------------------------------------------------------------------------------------------
using LegCouponPaymentDate = Field<LocalMktDate, 248>;
//-------------------------------------------------------------------------------------------------
using LegIssueDate = Field<LocalMktDate, 249>;
//-------------------------------------------------------------------------------------------------
using LegRepoCollateralSecurityType = Field<int, 250>;
//-------------------------------------------------------------------------------------------------
using LegRepurchaseTerm = Field<int, 251>;
//-------------------------------------------------------------------------------------------------
using LegRepurchaseRate = Field<Percentage, 252>;
//-------------------------------------------------------------------------------------------------
using LegFactor = Field<fp_type, 253>;
//-------------------------------------------------------------------------------------------------
using LegRedemptionDate = Field<LocalMktDate, 254>;
//-------------------------------------------------------------------------------------------------
using CreditRating = Field<f8String, 255>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCreditRating = Field<f8String, 256>;
//-------------------------------------------------------------------------------------------------
using LegCreditRating = Field<f8String, 257>;
//-------------------------------------------------------------------------------------------------
using TradedFlatSwitch = Field<Boolean, 258>;
const char TradedFlatSwitch_NO('N');
const char TradedFlatSwitch_YES('Y');
const size_t TradedFlatSwitch_realm_els(2);
//-------------------------------------------------------------------------------------------------
using BasisFeatureDate = Field<LocalMktDate, 259>;
//-------------------------------------------------------------------------------------------------
using BasisFeaturePrice = Field<price, 260>;
//-------------------------------------------------------------------------------------------------
using MDReqID = Field<f8String, 262>;
//-------------------------------------------------------------------------------------------------
using SubscriptionRequestType = Field<char, 263>;
const char SubscriptionRequestType_SNAPSHOT('0');
const char SubscriptionRequestType_SNAPSHOTUPDATE('1');
const char SubscriptionRequestType_UNSUBSCRIBE('2');
const size_t SubscriptionRequestType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MarketDepth = Field<int, 264>;
//-------------------------------------------------------------------------------------------------
using MDUpdateType = Field<int, 265>;
const int MDUpdateType_FULL(0);
const int MDUpdateType_INCREMENTAL(1);
const size_t MDUpdateType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AggregatedBook = Field<Boolean, 266>;
//-------------------------------------------------------------------------------------------------
using NoMDEntryTypes = Field<NumInGroup, 267>;
//-------------------------------------------------------------------------------------------------
using NoMDEntries = Field<NumInGroup, 268>;
//-------------------------------------------------------------------------------------------------
using MDEntryType = Field<char, 269>;
const char MDEntryType_BID('0');
const char MDEntryType_OFFER('1');
const char MDEntryType_TRADE('2');
const char MDEntryType_INDEXVALUE('3');
const char MDEntryType_OPENING('4');
const char MDEntryType_CLOSING('5');
const char MDEntryType_SETTLEMENT('6');
const char MDEntryType_TRADINGHIGH('7');
const char MDEntryType_TRADINGLOW('8');
const char MDEntryType_TRADINGVWAP('9');
const char MDEntryType_IMBALANCE('A');
const char MDEntryType_TRADEVOLUME('B');
const char MDEntryType_OPENINTEREST('C');
const size_t MDEntryType_realm_els(13);
//-------------------------------------------------------------------------------------------------
using MDEntryPx = Field<price, 270>;
//-------------------------------------------------------------------------------------------------
using MDEntrySize = Field<Qty, 271>;
//-------------------------------------------------------------------------------------------------
using MDEntryDate = Field<UTCDateOnly, 272>;
//-------------------------------------------------------------------------------------------------
using MDEntryTime = Field<UTCTimeOnly, 273>;
//-------------------------------------------------------------------------------------------------
using TickDirection = Field<char, 274>;
const char TickDirection_PLUS('0');
const char TickDirection_ZEROPLUS('1');
const char TickDirection_MINUS('2');
const char TickDirection_ZEROMINUS('3');
const size_t TickDirection_realm_els(4);
//-------------------------------------------------------------------------------------------------
using MDMkt = Field<Exchange, 275>;
//-------------------------------------------------------------------------------------------------
using QuoteCondition = Field<MultipleStringValue, 276>;
const f8String QuoteCondition_OPEN("A");
const f8String QuoteCondition_CLOSED("B");
const f8String QuoteCondition_EXCHBEST("C");
const f8String QuoteCondition_CONSOLBEST("D");
const f8String QuoteCondition_LOCKED("E");
const f8String QuoteCondition_CROSSED("F");
const f8String QuoteCondition_DEPTH("G");
const f8String QuoteCondition_FAST("H");
const f8String QuoteCondition_NONFIRM("I");
const size_t QuoteCondition_realm_els(9);
//-------------------------------------------------------------------------------------------------
using TradeCondition = Field<MultipleStringValue, 277>;
const f8String TradeCondition_CASHMKT("A");
const f8String TradeCondition_AVGPX("B");
const f8String TradeCondition_CASHTRADE("C");
const f8String TradeCondition_NEXTDAY_D("D");
const f8String TradeCondition_OPENING("E");
const f8String TradeCondition_INTRADAY("F");
const f8String TradeCondition_RULE127("G");
const f8String TradeCondition_RULE155("H");
const f8String TradeCondition_SOLDLAST("I");
const f8String TradeCondition_NEXTDAY_J("J");
const f8String TradeCondition_OPENED("K");
const f8String TradeCondition_SELLER("L");
const f8String TradeCondition_SOLD("M");
const f8String TradeCondition_STOPPED("N");
const f8String TradeCondition_IMBALANCEMOREBUYERS("P");
const f8String TradeCondition_IMBALANCEMORESELLERS("Q");
const f8String TradeCondition_OPENINGPRICE("R");
const size_t TradeCondition_realm_els(17);
//-------------------------------------------------------------------------------------------------
using MDEntryID = Field<f8String, 278>;
//-------------------------------------------------------------------------------------------------
using MDUpdateAction = Field<char, 279>;
const char MDUpdateAction_NEW('0');
const char MDUpdateAction_CHANGE('1');
const char MDUpdateAction_DELETE('2');
const size_t MDUpdateAction_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MDEntryRefID = Field<f8String, 280>;
//-------------------------------------------------------------------------------------------------
using MDReqRejReason = Field<char, 281>;
const char MDReqRejReason_UNKNOWNSYM('0');
const char MDReqRejReason_DUPID('1');
const char MDReqRejReason_INSBAND('2');
const char MDReqRejReason_INSPERM('3');
const char MDReqRejReason_UNSUPPSUB('4');
const char MDReqRejReason_UNSUPPMKTDEPTH('5');
const char MDReqRejReason_UNSUPPMDUPDATE('6');
const char MDReqRejReason_UNSUPPAGGBK('7');
const char MDReqRejReason_UNSUPPENTRY('8');
const char MDReqRejReason_UNSUPPTRDSESSIONID('9');
const char MDReqRejReason_UNSUPPSCOPE('A');
const char MDReqRejReason_UNSUPPPOSITIONEFFECTSETTLEFLAG('B');
const char MDReqRejReason_UNSUPPMDIMPLICITDELETE('C');
const size_t MDReqRejReason_realm_els(13);
//-------------------------------------------------------------------------------------------------
using MDEntryOriginator = Field<f8String, 282>;
//-------------------------------------------------------------------------------------------------
using LocationID = Field<f8String, 283>;
//-------------------------------------------------------------------------------------------------
using DeskID = Field<f8String, 284>;
//-------------------------------------------------------------------------------------------------
using DeleteReason = Field<char, 285>;
const char DeleteReason_CANCELTRADEBUST('0');
const char DeleteReason_ERROR('1');
const size_t DeleteReason_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OpenCloseSettlFlag = Field<MultipleStringValue, 286>;
const f8String OpenCloseSettlFlag_DAILYOPEN("0");
const f8String OpenCloseSettlFlag_SESSIONOPEN("1");
const f8String OpenCloseSettlFlag_DELIVERYSETTLEMENT("2");
const f8String OpenCloseSettlFlag_EXPECTEDENTRY("3");
const f8String OpenCloseSettlFlag_ENTRYFROMPREVBUSINESSDAY("4");
const f8String OpenCloseSettlFlag_THEORETICALPRICE("5");
const size_t OpenCloseSettlFlag_realm_els(6);
//-------------------------------------------------------------------------------------------------
using SellerDays = Field<int, 287>;
//-------------------------------------------------------------------------------------------------
using MDEntryBuyer = Field<f8String, 288>;
//-------------------------------------------------------------------------------------------------
using MDEntrySeller = Field<f8String, 289>;
//-------------------------------------------------------------------------------------------------
using MDEntryPositionNo = Field<int, 290>;
//-------------------------------------------------------------------------------------------------
using FinancialStatus = Field<MultipleStringValue, 291>;
const f8String FinancialStatus_BANKRUPT("1");
const f8String FinancialStatus_PENDINGDELISTING("2");
const size_t FinancialStatus_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CorporateAction = Field<MultipleStringValue, 292>;
const f8String CorporateAction_EXDIVIDEND("A");
const f8String CorporateAction_EXDIST("B");
const f8String CorporateAction_EXRIGHTS("C");
const f8String CorporateAction_NEW("D");
const f8String CorporateAction_EXINTEREST("E");
const size_t CorporateAction_realm_els(5);
//-------------------------------------------------------------------------------------------------
using DefBidSize = Field<Qty, 293>;
//-------------------------------------------------------------------------------------------------
using DefOfferSize = Field<Qty, 294>;
//-------------------------------------------------------------------------------------------------
using NoQuoteEntries = Field<NumInGroup, 295>;
//-------------------------------------------------------------------------------------------------
using NoQuoteSets = Field<NumInGroup, 296>;
//-------------------------------------------------------------------------------------------------
using QuoteStatus = Field<int, 297>;
const int QuoteStatus_ACCPT(0);
const int QuoteStatus_CXLSYM(1);
const int QuoteStatus_CXLSECTYPE(2);
const int QuoteStatus_CXLUNDER(3);
const int QuoteStatus_CXLALL(4);
const int QuoteStatus_REJ(5);
const int QuoteStatus_REMOVED(6);
const int QuoteStatus_EXPIRED(7);
const int QuoteStatus_QUERY(8);
const int QuoteStatus_QUOTENOTFOUND(9);
const int QuoteStatus_PENDING(10);
const int QuoteStatus_PASS(11);
const int QuoteStatus_LOCKEDMARKETWARNING(12);
const int QuoteStatus_CROSSMARKETWARNING(13);
const int QuoteStatus_CANCELEDDUETOLOCKMARKET(14);
const int QuoteStatus_CANCELEDDUETOCROSSMARKET(15);
const size_t QuoteStatus_realm_els(16);
//-------------------------------------------------------------------------------------------------
using QuoteCancelType = Field<int, 298>;
const int QuoteCancelType_CXLSYM(1);
const int QuoteCancelType_CXLSECTYPE(2);
const int QuoteCancelType_CXLUNDER(3);
const int QuoteCancelType_CXLALL(4);
const size_t QuoteCancelType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using QuoteEntryID = Field<f8String, 299>;
//-------------------------------------------------------------------------------------------------
using QuoteRejectReason = Field<int, 300>;
const int QuoteRejectReason_UNKNSYM(1);
const int QuoteRejectReason_EXCHCLSD(2);
const int QuoteRejectReason_ORDEXLIM(3);
const int QuoteRejectReason_TOOLATE(4);
const int QuoteRejectReason_UNKNORD(5);
const int QuoteRejectReason_DUPORD(6);
const int QuoteRejectReason_INVSPREAD(7);
const int QuoteRejectReason_INVPX(8);
const int QuoteRejectReason_NOTAUTH(9);
const int QuoteRejectReason_OTHER(99);
const size_t QuoteRejectReason_realm_els(10);
//-------------------------------------------------------------------------------------------------
using QuoteResponseLevel = Field<int, 301>;
const int QuoteResponseLevel_NOACK(0);
const int QuoteResponseLevel_ACKNEG(1);
const int QuoteResponseLevel_ACKEACH(2);
const size_t QuoteResponseLevel_realm_els(3);
//-------------------------------------------------------------------------------------------------
using QuoteSetID = Field<f8String, 302>;
//-------------------------------------------------------------------------------------------------
using QuoteRequestType = Field<int, 303>;
const int QuoteRequestType_MAN(1);
const int QuoteRequestType_AUTO(2);
const size_t QuoteRequestType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TotNoQuoteEntries = Field<int, 304>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityIDSource = Field<f8String, 305>;
//-------------------------------------------------------------------------------------------------
using UnderlyingIssuer = Field<f8String, 306>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityDesc = Field<f8String, 307>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityExchange = Field<Exchange, 308>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityID = Field<f8String, 309>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityType = Field<f8String, 310>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSymbol = Field<f8String, 311>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSymbolSfx = Field<f8String, 312>;
//-------------------------------------------------------------------------------------------------
using UnderlyingMaturityMonthYear = Field<MonthYear, 313>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStrikePrice = Field<price, 316>;
//-------------------------------------------------------------------------------------------------
using UnderlyingOptAttribute = Field<char, 317>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCurrency = Field<currency, 318>;
//-------------------------------------------------------------------------------------------------
using SecurityReqID = Field<f8String, 320>;
//-------------------------------------------------------------------------------------------------
using SecurityRequestType = Field<int, 321>;
const int SecurityRequestType_REQSECID(0);
const int SecurityRequestType_REQSECIDPROV(1);
const int SecurityRequestType_REQSECLISTTYPES(2);
const int SecurityRequestType_REQSECLIST(3);
const size_t SecurityRequestType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using SecurityResponseID = Field<f8String, 322>;
//-------------------------------------------------------------------------------------------------
using SecurityResponseType = Field<int, 323>;
const int SecurityResponseType_ACCPTSECPROP(1);
const int SecurityResponseType_ACCPTSECPROPREV(2);
const int SecurityResponseType_SECLISTTYPESRET(3);
const int SecurityResponseType_SECLISTRET(4);
const int SecurityResponseType_REJSECPROP(5);
const int SecurityResponseType_NOMATCH(6);
const size_t SecurityResponseType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using SecurityStatusReqID = Field<f8String, 324>;
//-------------------------------------------------------------------------------------------------
using UnsolicitedIndicator = Field<Boolean, 325>;
const char UnsolicitedIndicator_NO('N');
const char UnsolicitedIndicator_YES('Y');
const size_t UnsolicitedIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SecurityTradingStatus = Field<int, 326>;
const int SecurityTradingStatus_OPENDELAY(1);
const int SecurityTradingStatus_TRDHALT(2);
const int SecurityTradingStatus_RESUME(3);
const int SecurityTradingStatus_NOOPEN(4);
const int SecurityTradingStatus_PXIND(5);
const int SecurityTradingStatus_TRDRNGIND(6);
const int SecurityTradingStatus_MKTIMBBUY(7);
const int SecurityTradingStatus_MKTBALSELL(8);
const int SecurityTradingStatus_MKTONCLSIMBBUY(9);
const int SecurityTradingStatus_MKTONCLSIMBSELL(10);
const int SecurityTradingStatus_NA(11);
const int SecurityTradingStatus_NOMKTIMB(12);
const int SecurityTradingStatus_NOMKTONCLSIMB(13);
const int SecurityTradingStatus_ITSPREOPN(14);
const int SecurityTradingStatus_NEWPXIND(15);
const int SecurityTradingStatus_TRDDISTIME(16);
const int SecurityTradingStatus_READY(17);
const int SecurityTradingStatus_NOTAVAIL(18);
const int SecurityTradingStatus_NOTTRADED(19);
const int SecurityTradingStatus_UNKNOWN(20);
const int SecurityTradingStatus_PRE_OPEN(21);
const int SecurityTradingStatus_OPENINGROTATION(22);
const int SecurityTradingStatus_FASTMARKET(23);
const size_t SecurityTradingStatus_realm_els(23);
//-------------------------------------------------------------------------------------------------
using HaltReasonChar = Field<char, 327>;
const char HaltReasonChar_NEWSDISS('D');
const char HaltReasonChar_ORDINFL('E');
const char HaltReasonChar_ORDIMB('I');
const char HaltReasonChar_ADDINFO('M');
const char HaltReasonChar_NEWSPEND('P');
const char HaltReasonChar_EQUIPCHANGE('X');
const size_t HaltReasonChar_realm_els(6);
//-------------------------------------------------------------------------------------------------
using InViewOfCommon = Field<Boolean, 328>;
const char InViewOfCommon_NO('N');
const char InViewOfCommon_YES('Y');
const size_t InViewOfCommon_realm_els(2);
//-------------------------------------------------------------------------------------------------
using DueToRelated = Field<Boolean, 329>;
const char DueToRelated_NO('N');
const char DueToRelated_YES('Y');
const size_t DueToRelated_realm_els(2);
//-------------------------------------------------------------------------------------------------
using BuyVolume = Field<Qty, 330>;
//-------------------------------------------------------------------------------------------------
using SellVolume = Field<Qty, 331>;
//-------------------------------------------------------------------------------------------------
using HighPx = Field<price, 332>;
//-------------------------------------------------------------------------------------------------
using LowPx = Field<price, 333>;
//-------------------------------------------------------------------------------------------------
using Adjustment = Field<int, 334>;
const int Adjustment_CANCEL(1);
const int Adjustment_ERROR(2);
const int Adjustment_CORRECTION(3);
const size_t Adjustment_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradSesReqID = Field<f8String, 335>;
//-------------------------------------------------------------------------------------------------
using TradingSessionID = Field<f8String, 336>;
//-------------------------------------------------------------------------------------------------
using ContraTrader = Field<f8String, 337>;
//-------------------------------------------------------------------------------------------------
using TradSesMethod = Field<int, 338>;
const int TradSesMethod_ELECTRONIC(1);
const int TradSesMethod_OPENOUTCRY(2);
const int TradSesMethod_TWOPARTY(3);
const size_t TradSesMethod_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradSesMode = Field<int, 339>;
const int TradSesMode_TESTING(1);
const int TradSesMode_SIMULATED(2);
const int TradSesMode_PRODUCTION(3);
const size_t TradSesMode_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradSesStatus = Field<int, 340>;
const int TradSesStatus_UNKNOWN(0);
const int TradSesStatus_HALTED(1);
const int TradSesStatus_OPEN(2);
const int TradSesStatus_CLOSED(3);
const int TradSesStatus_PREOPEN(4);
const int TradSesStatus_PRECLOSE(5);
const int TradSesStatus_REQREJ(6);
const size_t TradSesStatus_realm_els(7);
//-------------------------------------------------------------------------------------------------
using TradSesStartTime = Field<UTCTimestamp, 341>;
//-------------------------------------------------------------------------------------------------
using TradSesOpenTime = Field<UTCTimestamp, 342>;
//-------------------------------------------------------------------------------------------------
using TradSesPreCloseTime = Field<UTCTimestamp, 343>;
//-------------------------------------------------------------------------------------------------
using TradSesCloseTime = Field<UTCTimestamp, 344>;
//-------------------------------------------------------------------------------------------------
using TradSesEndTime = Field<UTCTimestamp, 345>;
//-------------------------------------------------------------------------------------------------
using NumberOfOrders = Field<int, 346>;
//-------------------------------------------------------------------------------------------------
using MessageEncoding = Field<f8String, 347>;
//-------------------------------------------------------------------------------------------------
using EncodedIssuerLen = Field<Length, 348>;
//-------------------------------------------------------------------------------------------------
using EncodedIssuer = Field<data, 349>;
//-------------------------------------------------------------------------------------------------
using EncodedSecurityDescLen = Field<Length, 350>;
//-------------------------------------------------------------------------------------------------
using EncodedSecurityDesc = Field<data, 351>;
//-------------------------------------------------------------------------------------------------
using EncodedListExecInstLen = Field<Length, 352>;
//-------------------------------------------------------------------------------------------------
using EncodedListExecInst = Field<data, 353>;
//-------------------------------------------------------------------------------------------------
using EncodedTextLen = Field<Length, 354>;
//-------------------------------------------------------------------------------------------------
using EncodedText = Field<data, 355>;
//-------------------------------------------------------------------------------------------------
using EncodedSubjectLen = Field<Length, 356>;
//-------------------------------------------------------------------------------------------------
using EncodedSubject = Field<data, 357>;
//-------------------------------------------------------------------------------------------------
using EncodedHeadlineLen = Field<Length, 358>;
//-------------------------------------------------------------------------------------------------
using EncodedHeadline = Field<data, 359>;
//-------------------------------------------------------------------------------------------------
using EncodedAllocTextLen = Field<Length, 360>;
//-------------------------------------------------------------------------------------------------
using EncodedAllocText = Field<data, 361>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingIssuerLen = Field<Length, 362>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingIssuer = Field<data, 363>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingSecurityDescLen = Field<Length, 364>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingSecurityDesc = Field<data, 365>;
//-------------------------------------------------------------------------------------------------
using AllocPrice = Field<price, 366>;
//-------------------------------------------------------------------------------------------------
using QuoteSetValidUntilTime = Field<UTCTimestamp, 367>;
//-------------------------------------------------------------------------------------------------
using QuoteEntryRejectReason = Field<int, 368>;
const int QuoteEntryRejectReason_UNKNWNSYM(1);
const int QuoteEntryRejectReason_EXCHCLSD(2);
const int QuoteEntryRejectReason_ORDEXCLIM(3);
const int QuoteEntryRejectReason_TOOLATE(4);
const int QuoteEntryRejectReason_UNKNORD(5);
const int QuoteEntryRejectReason_DUPORD(6);
const int QuoteEntryRejectReason_INVBIDASK(7);
const int QuoteEntryRejectReason_INVPX(8);
const int QuoteEntryRejectReason_NOTAUTH(9);
const int QuoteEntryRejectReason_OTHER(99);
const size_t QuoteEntryRejectReason_realm_els(10);
//-------------------------------------------------------------------------------------------------
using LastMsgSeqNumProcessed = Field<SeqNum, 369>;
//-------------------------------------------------------------------------------------------------
using RefTagID = Field<int, 371>;
//-------------------------------------------------------------------------------------------------
using RefMsgType = Field<f8String, 372>;
//-------------------------------------------------------------------------------------------------
using SessionRejectReason = Field<int, 373>;
const int SessionRejectReason_INVALIDTAGNUMBER(0);
const int SessionRejectReason_REQUIREDTAGMISSING(1);
const int SessionRejectReason_TAGNOTDEFINEDFORTHISMESSAGETYPE(2);
const int SessionRejectReason_UNDEFINEDTAG(3);
const int SessionRejectReason_TAGSPECIFIEDWITHOUTAVALUE(4);
const int SessionRejectReason_VALUEISINCORRECTOUTOFRANGEFORTHISTAG(5);
const int SessionRejectReason_INCORRECTDATAFORMATFORVALUE(6);
const int SessionRejectReason_DECRYPTIONPROBLEM(7);
const int SessionRejectReason_SIGNATUREPROBLEM(8);
const int SessionRejectReason_COMPIDPROBLEM(9);
const int SessionRejectReason_SENDINGTIMEACCURACYPROBLEM(10);
const int SessionRejectReason_INVALIDMSGTYPE(11);
const int SessionRejectReason_XMLVALIDATIONERROR(12);
const int SessionRejectReason_TAGAPPEARSMORETHANONCE(13);
const int SessionRejectReason_TAGSPECIFIEDOUTOFREQUIREDORDER(14);
const int SessionRejectReason_REPEATINGGROUPFIELDSOUTOFORDER(15);
const int SessionRejectReason_INCORRECTNUMINGROUPCOUNTFORREPEATINGGROUP(16);
const int SessionRejectReason_NONDATAVALUEINCLUDESFIELDDELIMITERSOHCHARACTER(17);
const int SessionRejectReason_OTHER(99);
const size_t SessionRejectReason_realm_els(19);
//-------------------------------------------------------------------------------------------------
using BidRequestTransType = Field<char, 374>;
const char BidRequestTransType_CANCEL('C');
const char BidRequestTransType_NO('N');
const size_t BidRequestTransType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ContraBroker = Field<f8String, 375>;
//-------------------------------------------------------------------------------------------------
using ComplianceID = Field<f8String, 376>;
//-------------------------------------------------------------------------------------------------
using SolicitedFlag = Field<Boolean, 377>;
const char SolicitedFlag_NO('N');
const char SolicitedFlag_YES('Y');
const size_t SolicitedFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ExecRestatementReason = Field<int, 378>;
const int ExecRestatementReason_GTCORPACT(0);
const int ExecRestatementReason_GTRENEW(1);
const int ExecRestatementReason_VERBAL(2);
const int ExecRestatementReason_REPX(3);
const int ExecRestatementReason_BRKROPT(4);
const int ExecRestatementReason_PARTDEC(5);
const int ExecRestatementReason_CXLTRADINGHALT(6);
const int ExecRestatementReason_CXLSYSTEMFAILURE(7);
const int ExecRestatementReason_MRKTOPTION(8);
const int ExecRestatementReason_CANCELEDNOTBEST(9);
const int ExecRestatementReason_WAREHOUSERECAP(10);
const int ExecRestatementReason_OTHER(99);
const size_t ExecRestatementReason_realm_els(12);
//-------------------------------------------------------------------------------------------------
using BusinessRejectRefID = Field<f8String, 379>;
//-------------------------------------------------------------------------------------------------
using BusinessRejectReason = Field<int, 380>;
const int BusinessRejectReason_OTHER(0);
const int BusinessRejectReason_UNKNID(1);
const int BusinessRejectReason_UNKNSEC(2);
const int BusinessRejectReason_UNKNMSGTYPE(3);
const int BusinessRejectReason_APPNA(4);
const int BusinessRejectReason_CONDFLDMISS(5);
const int BusinessRejectReason_NOTAUTH(6);
const int BusinessRejectReason_NODELIVTOFIRM(7);
const size_t BusinessRejectReason_realm_els(8);
//-------------------------------------------------------------------------------------------------
using GrossTradeAmt = Field<Amt, 381>;
//-------------------------------------------------------------------------------------------------
using NoContraBrokers = Field<NumInGroup, 382>;
//-------------------------------------------------------------------------------------------------
using MaxMessageSize = Field<Length, 383>;
//-------------------------------------------------------------------------------------------------
using NoMsgTypes = Field<NumInGroup, 384>;
//-------------------------------------------------------------------------------------------------
using MsgDirection = Field<char, 385>;
const char MsgDirection_RECEIVE('R');
const char MsgDirection_SEND('S');
const size_t MsgDirection_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoTradingSessions = Field<NumInGroup, 386>;
//-------------------------------------------------------------------------------------------------
using TotalVolumeTraded = Field<Qty, 387>;
//-------------------------------------------------------------------------------------------------
using DiscretionInst = Field<char, 388>;
const char DiscretionInst_RELDISPPX('0');
const char DiscretionInst_RELMKTPX('1');
const char DiscretionInst_RELPRIMPX('2');
const char DiscretionInst_RELLOCPRIMPX('3');
const char DiscretionInst_RELMIDPX('4');
const char DiscretionInst_RELLSTPX('5');
const char DiscretionInst_RELVWAP('6');
const size_t DiscretionInst_realm_els(7);
//-------------------------------------------------------------------------------------------------
using DiscretionOffsetValue = Field<fp_type, 389>;
//-------------------------------------------------------------------------------------------------
using BidID = Field<f8String, 390>;
//-------------------------------------------------------------------------------------------------
using ClientBidID = Field<f8String, 391>;
//-------------------------------------------------------------------------------------------------
using ListName = Field<f8String, 392>;
//-------------------------------------------------------------------------------------------------
using TotNoRelatedSym = Field<int, 393>;
//-------------------------------------------------------------------------------------------------
using BidType = Field<int, 394>;
const int BidType_NONDISC(1);
const int BidType_DISC(2);
const int BidType_NOBID(3);
const size_t BidType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NumTickets = Field<int, 395>;
//-------------------------------------------------------------------------------------------------
using SideValue1 = Field<Amt, 396>;
//-------------------------------------------------------------------------------------------------
using SideValue2 = Field<Amt, 397>;
//-------------------------------------------------------------------------------------------------
using NoBidDescriptors = Field<NumInGroup, 398>;
//-------------------------------------------------------------------------------------------------
using BidDescriptorType = Field<int, 399>;
const int BidDescriptorType_SECTOR(1);
const int BidDescriptorType_COUNTRY(2);
const int BidDescriptorType_INDEX(3);
const size_t BidDescriptorType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using BidDescriptor = Field<f8String, 400>;
//-------------------------------------------------------------------------------------------------
using SideValueInd = Field<int, 401>;
const int SideValueInd_SIDEVALUE1(1);
const int SideValueInd_SIDEVALUE2(2);
const size_t SideValueInd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LiquidityPctLow = Field<Percentage, 402>;
//-------------------------------------------------------------------------------------------------
using LiquidityPctHigh = Field<Percentage, 403>;
//-------------------------------------------------------------------------------------------------
using LiquidityValue = Field<Amt, 404>;
//-------------------------------------------------------------------------------------------------
using EFPTrackingError = Field<Percentage, 405>;
//-------------------------------------------------------------------------------------------------
using FairValue = Field<Amt, 406>;
//-------------------------------------------------------------------------------------------------
using OutsideIndexPct = Field<Percentage, 407>;
//-------------------------------------------------------------------------------------------------
using ValueOfFutures = Field<Amt, 408>;
//-------------------------------------------------------------------------------------------------
using LiquidityIndType = Field<int, 409>;
const int LiquidityIndType_5DAY(1);
const int LiquidityIndType_20DAY(2);
const int LiquidityIndType_NORMAL(3);
const int LiquidityIndType_OTHER(4);
const size_t LiquidityIndType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using WtAverageLiquidity = Field<Percentage, 410>;
//-------------------------------------------------------------------------------------------------
using ExchangeForPhysical = Field<Boolean, 411>;
const char ExchangeForPhysical_NO('N');
const char ExchangeForPhysical_YES('Y');
const size_t ExchangeForPhysical_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OutMainCntryUIndex = Field<Amt, 412>;
//-------------------------------------------------------------------------------------------------
using CrossPercent = Field<Percentage, 413>;
//-------------------------------------------------------------------------------------------------
using ProgRptReqs = Field<int, 414>;
const int ProgRptReqs_BUYSIDE(1);
const int ProgRptReqs_SELLSIDE(2);
const int ProgRptReqs_REALTIME(3);
const size_t ProgRptReqs_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ProgPeriodInterval = Field<int, 415>;
//-------------------------------------------------------------------------------------------------
using IncTaxInd = Field<int, 416>;
const int IncTaxInd_NET(1);
const int IncTaxInd_GROSS(2);
const size_t IncTaxInd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NumBidders = Field<int, 417>;
//-------------------------------------------------------------------------------------------------
using BidTradeType = Field<char, 418>;
const char BidTradeType_AGENCY('A');
const char BidTradeType_VWAPGUARANTEE('G');
const char BidTradeType_GUARANTEEDCLOSE('J');
const char BidTradeType_RISKTRADE('R');
const size_t BidTradeType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using BasisPxType = Field<char, 419>;
const char BasisPxType_CLSPXMORN('2');
const char BasisPxType_CLSPX('3');
const char BasisPxType_CURRPX('4');
const char BasisPxType_SQ('5');
const char BasisPxType_VWAPDAY('6');
const char BasisPxType_VWAPMORN('7');
const char BasisPxType_VWAPAFT('8');
const char BasisPxType_VWAPDAYXYORI('9');
const char BasisPxType_VWAPMORNXYORI('A');
const char BasisPxType_VWAPAFTXYORI('B');
const char BasisPxType_STRIKE('C');
const char BasisPxType_OPEN('D');
const char BasisPxType_OTHERS('Z');
const size_t BasisPxType_realm_els(13);
//-------------------------------------------------------------------------------------------------
using NoBidComponents = Field<NumInGroup, 420>;
//-------------------------------------------------------------------------------------------------
using Country = Field<country, 421>;
//-------------------------------------------------------------------------------------------------
using TotNoStrikes = Field<int, 422>;
//-------------------------------------------------------------------------------------------------
using PriceType = Field<int, 423>;
const int PriceType_PCT(1);
const int PriceType_CPS(2);
const int PriceType_ABS(3);
const int PriceType_DISCOUNT(4);
const int PriceType_PREMIUM(5);
const int PriceType_SPREAD(6);
const int PriceType_TEDPRICE(7);
const int PriceType_TEDYIELD(8);
const int PriceType_YIELD(9);
const int PriceType_FIXEDCABINETTRADEPRICE(10);
const int PriceType_VARIABLECABINETTRADEPRICE(11);
const size_t PriceType_realm_els(11);
//-------------------------------------------------------------------------------------------------
using DayOrderQty = Field<Qty, 424>;
//-------------------------------------------------------------------------------------------------
using DayCumQty = Field<Qty, 425>;
//-------------------------------------------------------------------------------------------------
using DayAvgPx = Field<price, 426>;
//-------------------------------------------------------------------------------------------------
using GTBookingInst = Field<int, 427>;
const int GTBookingInst_BOOKALL(0);
const int GTBookingInst_ACCUMUNTILFILL(1);
const int GTBookingInst_ACCUMUNTILNOTIFY(2);
const size_t GTBookingInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NoStrikes = Field<NumInGroup, 428>;
//-------------------------------------------------------------------------------------------------
using ListStatusType = Field<int, 429>;
const int ListStatusType_ACK(1);
const int ListStatusType_RESP(2);
const int ListStatusType_TIMED(3);
const int ListStatusType_EXECSTART(4);
const int ListStatusType_ALLDONE(5);
const int ListStatusType_ALERT(6);
const size_t ListStatusType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using NetGrossInd = Field<int, 430>;
const int NetGrossInd_NET(1);
const int NetGrossInd_GROSS(2);
const size_t NetGrossInd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ListOrderStatus = Field<int, 431>;
const int ListOrderStatus_INBIDPROC(1);
const int ListOrderStatus_RECVFOREXEC(2);
const int ListOrderStatus_EXEC(3);
const int ListOrderStatus_CXL(4);
const int ListOrderStatus_ALERT(5);
const int ListOrderStatus_ALLDONE(6);
const int ListOrderStatus_REJ(7);
const size_t ListOrderStatus_realm_els(7);
//-------------------------------------------------------------------------------------------------
using ExpireDate = Field<LocalMktDate, 432>;
//-------------------------------------------------------------------------------------------------
using ListExecInstType = Field<char, 433>;
const char ListExecInstType_IMMED('1');
const char ListExecInstType_WAIT('2');
const char ListExecInstType_EXCHCIVSELL('3');
const char ListExecInstType_EXCHCIVBUYTOP('4');
const char ListExecInstType_EXCHCIVBUYWD('5');
const size_t ListExecInstType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using CxlRejResponseTo = Field<char, 434>;
const char CxlRejResponseTo_ORDCXLREQ('1');
const char CxlRejResponseTo_ORDCXLREPREQ('2');
const size_t CxlRejResponseTo_realm_els(2);
//-------------------------------------------------------------------------------------------------
using UnderlyingCouponRate = Field<Percentage, 435>;
//-------------------------------------------------------------------------------------------------
using UnderlyingContractMultiplier = Field<fp_type, 436>;
//-------------------------------------------------------------------------------------------------
using ContraTradeQty = Field<Qty, 437>;
//-------------------------------------------------------------------------------------------------
using ContraTradeTime = Field<UTCTimestamp, 438>;
//-------------------------------------------------------------------------------------------------
using LiquidityNumSecurities = Field<int, 441>;
//-------------------------------------------------------------------------------------------------
using MultiLegReportingType = Field<char, 442>;
const char MultiLegReportingType_SINGLE('1');
const char MultiLegReportingType_INDIVLEG('2');
const char MultiLegReportingType_MULTILEG('3');
const size_t MultiLegReportingType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using StrikeTime = Field<UTCTimestamp, 443>;
//-------------------------------------------------------------------------------------------------
using ListStatusText = Field<f8String, 444>;
//-------------------------------------------------------------------------------------------------
using EncodedListStatusTextLen = Field<Length, 445>;
//-------------------------------------------------------------------------------------------------
using EncodedListStatusText = Field<data, 446>;
//-------------------------------------------------------------------------------------------------
using PartyIDSource = Field<char, 447>;
const char PartyIDSource_KOREANINVESTORID('1');
const char PartyIDSource_TAIWANESEQUALIFIED('2');
const char PartyIDSource_TAIWANESETRADINGACCT('3');
const char PartyIDSource_MCDNUMBER('4');
const char PartyIDSource_CHINESEBSHARE('5');
const char PartyIDSource_UKNATIONALINSPENNUMBER('6');
const char PartyIDSource_USSOCIALSECURITY('7');
const char PartyIDSource_USEMPLOYERIDNUMBER('8');
const char PartyIDSource_AUSTRALIANBUSINESSNUMBER('9');
const char PartyIDSource_AUSTRALIANTAXFILENUMBER('A');
const char PartyIDSource_BIC('B');
const char PartyIDSource_ACCPTMARKETPART('C');
const char PartyIDSource_PROPCODE('D');
const char PartyIDSource_ISOCODE('E');
const char PartyIDSource_SETTLENTLOC('F');
const char PartyIDSource_MIC('G');
const char PartyIDSource_CSDPARTCODE('H');
const char PartyIDSource_DIRECTEDDEFINEDISITC('I');
const size_t PartyIDSource_realm_els(18);
//-------------------------------------------------------------------------------------------------
using PartyID = Field<f8String, 448>;
//-------------------------------------------------------------------------------------------------
using NetChgPrevDay = Field<PriceOffset, 451>;
//-------------------------------------------------------------------------------------------------
using PartyRole = Field<int, 452>;
const int PartyRole_EXECUTINGFIRM(1);
const int PartyRole_BROKEROFCREDIT(2);
const int PartyRole_CLIENTID(3);
const int PartyRole_CLEARINGFIRM(4);
const int PartyRole_INVESTORID(5);
const int PartyRole_INTRODUCINGFIRM(6);
const int PartyRole_ENTERINGFIRM(7);
const int PartyRole_LOCATELENDINGFIRM(8);
const int PartyRole_FUNDMANAGER(9);
const int PartyRole_SETTLEMENTLOCATION(10);
const int PartyRole_INITIATINGTRADER(11);
const int PartyRole_EXECUTINGTRADER(12);
const int PartyRole_ORDERORIGINATOR(13);
const int PartyRole_GIVEUPCLEARINGFIRM(14);
const int PartyRole_CORRESPONDANTCLEARINGFIRM(15);
const int PartyRole_EXECUTINGSYSTEM(16);
const int PartyRole_CONTRAFIRM(17);
const int PartyRole_CONTRACLEARINGFIRM(18);
const int PartyRole_SPONSORINGFIRM(19);
const int PartyRole_UNDRCONTRAFIRM(20);
const int PartyRole_CLEARINGORGANIZATION(21);
const int PartyRole_EXCHANGE(22);
const int PartyRole_CUSTOMERACCOUNT(24);
const int PartyRole_CORRESPONDENTCLEARINGORGANIZATION(25);
const int PartyRole_CORRESPONDENTBROKER(26);
const int PartyRole_BUYERSELLERRECEIVERDELIVERER(27);
const int PartyRole_CUSTODIAN(28);
const int PartyRole_INTERMEDIARY(29);
const int PartyRole_AGENT(30);
const int PartyRole_SUBCUSTODIAN(31);
const int PartyRole_BENEFICIARY(32);
const int PartyRole_INTERESTEDPARTY(33);
const int PartyRole_REGULATORYBODY(34);
const int PartyRole_LIQUIDITYPROVIDER(35);
const int PartyRole_ENTERINGTRADER(36);
const int PartyRole_CONTRATRADER(37);
const int PartyRole_POSITIONACCOUNT(38);
const int PartyRole_ALLOCENTITY(39);
const size_t PartyRole_realm_els(38);
//-------------------------------------------------------------------------------------------------
using NoPartyIDs = Field<NumInGroup, 453>;
//-------------------------------------------------------------------------------------------------
using NoSecurityAltID = Field<NumInGroup, 454>;
//-------------------------------------------------------------------------------------------------
using SecurityAltID = Field<f8String, 455>;
//-------------------------------------------------------------------------------------------------
using SecurityAltIDSource = Field<f8String, 456>;
//-------------------------------------------------------------------------------------------------
using NoUnderlyingSecurityAltID = Field<NumInGroup, 457>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityAltID = Field<f8String, 458>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityAltIDSource = Field<f8String, 459>;
//-------------------------------------------------------------------------------------------------
using Product = Field<int, 460>;
const int Product_AGENCY(1);
const int Product_COMMODITY(2);
const int Product_CORPORATE(3);
const int Product_CURRENCY(4);
const int Product_EQUITY(5);
const int Product_GOVERNMENT(6);
const int Product_INDEX(7);
const int Product_LOAN(8);
const int Product_MONEYMARKET(9);
const int Product_MORTGAGE(10);
const int Product_MUNICIPAL(11);
const int Product_OTHER(12);
const int Product_FINANCING(13);
const size_t Product_realm_els(13);
//-------------------------------------------------------------------------------------------------
using CFICode = Field<f8String, 461>;
//-------------------------------------------------------------------------------------------------
using UnderlyingProduct = Field<int, 462>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCFICode = Field<f8String, 463>;
//-------------------------------------------------------------------------------------------------
using TestMessageIndicator = Field<Boolean, 464>;
const char TestMessageIndicator_NO('N');
const char TestMessageIndicator_YES('Y');
const size_t TestMessageIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using BookingRefID = Field<f8String, 466>;
//-------------------------------------------------------------------------------------------------
using IndividualAllocID = Field<f8String, 467>;
//-------------------------------------------------------------------------------------------------
using RoundingDirection = Field<char, 468>;
const char RoundingDirection_ROUNDNEAREST('0');
const char RoundingDirection_ROUNDDOWN('1');
const char RoundingDirection_ROUNDUP('2');
const size_t RoundingDirection_realm_els(3);
//-------------------------------------------------------------------------------------------------
using RoundingModulus = Field<fp_type, 469>;
//-------------------------------------------------------------------------------------------------
using CountryOfIssue = Field<country, 470>;
//-------------------------------------------------------------------------------------------------
using StateOrProvinceOfIssue = Field<f8String, 471>;
//-------------------------------------------------------------------------------------------------
using LocaleOfIssue = Field<f8String, 472>;
//-------------------------------------------------------------------------------------------------
using NoRegistDtls = Field<NumInGroup, 473>;
//-------------------------------------------------------------------------------------------------
using MailingDtls = Field<f8String, 474>;
//-------------------------------------------------------------------------------------------------
using InvestorCountryOfResidence = Field<country, 475>;
//-------------------------------------------------------------------------------------------------
using PaymentRef = Field<f8String, 476>;
//-------------------------------------------------------------------------------------------------
using DistribPaymentMethod = Field<int, 477>;
const int DistribPaymentMethod_CREST(1);
const int DistribPaymentMethod_NSCC(2);
const int DistribPaymentMethod_EUROCLEAR(3);
const int DistribPaymentMethod_CLEARSTREAM(4);
const int DistribPaymentMethod_CHEQUE(5);
const int DistribPaymentMethod_TELEGRAPHICTRANSFER(6);
const int DistribPaymentMethod_FEDWIRE(7);
const int DistribPaymentMethod_DIRECTCREDITBECSBACS(8);
const int DistribPaymentMethod_ACHCREDIT(9);
const int DistribPaymentMethod_BPAY(10);
const int DistribPaymentMethod_HIGHVALUECLEARINGSYSTEMHVACS(11);
const int DistribPaymentMethod_REINVESTINFUND(12);
const size_t DistribPaymentMethod_realm_els(12);
//-------------------------------------------------------------------------------------------------
using CashDistribCurr = Field<currency, 478>;
//-------------------------------------------------------------------------------------------------
using CommCurrency = Field<currency, 479>;
//-------------------------------------------------------------------------------------------------
using CancellationRights = Field<char, 480>;
const char CancellationRights_NOWAIVER('M');
const char CancellationRights_NOEXECONLY('N');
const char CancellationRights_NOINSTIT('O');
const char CancellationRights_YES('Y');
const size_t CancellationRights_realm_els(4);
//-------------------------------------------------------------------------------------------------
using MoneyLaunderingStatus = Field<char, 481>;
const char MoneyLaunderingStatus_EXBELOWLIM('1');
const char MoneyLaunderingStatus_EXCLIENTMONEYTYPE('2');
const char MoneyLaunderingStatus_EXAUTHCREDIT('3');
const char MoneyLaunderingStatus_NOTCHECKED('N');
const char MoneyLaunderingStatus_PASSED('Y');
const size_t MoneyLaunderingStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using MailingInst = Field<f8String, 482>;
//-------------------------------------------------------------------------------------------------
using TransBkdTime = Field<UTCTimestamp, 483>;
//-------------------------------------------------------------------------------------------------
using ExecPriceType = Field<char, 484>;
const char ExecPriceType_BIDPRICE('B');
const char ExecPriceType_CREATIONPRICE('C');
const char ExecPriceType_CREATIONPRICEADJPCT('D');
const char ExecPriceType_CREATIONPRICEADJAMT('E');
const char ExecPriceType_OFFERPRICE('O');
const char ExecPriceType_OFFERPRICEMINUSADJPCT('P');
const char ExecPriceType_OFFERPRICEMINUSADJAMT('Q');
const char ExecPriceType_SINGLEPRICE('S');
const size_t ExecPriceType_realm_els(8);
//-------------------------------------------------------------------------------------------------
using ExecPriceAdjustment = Field<fp_type, 485>;
//-------------------------------------------------------------------------------------------------
using DateOfBirth = Field<LocalMktDate, 486>;
//-------------------------------------------------------------------------------------------------
using TradeReportTransType = Field<int, 487>;
const int TradeReportTransType_NEW(0);
const int TradeReportTransType_CANCEL(1);
const int TradeReportTransType_REPLACE(2);
const int TradeReportTransType_RELEASE(3);
const int TradeReportTransType_REVERSE(4);
const size_t TradeReportTransType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using CardHolderName = Field<f8String, 488>;
//-------------------------------------------------------------------------------------------------
using CardNumber = Field<f8String, 489>;
//-------------------------------------------------------------------------------------------------
using CardExpDate = Field<LocalMktDate, 490>;
//-------------------------------------------------------------------------------------------------
using CardIssNum = Field<f8String, 491>;
//-------------------------------------------------------------------------------------------------
using PaymentMethod = Field<int, 492>;
const int PaymentMethod_CREST(1);
const int PaymentMethod_NSCC(2);
const int PaymentMethod_EUROCLEAR(3);
const int PaymentMethod_CLEARSTREAM(4);
const int PaymentMethod_CHEQUE(5);
const int PaymentMethod_TELEGRAPHICTRANSFER(6);
const int PaymentMethod_FEDWIRE(7);
const int PaymentMethod_DEBITCARD(8);
const int PaymentMethod_DIRECTDEBITBECS(9);
const int PaymentMethod_DIRECTCREDITBECS(10);
const int PaymentMethod_CREDITCARD(11);
const int PaymentMethod_ACHDEBIT(12);
const int PaymentMethod_ACHCREDIT(13);
const int PaymentMethod_BPAY(14);
const int PaymentMethod_HIGHVALUECLEARINGSYSTEMHVACS(15);
const size_t PaymentMethod_realm_els(15);
//-------------------------------------------------------------------------------------------------
using RegistAcctType = Field<f8String, 493>;
//-------------------------------------------------------------------------------------------------
using Designation = Field<f8String, 494>;
//-------------------------------------------------------------------------------------------------
using TaxAdvantageType = Field<int, 495>;
const int TaxAdvantageType_NONE(0);
const int TaxAdvantageType_MAXIISAUK(1);
const int TaxAdvantageType_TESSAUK(2);
const int TaxAdvantageType_MINICASHISAUK(3);
const int TaxAdvantageType_MINISTOCKSANDSHARESISAUK(4);
const int TaxAdvantageType_MINIINSURANCEISAUK(5);
const int TaxAdvantageType_CURRENTYEARPAYMENTUS(6);
const int TaxAdvantageType_PRIORYEARPAYMENTUS(7);
const int TaxAdvantageType_ASSETTRANSFERUS(8);
const int TaxAdvantageType_EMPLOYEEPRIORYEARUS(9);
const int TaxAdvantageType_EMPLOYEECURRENTYEARUS(10);
const int TaxAdvantageType_EMPLOYERPRIORYEARUS(11);
const int TaxAdvantageType_EMPLOYERCURRENTYEARUS(12);
const int TaxAdvantageType_NONFUNDPROTOTYPEIRAUS(13);
const int TaxAdvantageType_NONFUNDQUALIFIEDPLANUS(14);
const int TaxAdvantageType_DEFINEDCONTRIBUTIONPLANUS(15);
const int TaxAdvantageType_INDIVIDUALRETIREMENTACCOUNTUS(16);
const int TaxAdvantageType_INDIVIDUALRETIREMENTACCOUNTROLLOVERUS(17);
const int TaxAdvantageType_KEOGHUS(18);
const int TaxAdvantageType_PROFITSHARINGPLANUS(19);
const int TaxAdvantageType_401KUS(20);
const int TaxAdvantageType_SELFDIRECTEDIRAUS(21);
const int TaxAdvantageType_403BUS(22);
const int TaxAdvantageType_457US(23);
const int TaxAdvantageType_ROTHIRAFUNDPROTOTYPEUS(24);
const int TaxAdvantageType_ROTHIRANONPROTOTYPEUS(25);
const int TaxAdvantageType_ROTHCONVERSIONIRAFUNDPROTOTYPEUS(26);
const int TaxAdvantageType_ROTHCONVERSIONIRANONPROTOTYPEUS(27);
const int TaxAdvantageType_EDUCATIONIRAFUNDPROTOTYPEUS(28);
const int TaxAdvantageType_EDUCATIONIRANONPROTOTYPEUS(29);
const int TaxAdvantageType_OTHER(999);
const size_t TaxAdvantageType_realm_els(31);
//-------------------------------------------------------------------------------------------------
using RegistRejReasonText = Field<f8String, 496>;
//-------------------------------------------------------------------------------------------------
using FundRenewWaiv = Field<char, 497>;
const char FundRenewWaiv_NO('N');
const char FundRenewWaiv_YES('Y');
const size_t FundRenewWaiv_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CashDistribAgentName = Field<f8String, 498>;
//-------------------------------------------------------------------------------------------------
using CashDistribAgentCode = Field<f8String, 499>;
//-------------------------------------------------------------------------------------------------
using CashDistribAgentAcctNumber = Field<f8String, 500>;
//-------------------------------------------------------------------------------------------------
using CashDistribPayRef = Field<f8String, 501>;
//-------------------------------------------------------------------------------------------------
using CashDistribAgentAcctName = Field<f8String, 502>;
//-------------------------------------------------------------------------------------------------
using CardStartDate = Field<LocalMktDate, 503>;
//-------------------------------------------------------------------------------------------------
using PaymentDate = Field<LocalMktDate, 504>;
//-------------------------------------------------------------------------------------------------
using PaymentRemitterID = Field<f8String, 505>;
//-------------------------------------------------------------------------------------------------
using RegistStatus = Field<char, 506>;
const char RegistStatus_ACCEPTED('A');
const char RegistStatus_HELD('H');
const char RegistStatus_REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING('N');
const char RegistStatus_REJECTED('R');
const size_t RegistStatus_realm_els(4);
//-------------------------------------------------------------------------------------------------
using RegistRejReasonCode = Field<int, 507>;
const int RegistRejReasonCode_INVALIDACCOUNTTYPE(1);
const int RegistRejReasonCode_INVALIDTAXEXEMPTTYPE(2);
const int RegistRejReasonCode_INVALIDOWNERSHIPTYPE(3);
const int RegistRejReasonCode_INVALIDNOREGDETLS(4);
const int RegistRejReasonCode_INVALIDREGSEQNO(5);
const int RegistRejReasonCode_INVALIDREGDTLS(6);
const int RegistRejReasonCode_INVALIDMAILINGDTLS(7);
const int RegistRejReasonCode_INVALIDMAILINGINST(8);
const int RegistRejReasonCode_INVALIDINVESTORID(9);
const int RegistRejReasonCode_INVALIDINVESTORIDSOURCE(10);
const int RegistRejReasonCode_INVALIDDATEOFBIRTH(11);
const int RegistRejReasonCode_INVALIDINVESTORCOUNTRYOFRESIDENCE(12);
const int RegistRejReasonCode_INVALIDNODISTRIBINSTNS(13);
const int RegistRejReasonCode_INVALIDDISTRIBPERCENTAGE(14);
const int RegistRejReasonCode_INVALIDDISTRIBPAYMENTMETHOD(15);
const int RegistRejReasonCode_INVALIDCASHDISTRIBAGENTACCTNAME(16);
const int RegistRejReasonCode_INVALIDCASHDISTRIBAGENTCODE(17);
const int RegistRejReasonCode_INVALIDCASHDISTRIBAGENTACCTNUM(18);
const int RegistRejReasonCode_OTHER(99);
const size_t RegistRejReasonCode_realm_els(19);
//-------------------------------------------------------------------------------------------------
using RegistRefID = Field<f8String, 508>;
//-------------------------------------------------------------------------------------------------
using RegistDtls = Field<f8String, 509>;
//-------------------------------------------------------------------------------------------------
using NoDistribInsts = Field<NumInGroup, 510>;
//-------------------------------------------------------------------------------------------------
using RegistEmail = Field<f8String, 511>;
//-------------------------------------------------------------------------------------------------
using DistribPercentage = Field<Percentage, 512>;
//-------------------------------------------------------------------------------------------------
using RegistID = Field<f8String, 513>;
//-------------------------------------------------------------------------------------------------
using RegistTransType = Field<char, 514>;
const char RegistTransType_NEW('0');
const char RegistTransType_REPLACE('1');
const char RegistTransType_CANCEL('2');
const size_t RegistTransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ExecValuationPoint = Field<UTCTimestamp, 515>;
//-------------------------------------------------------------------------------------------------
using OrderPercent = Field<Percentage, 516>;
//-------------------------------------------------------------------------------------------------
using OwnershipType = Field<char, 517>;
const char OwnershipType_JOINT_TRUSTEES('2');
const char OwnershipType_JOINT_INVESTORS('J');
const char OwnershipType_TENANTS_IN_COMMON('T');
const size_t OwnershipType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NoContAmts = Field<NumInGroup, 518>;
//-------------------------------------------------------------------------------------------------
using ContAmtType = Field<int, 519>;
const int ContAmtType_COMMISSIONAMT(1);
const int ContAmtType_COMMISSIONPCT(2);
const int ContAmtType_INITIALCHARGEAMT(3);
const int ContAmtType_INITIALCHARGEPCT(4);
const int ContAmtType_DISCOUNTAMT(5);
const int ContAmtType_DISCOUNTPCT(6);
const int ContAmtType_DILUTIONLEVYAMT(7);
const int ContAmtType_DILUTIONLEVYPCT(8);
const int ContAmtType_EXITCHARGEAMT(9);
const int ContAmtType_EXITCHARGEPCT(10);
const int ContAmtType_FUNDBASEDRENEWALCOMM(11);
const int ContAmtType_PROJECTEDFUNDVALUE(12);
const int ContAmtType_FUNDBASEDRENEWALCOMMAMTORD(13);
const int ContAmtType_FUNDBASEDRENEWALCOMMAMTPROJ(14);
const int ContAmtType_NETSETTLEMENTAMOUNT(15);
const size_t ContAmtType_realm_els(15);
//-------------------------------------------------------------------------------------------------
using ContAmtValue = Field<fp_type, 520>;
//-------------------------------------------------------------------------------------------------
using ContAmtCurr = Field<currency, 521>;
//-------------------------------------------------------------------------------------------------
using OwnerType = Field<int, 522>;
const int OwnerType_INDIVINVESTOR(1);
const int OwnerType_PUBLICCOMPANY(2);
const int OwnerType_PRIVATECOMPANY(3);
const int OwnerType_INDIVTRUSTEE(4);
const int OwnerType_COMPANYTRUSTEE(5);
const int OwnerType_PENSIONPLAN(6);
const int OwnerType_CUSTODIANMINORSACT(7);
const int OwnerType_TRUSTS(8);
const int OwnerType_FIDUCIARIES(9);
const int OwnerType_NETWORKINGSUBACCT(10);
const int OwnerType_NON_PROFITORG(11);
const int OwnerType_CORPBODY(12);
const int OwnerType_NOMINEE(13);
const size_t OwnerType_realm_els(13);
//-------------------------------------------------------------------------------------------------
using PartySubID = Field<f8String, 523>;
//-------------------------------------------------------------------------------------------------
using NestedPartyID = Field<f8String, 524>;
//-------------------------------------------------------------------------------------------------
using NestedPartyIDSource = Field<char, 525>;
//-------------------------------------------------------------------------------------------------
using SecondaryClOrdID = Field<f8String, 526>;
//-------------------------------------------------------------------------------------------------
using SecondaryExecID = Field<f8String, 527>;
//-------------------------------------------------------------------------------------------------
using OrderCapacity = Field<char, 528>;
const char OrderCapacity_AGENCY('A');
const char OrderCapacity_PROPRIETARY('G');
const char OrderCapacity_INDIVIDUAL('I');
const char OrderCapacity_PRINCIPAL('P');
const char OrderCapacity_RISKLESSPRINCIPAL('R');
const char OrderCapacity_AGENTOTHERMEMBER('W');
const size_t OrderCapacity_realm_els(6);
//-------------------------------------------------------------------------------------------------
using OrderRestrictions = Field<MultipleStringValue, 529>;
const f8String OrderRestrictions_PROGRAMTRADE("1");
const f8String OrderRestrictions_INDEXARBITRAGE("2");
const f8String OrderRestrictions_NON_INDEXARBITRAGE("3");
const f8String OrderRestrictions_COMPETINGMARKETMAKER("4");
const f8String OrderRestrictions_ACTMM("5");
const f8String OrderRestrictions_ACTMMDERIV("6");
const f8String OrderRestrictions_FORENTITY("7");
const f8String OrderRestrictions_EXMRKTPART("8");
const f8String OrderRestrictions_EXINTMRKTLINK("9");
const f8String OrderRestrictions_RISKARB("A");
const size_t OrderRestrictions_realm_els(10);
//-------------------------------------------------------------------------------------------------
using MassCancelRequestType = Field<char, 530>;
const char MassCancelRequestType_CXLORDERSSECURITY('1');
const char MassCancelRequestType_CXLORDERSUNDERLYINGSECURITY('2');
const char MassCancelRequestType_CXLORDERSPRODUCT('3');
const char MassCancelRequestType_CXLORDERSCFICODE('4');
const char MassCancelRequestType_CXLORDERSSECURITYTYPE('5');
const char MassCancelRequestType_CXLORDERSTRDSESSION('6');
const char MassCancelRequestType_CXLALLORDERS('7');
const size_t MassCancelRequestType_realm_els(7);
//-------------------------------------------------------------------------------------------------
using MassCancelResponse = Field<char, 531>;
const char MassCancelResponse_CXLREQREJ('0');
const char MassCancelResponse_CXLORDERSSECURITY('1');
const char MassCancelResponse_CXLORDERSUNDERLYINGSECURITY('2');
const char MassCancelResponse_CXLORDERSPRODUCT('3');
const char MassCancelResponse_CXLORDERSCFICODE('4');
const char MassCancelResponse_CXLORDERSSECURITYTYPE('5');
const char MassCancelResponse_CXLORDERSTRDSESSION('6');
const char MassCancelResponse_CXLALLORDERS('7');
const size_t MassCancelResponse_realm_els(8);
//-------------------------------------------------------------------------------------------------
using MassCancelRejectReason = Field<char, 532>;
const char MassCancelRejectReason_MASSCXLNOTSUPPORTED('0');
const char MassCancelRejectReason_INVALIDSECURITY('1');
const char MassCancelRejectReason_INVALIDUNDERLYING('2');
const char MassCancelRejectReason_INVALIDPRODUCT('3');
const char MassCancelRejectReason_INVALIDCFICODE('4');
const char MassCancelRejectReason_INVALIDSECURITYTYPE('5');
const char MassCancelRejectReason_INVALIDTRDSESSION('6');
const char MassCancelRejectReason_OTHER('9');
const size_t MassCancelRejectReason_realm_els(8);
//-------------------------------------------------------------------------------------------------
using TotalAffectedOrders = Field<int, 533>;
//-------------------------------------------------------------------------------------------------
using NoAffectedOrders = Field<int, 534>;
//-------------------------------------------------------------------------------------------------
using AffectedOrderID = Field<f8String, 535>;
//-------------------------------------------------------------------------------------------------
using AffectedSecondaryOrderID = Field<f8String, 536>;
//-------------------------------------------------------------------------------------------------
using QuoteType = Field<int, 537>;
const int QuoteType_INDICATIVE(0);
const int QuoteType_TRADEABLE(1);
const int QuoteType_RESTRICTEDTRADEABLE(2);
const int QuoteType_COUNTER(3);
const size_t QuoteType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NestedPartyRole = Field<int, 538>;
//-------------------------------------------------------------------------------------------------
using NoNestedPartyIDs = Field<NumInGroup, 539>;
//-------------------------------------------------------------------------------------------------
using TotalAccruedInterestAmt = Field<Amt, 540>;
//-------------------------------------------------------------------------------------------------
using MaturityDate = Field<LocalMktDate, 541>;
//-------------------------------------------------------------------------------------------------
using UnderlyingMaturityDate = Field<LocalMktDate, 542>;
//-------------------------------------------------------------------------------------------------
using InstrRegistry = Field<f8String, 543>;
const f8String InstrRegistry_CUSTODIAN("BIC");
const f8String InstrRegistry_COUNTRY("ISO");
const f8String InstrRegistry_PHYSICAL("ZZ");
const size_t InstrRegistry_realm_els(3);
//-------------------------------------------------------------------------------------------------
using CashMargin = Field<char, 544>;
const char CashMargin_CASH('1');
const char CashMargin_MARGINOPEN('2');
const char CashMargin_MARGINCLOSE('3');
const size_t CashMargin_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NestedPartySubID = Field<f8String, 545>;
//-------------------------------------------------------------------------------------------------
using Scope = Field<MultipleStringValue, 546>;
const f8String Scope_LOCALMARKET("1");
const f8String Scope_NATIONAL("2");
const f8String Scope_GLOBAL("3");
const size_t Scope_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MDImplicitDelete = Field<Boolean, 547>;
const char MDImplicitDelete_NO('N');
const char MDImplicitDelete_YES('Y');
const size_t MDImplicitDelete_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CrossID = Field<f8String, 548>;
//-------------------------------------------------------------------------------------------------
using CrossType = Field<int, 549>;
const int CrossType_CROSSAON(1);
const int CrossType_CROSSIOC(2);
const int CrossType_CROSSONESIDE(3);
const int CrossType_CROSSSAMEPRICE(4);
const size_t CrossType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using CrossPrioritization = Field<int, 550>;
const int CrossPrioritization_NONE(0);
const int CrossPrioritization_BUY_SIDE_PRIORITIZED(1);
const int CrossPrioritization_SELL_SIDE_PRIORITIZED(2);
const size_t CrossPrioritization_realm_els(3);
//-------------------------------------------------------------------------------------------------
using OrigCrossID = Field<f8String, 551>;
//-------------------------------------------------------------------------------------------------
using NoSides = Field<NumInGroup, 552>;
const int NoSides_ONESIDE(1);
const int NoSides_BOTHSIDES(2);
const size_t NoSides_realm_els(2);
//-------------------------------------------------------------------------------------------------
using Username = Field<f8String, 553>;
//-------------------------------------------------------------------------------------------------
using Password = Field<f8String, 554>;
//-------------------------------------------------------------------------------------------------
using NoLegs = Field<NumInGroup, 555>;
//-------------------------------------------------------------------------------------------------
using LegCurrency = Field<currency, 556>;
//-------------------------------------------------------------------------------------------------
using TotNoSecurityTypes = Field<int, 557>;
//-------------------------------------------------------------------------------------------------
using NoSecurityTypes = Field<NumInGroup, 558>;
//-------------------------------------------------------------------------------------------------
using SecurityListRequestType = Field<int, 559>;
const int SecurityListRequestType_SYMBOL(0);
const int SecurityListRequestType_SECURITYTYPECFICODE(1);
const int SecurityListRequestType_PRODUCT(2);
const int SecurityListRequestType_TRADINGSESSIONID(3);
const int SecurityListRequestType_ALLSECURITIES(4);
const size_t SecurityListRequestType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using SecurityRequestResult = Field<int, 560>;
const int SecurityRequestResult_VALIDREQ(0);
const int SecurityRequestResult_INVALIDREQ(1);
const int SecurityRequestResult_NOINSTRUMENTSFOUND(2);
const int SecurityRequestResult_NOTAUTHORIZED(3);
const int SecurityRequestResult_INSTRUMENTUNAVAILABLE(4);
const int SecurityRequestResult_NOTSUPPORTED(5);
const size_t SecurityRequestResult_realm_els(6);
//-------------------------------------------------------------------------------------------------
using RoundLot = Field<Qty, 561>;
//-------------------------------------------------------------------------------------------------
using MinTradeVol = Field<Qty, 562>;
//-------------------------------------------------------------------------------------------------
using MultiLegRptTypeReq = Field<int, 563>;
const int MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY(0);
const int MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY(1);
const int MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY(2);
const size_t MultiLegRptTypeReq_realm_els(3);
//-------------------------------------------------------------------------------------------------
using LegPositionEffect = Field<char, 564>;
//-------------------------------------------------------------------------------------------------
using LegCoveredOrUncovered = Field<int, 565>;
//-------------------------------------------------------------------------------------------------
using LegPrice = Field<price, 566>;
//-------------------------------------------------------------------------------------------------
using TradSesStatusRejReason = Field<int, 567>;
const int TradSesStatusRejReason_UNKNOWNTRADINGSESSIONID(1);
const int TradSesStatusRejReason_OTHER(99);
const size_t TradSesStatusRejReason_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TradeRequestID = Field<f8String, 568>;
//-------------------------------------------------------------------------------------------------
using TradeRequestType = Field<int, 569>;
const int TradeRequestType_ALLTRADES(0);
const int TradeRequestType_MATCHEDTRADES(1);
const int TradeRequestType_UNMATCHEDTRADES(2);
const int TradeRequestType_UNREPORTEDTRADES(3);
const int TradeRequestType_ADVISORIESMATCH(4);
const size_t TradeRequestType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using PreviouslyReported = Field<Boolean, 570>;
const char PreviouslyReported_NO('N');
const char PreviouslyReported_YES('Y');
const size_t PreviouslyReported_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TradeReportID = Field<f8String, 571>;
//-------------------------------------------------------------------------------------------------
using TradeReportRefID = Field<f8String, 572>;
//-------------------------------------------------------------------------------------------------
using MatchStatus = Field<char, 573>;
const char MatchStatus_COMPMATAFF('0');
const char MatchStatus_UNCOMPUNMATUNAFF('1');
const char MatchStatus_ADVALERT('2');
const size_t MatchStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MatchType = Field<f8String, 574>;
const f8String MatchType_EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSFOURBADGESANDEXECUTIONTIME("A1");
const f8String MatchType_EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSFOURBADGES("A2");
const f8String MatchType_EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSTWOBADGESANDEXECUTIONTIME("A3");
const f8String MatchType_EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSTWOBADGES("A4");
const f8String MatchType_EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSEXECUTIONTIME("A5");
const f8String MatchType_NASDAQACTM1MATCH("ACTM1");
const f8String MatchType_NASDAQACTM2MATCH("ACTM2");
const f8String MatchType_NASDAQACTACCEPTEDTRADE("ACTM3");
const f8String MatchType_NASDAQACTDEFAULTTRADE("ACTM4");
const f8String MatchType_NASDAQACTDEFAULTAFTERM2("ACTM5");
const f8String MatchType_NASDAQACTM6MATCH("ACTM6");
const f8String MatchType_NASDAQNONACT("ACTMT");
const f8String MatchType_COMPAREDRECORDSRESULTINGFROMSTAMPEDADVISORIESORSPECIALISTACCEPTSPAIROFFS("AQ");
const f8String MatchType_EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORMINUSBADGESANDTIMES("M1");
const f8String MatchType_SUMMARIZEDMATCHMINUSBADGESANDTIMES("M2");
const f8String MatchType_OCSLOCKEDIN("MT");
const f8String MatchType_SUMMARIZEDMATCHUSINGA1("S1");
const f8String MatchType_SUMMARIZEDMATCHUSINGA2("S2");
const f8String MatchType_SUMMARIZEDMATCHUSINGA3("S3");
const f8String MatchType_SUMMARIZEDMATCHUSINGA4("S4");
const f8String MatchType_SUMMARIZEDMATCHUSINGA5("S5");
const size_t MatchType_realm_els(21);
//-------------------------------------------------------------------------------------------------
using OddLot = Field<Boolean, 575>;
const char OddLot_NO('N');
const char OddLot_YES('Y');
const size_t OddLot_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoClearingInstructions = Field<NumInGroup, 576>;
//-------------------------------------------------------------------------------------------------
using ClearingInstruction = Field<int, 577>;
const int ClearingInstruction_PROCESSNORMALLY(0);
const int ClearingInstruction_EXCLUDEFROMALLNETTING(1);
const int ClearingInstruction_BILATERALNETTINGONLY(2);
const int ClearingInstruction_EXCLEARING(3);
const int ClearingInstruction_SPECIALTRADE(4);
const int ClearingInstruction_MULTILATERALNETTING(5);
const int ClearingInstruction_CLEARAGAINSTCENTRALCOUNTERPARTY(6);
const int ClearingInstruction_EXCLUDEFROMCENTRALCOUNTERPARTY(7);
const int ClearingInstruction_MANUALMODEPREPOSTINGANDORPREGIVEUP(8);
const int ClearingInstruction_AUTOMATICPOSTINGMODETRADEPOSTINGTOTHEPOSITIONACCOUNTNUMBERSPECIFIED(9);
const int ClearingInstruction_AUTOMATICGIVEUPMODETRADEGIVEUPTOTHEGIVEUPDESTINATIONNUMBERSPECIFIED(10);
const int ClearingInstruction_QUALIFIEDSERVICEREPRESENTATIVEQSR(11);
const int ClearingInstruction_CUSTOMERTRADE(12);
const int ClearingInstruction_SELFCLEARING(13);
const size_t ClearingInstruction_realm_els(14);
//-------------------------------------------------------------------------------------------------
using TradeInputSource = Field<f8String, 578>;
//-------------------------------------------------------------------------------------------------
using TradeInputDevice = Field<f8String, 579>;
//-------------------------------------------------------------------------------------------------
using NoDates = Field<int, 580>;
//-------------------------------------------------------------------------------------------------
using AccountType = Field<int, 581>;
const int AccountType_ACCOUNTCUSTOMER(1);
const int AccountType_ACCOUNTNONCUSTOMER(2);
const int AccountType_HOUSETRADER(3);
const int AccountType_FLOORTRADER(4);
const int AccountType_ACCOUNTNONCUSTOMERCROSS(6);
const int AccountType_HOUSETRADERCROSS(7);
const int AccountType_JOINTBOACCT(8);
const size_t AccountType_realm_els(7);
//-------------------------------------------------------------------------------------------------
using CustOrderCapacity = Field<int, 582>;
const int CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT(1);
const int CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT(2);
const int CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER(3);
const int CustOrderCapacity_ALL_OTHER(4);
const size_t CustOrderCapacity_realm_els(4);
//-------------------------------------------------------------------------------------------------
using ClOrdLinkID = Field<f8String, 583>;
//-------------------------------------------------------------------------------------------------
using MassStatusReqID = Field<f8String, 584>;
//-------------------------------------------------------------------------------------------------
using MassStatusReqType = Field<int, 585>;
const int MassStatusReqType_STATUSSECURITY(1);
const int MassStatusReqType_STATUSUNDERLYINGSECURITY(2);
const int MassStatusReqType_STATUSPRODUCT(3);
const int MassStatusReqType_STATUSCFICODE(4);
const int MassStatusReqType_STATUSSECURITYTYPE(5);
const int MassStatusReqType_STATUSTRDSESSION(6);
const int MassStatusReqType_STATUSALLORDERS(7);
const int MassStatusReqType_STATUSPARTYID(8);
const size_t MassStatusReqType_realm_els(8);
//-------------------------------------------------------------------------------------------------
using OrigOrdModTime = Field<UTCTimestamp, 586>;
//-------------------------------------------------------------------------------------------------
using LegSettlType = Field<char, 587>;
//-------------------------------------------------------------------------------------------------
using LegSettlDate = Field<LocalMktDate, 588>;
//-------------------------------------------------------------------------------------------------
using DayBookingInst = Field<char, 589>;
const char DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR_AUTO('0');
const char DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING_SPEAK_FIRST('1');
const char DayBookingInst_ACCUMULATE('2');
const size_t DayBookingInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using BookingUnit = Field<char, 590>;
const char BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT('0');
const char BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER('1');
const char BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE('2');
const size_t BookingUnit_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PreallocMethod = Field<char, 591>;
const char PreallocMethod_PRORATA('0');
const char PreallocMethod_DO_NOT_PRORATA_DISCUSS_FIRST('1');
const size_t PreallocMethod_realm_els(2);
//-------------------------------------------------------------------------------------------------
using UnderlyingCountryOfIssue = Field<country, 592>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStateOrProvinceOfIssue = Field<f8String, 593>;
//-------------------------------------------------------------------------------------------------
using UnderlyingLocaleOfIssue = Field<f8String, 594>;
//-------------------------------------------------------------------------------------------------
using UnderlyingInstrRegistry = Field<f8String, 595>;
//-------------------------------------------------------------------------------------------------
using LegCountryOfIssue = Field<country, 596>;
//-------------------------------------------------------------------------------------------------
using LegStateOrProvinceOfIssue = Field<f8String, 597>;
//-------------------------------------------------------------------------------------------------
using LegLocaleOfIssue = Field<f8String, 598>;
//-------------------------------------------------------------------------------------------------
using LegInstrRegistry = Field<f8String, 599>;
//-------------------------------------------------------------------------------------------------
using LegSymbol = Field<f8String, 600>;
//-------------------------------------------------------------------------------------------------
using LegSymbolSfx = Field<f8String, 601>;
//-------------------------------------------------------------------------------------------------
using LegSecurityID = Field<f8String, 602>;
//-------------------------------------------------------------------------------------------------
using LegSecurityIDSource = Field<f8String, 603>;
//-------------------------------------------------------------------------------------------------
using NoLegSecurityAltID = Field<f8String, 604>;
//-------------------------------------------------------------------------------------------------
using LegSecurityAltID = Field<f8String, 605>;
//-------------------------------------------------------------------------------------------------
using LegSecurityAltIDSource = Field<f8String, 606>;
//-------------------------------------------------------------------------------------------------
using LegProduct = Field<int, 607>;
//-------------------------------------------------------------------------------------------------
using LegCFICode = Field<f8String, 608>;
//-------------------------------------------------------------------------------------------------
using LegSecurityType = Field<f8String, 609>;
//-------------------------------------------------------------------------------------------------
using LegMaturityMonthYear = Field<MonthYear, 610>;
//-------------------------------------------------------------------------------------------------
using LegMaturityDate = Field<LocalMktDate, 611>;
//-------------------------------------------------------------------------------------------------
using LegStrikePrice = Field<price, 612>;
//-------------------------------------------------------------------------------------------------
using LegOptAttribute = Field<char, 613>;
//-------------------------------------------------------------------------------------------------
using LegContractMultiplier = Field<fp_type, 614>;
//-------------------------------------------------------------------------------------------------
using LegCouponRate = Field<Percentage, 615>;
//-------------------------------------------------------------------------------------------------
using LegSecurityExchange = Field<Exchange, 616>;
//-------------------------------------------------------------------------------------------------
using LegIssuer = Field<f8String, 617>;
//-------------------------------------------------------------------------------------------------
using EncodedLegIssuerLen = Field<Length, 618>;
//-------------------------------------------------------------------------------------------------
using EncodedLegIssuer = Field<data, 619>;
//-------------------------------------------------------------------------------------------------
using LegSecurityDesc = Field<f8String, 620>;
//-------------------------------------------------------------------------------------------------
using EncodedLegSecurityDescLen = Field<Length, 621>;
//-------------------------------------------------------------------------------------------------
using EncodedLegSecurityDesc = Field<data, 622>;
//-------------------------------------------------------------------------------------------------
using LegRatioQty = Field<fp_type, 623>;
//-------------------------------------------------------------------------------------------------
using LegSide = Field<char, 624>;
//-------------------------------------------------------------------------------------------------
using TradingSessionSubID = Field<f8String, 625>;
//-------------------------------------------------------------------------------------------------
using AllocType = Field<int, 626>;
const int AllocType_BUYSIDECALC(1);
const int AllocType_BUYSIDEPRELIM(2);
const int AllocType_SELLSIDECALC(3);
const int AllocType_SELLSIDECALCWITHOUTPRELIM(4);
const int AllocType_BUYSIDEREADYTOBOOKSINGLE(5);
const int AllocType_BUYSIDEREADYTOBOOKCOMBINED(6);
const int AllocType_WAREHOUSEINSTRUCTION(7);
const int AllocType_REQUESTTOINTERMEDIARY(8);
const size_t AllocType_realm_els(8);
//-------------------------------------------------------------------------------------------------
using NoHops = Field<NumInGroup, 627>;
//-------------------------------------------------------------------------------------------------
using HopCompID = Field<f8String, 628>;
//-------------------------------------------------------------------------------------------------
using HopSendingTime = Field<UTCTimestamp, 629>;
//-------------------------------------------------------------------------------------------------
using HopRefID = Field<SeqNum, 630>;
//-------------------------------------------------------------------------------------------------
using MidPx = Field<price, 631>;
//-------------------------------------------------------------------------------------------------
using BidYield = Field<Percentage, 632>;
//-------------------------------------------------------------------------------------------------
using MidYield = Field<Percentage, 633>;
//-------------------------------------------------------------------------------------------------
using OfferYield = Field<Percentage, 634>;
//-------------------------------------------------------------------------------------------------
using ClearingFeeIndicator = Field<f8String, 635>;
const f8String ClearingFeeIndicator_1STYEARDELEGATE("1");
const f8String ClearingFeeIndicator_2NDYEARDELEGATE("2");
const f8String ClearingFeeIndicator_3RDYEARDELEGATE("3");
const f8String ClearingFeeIndicator_4THYEARDELEGATE("4");
const f8String ClearingFeeIndicator_5THYEARDELEGATE("5");
const f8String ClearingFeeIndicator_6THYEARDELEGATE("9");
const f8String ClearingFeeIndicator_CBOEMEMBER("B");
const f8String ClearingFeeIndicator_NONMEMBERCUSTOMER("C");
const f8String ClearingFeeIndicator_EQUITYCLEARINGMEMBER("E");
const f8String ClearingFeeIndicator_FULLASSOCIATEMEMBER("F");
const f8String ClearingFeeIndicator_106H106J("H");
const f8String ClearingFeeIndicator_GIMIDEMCOMMEMBERSHIP("I");
const f8String ClearingFeeIndicator_LESSEE106F("L");
const f8String ClearingFeeIndicator_ALLOTHERS("M");
const size_t ClearingFeeIndicator_realm_els(14);
//-------------------------------------------------------------------------------------------------
using WorkingIndicator = Field<Boolean, 636>;
const char WorkingIndicator_NO('N');
const char WorkingIndicator_YES('Y');
const size_t WorkingIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LegLastPx = Field<price, 637>;
//-------------------------------------------------------------------------------------------------
using PriorityIndicator = Field<int, 638>;
const int PriorityIndicator_PRIORITYUNCHANGED(0);
const int PriorityIndicator_LOSTPRIORITY(1);
const size_t PriorityIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using PriceImprovement = Field<PriceOffset, 639>;
//-------------------------------------------------------------------------------------------------
using Price2 = Field<price, 640>;
//-------------------------------------------------------------------------------------------------
using LastForwardPoints2 = Field<PriceOffset, 641>;
//-------------------------------------------------------------------------------------------------
using BidForwardPoints2 = Field<PriceOffset, 642>;
//-------------------------------------------------------------------------------------------------
using OfferForwardPoints2 = Field<PriceOffset, 643>;
//-------------------------------------------------------------------------------------------------
using RFQReqID = Field<f8String, 644>;
//-------------------------------------------------------------------------------------------------
using MktBidPx = Field<price, 645>;
//-------------------------------------------------------------------------------------------------
using MktOfferPx = Field<price, 646>;
//-------------------------------------------------------------------------------------------------
using MinBidSize = Field<Qty, 647>;
//-------------------------------------------------------------------------------------------------
using MinOfferSize = Field<Qty, 648>;
//-------------------------------------------------------------------------------------------------
using QuoteStatusReqID = Field<f8String, 649>;
//-------------------------------------------------------------------------------------------------
using LegalConfirm = Field<Boolean, 650>;
const char LegalConfirm_NO('N');
const char LegalConfirm_YES('Y');
const size_t LegalConfirm_realm_els(2);
//-------------------------------------------------------------------------------------------------
using UnderlyingLastPx = Field<price, 651>;
//-------------------------------------------------------------------------------------------------
using UnderlyingLastQty = Field<Qty, 652>;
//-------------------------------------------------------------------------------------------------
using LegRefID = Field<f8String, 654>;
//-------------------------------------------------------------------------------------------------
using ContraLegRefID = Field<f8String, 655>;
//-------------------------------------------------------------------------------------------------
using SettlCurrBidFxRate = Field<fp_type, 656>;
//-------------------------------------------------------------------------------------------------
using SettlCurrOfferFxRate = Field<fp_type, 657>;
//-------------------------------------------------------------------------------------------------
using QuoteRequestRejectReason = Field<int, 658>;
const int QuoteRequestRejectReason_UNKNOWNSYM(1);
const int QuoteRequestRejectReason_EXCHANGECLOSED(2);
const int QuoteRequestRejectReason_QUOTEREQUESTEXLIMIT(3);
const int QuoteRequestRejectReason_TOOLATE(4);
const int QuoteRequestRejectReason_INVPRICE(5);
const int QuoteRequestRejectReason_NOTAUTHTOREQQUOTE(6);
const int QuoteRequestRejectReason_NOMATCHFORINQUIRY(7);
const int QuoteRequestRejectReason_NOMARKETFORINSTRUMENT(8);
const int QuoteRequestRejectReason_NOINVENTORY(9);
const int QuoteRequestRejectReason_PASS(10);
const int QuoteRequestRejectReason_OTHER(99);
const size_t QuoteRequestRejectReason_realm_els(11);
//-------------------------------------------------------------------------------------------------
using SideComplianceID = Field<f8String, 659>;
//-------------------------------------------------------------------------------------------------
using AcctIDSource = Field<int, 660>;
const int AcctIDSource_BIC(1);
const int AcctIDSource_SIDCODE(2);
const int AcctIDSource_TFMGSPTA(3);
const int AcctIDSource_OMGEOALERTID(4);
const int AcctIDSource_DTCCCODE(5);
const int AcctIDSource_OTHER(99);
const size_t AcctIDSource_realm_els(6);
//-------------------------------------------------------------------------------------------------
using AllocAcctIDSource = Field<int, 661>;
//-------------------------------------------------------------------------------------------------
using BenchmarkPrice = Field<price, 662>;
//-------------------------------------------------------------------------------------------------
using BenchmarkPriceType = Field<int, 663>;
//-------------------------------------------------------------------------------------------------
using ConfirmID = Field<f8String, 664>;
//-------------------------------------------------------------------------------------------------
using ConfirmStatus = Field<int, 665>;
const int ConfirmStatus_RECEIVED(1);
const int ConfirmStatus_MISMATCHEDACCOUNT(2);
const int ConfirmStatus_MISSINGSETTLEMENTINSTRUCTIONS(3);
const int ConfirmStatus_CONFIRMED(4);
const int ConfirmStatus_REQUESTREJECTED(5);
const size_t ConfirmStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using ConfirmTransType = Field<int, 666>;
const int ConfirmTransType_NEW(0);
const int ConfirmTransType_REPLACE(1);
const int ConfirmTransType_CANCEL(2);
const size_t ConfirmTransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ContractSettlMonth = Field<MonthYear, 667>;
//-------------------------------------------------------------------------------------------------
using DeliveryForm = Field<int, 668>;
const int DeliveryForm_BOOKENTRY(1);
const int DeliveryForm_BEARER(2);
const size_t DeliveryForm_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LastParPx = Field<price, 669>;
//-------------------------------------------------------------------------------------------------
using NoLegAllocs = Field<NumInGroup, 670>;
//-------------------------------------------------------------------------------------------------
using LegAllocAccount = Field<f8String, 671>;
//-------------------------------------------------------------------------------------------------
using LegIndividualAllocID = Field<f8String, 672>;
//-------------------------------------------------------------------------------------------------
using LegAllocQty = Field<Qty, 673>;
//-------------------------------------------------------------------------------------------------
using LegAllocAcctIDSource = Field<f8String, 674>;
//-------------------------------------------------------------------------------------------------
using LegSettlCurrency = Field<currency, 675>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkCurveCurrency = Field<currency, 676>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkCurveName = Field<f8String, 677>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkCurvePoint = Field<f8String, 678>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkPrice = Field<price, 679>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkPriceType = Field<int, 680>;
//-------------------------------------------------------------------------------------------------
using LegBidPx = Field<price, 681>;
//-------------------------------------------------------------------------------------------------
using LegIOIQty = Field<f8String, 682>;
//-------------------------------------------------------------------------------------------------
using NoLegStipulations = Field<NumInGroup, 683>;
//-------------------------------------------------------------------------------------------------
using LegOfferPx = Field<price, 684>;
//-------------------------------------------------------------------------------------------------
using LegPriceType = Field<int, 686>;
//-------------------------------------------------------------------------------------------------
using LegQty = Field<Qty, 687>;
//-------------------------------------------------------------------------------------------------
using LegStipulationType = Field<f8String, 688>;
//-------------------------------------------------------------------------------------------------
using LegStipulationValue = Field<f8String, 689>;
//-------------------------------------------------------------------------------------------------
using LegSwapType = Field<int, 690>;
const int LegSwapType_PARFORPAR(1);
const int LegSwapType_MODIFIEDDURATION(2);
const int LegSwapType_RISK(4);
const int LegSwapType_PROCEEDS(5);
const size_t LegSwapType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using Pool = Field<f8String, 691>;
//-------------------------------------------------------------------------------------------------
using QuotePriceType = Field<int, 692>;
const int QuotePriceType_PERCENT(1);
const int QuotePriceType_PERSHARE(2);
const int QuotePriceType_FIXEDAMOUNT(3);
const int QuotePriceType_DISCOUNT(4);
const int QuotePriceType_PREMIUM(5);
const int QuotePriceType_BASISPOINTSRELATIVETOBENCHMARK(6);
const int QuotePriceType_TEDPRICE(7);
const int QuotePriceType_TEDYIELD(8);
const int QuotePriceType_YIELDSPREADSWAPS(9);
const int QuotePriceType_YIELD(10);
const size_t QuotePriceType_realm_els(10);
//-------------------------------------------------------------------------------------------------
using QuoteRespID = Field<f8String, 693>;
//-------------------------------------------------------------------------------------------------
using QuoteRespType = Field<int, 694>;
const int QuoteRespType_HITLIFT(1);
const int QuoteRespType_COUNTER(2);
const int QuoteRespType_EXPIRED(3);
const int QuoteRespType_COVER(4);
const int QuoteRespType_DONEAWAY(5);
const int QuoteRespType_PASS(6);
const size_t QuoteRespType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using QuoteQualifier = Field<char, 695>;
//-------------------------------------------------------------------------------------------------
using YieldRedemptionDate = Field<LocalMktDate, 696>;
//-------------------------------------------------------------------------------------------------
using YieldRedemptionPrice = Field<price, 697>;
//-------------------------------------------------------------------------------------------------
using YieldRedemptionPriceType = Field<int, 698>;
//-------------------------------------------------------------------------------------------------
using BenchmarkSecurityID = Field<f8String, 699>;
//-------------------------------------------------------------------------------------------------
using ReversalIndicator = Field<Boolean, 700>;
//-------------------------------------------------------------------------------------------------
using YieldCalcDate = Field<LocalMktDate, 701>;
//-------------------------------------------------------------------------------------------------
using NoPositions = Field<NumInGroup, 702>;
//-------------------------------------------------------------------------------------------------
using PosType = Field<f8String, 703>;
const f8String PosType_ALLOCATIONTRADEQTY("ALC");
const f8String PosType_OPTIONASSIGNMENT("AS");
const f8String PosType_ASOFTRADEQTY("ASF");
const f8String PosType_DELIVERYQTY("DLV");
const f8String PosType_ELECTRONICTRADEQTY("ETR");
const f8String PosType_OPTIONEXERCISEQTY("EX");
const f8String PosType_ENDOFDAYQTY("FIN");
const f8String PosType_INTRASPREADQTY("IAS");
const f8String PosType_INTERSPREADQTY("IES");
const f8String PosType_ADJUSTMENTQTY("PA");
const f8String PosType_PITTRADEQTY("PIT");
const f8String PosType_STARTOFDAYQTY("SOD");
const f8String PosType_INTEGRALSPLIT("SPL");
const f8String PosType_TRANSACTIONFROMASSIGNMENT("TA");
const f8String PosType_TOTALTRANSACTIONQTY("TOT");
const f8String PosType_TRANSACTIONQUANTITY("TQ");
const f8String PosType_TRANSFERTRADEQTY("TRF");
const f8String PosType_TRANSACTIONFROMEXERCISE("TX");
const f8String PosType_CROSSMARGINQTY("XM");
const size_t PosType_realm_els(19);
//-------------------------------------------------------------------------------------------------
using LongQty = Field<Qty, 704>;
//-------------------------------------------------------------------------------------------------
using ShortQty = Field<Qty, 705>;
//-------------------------------------------------------------------------------------------------
using PosQtyStatus = Field<int, 706>;
const int PosQtyStatus_SUBMITTED(0);
const int PosQtyStatus_ACCEPTED(1);
const int PosQtyStatus_REJECTED(2);
const size_t PosQtyStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PosAmtType = Field<f8String, 707>;
const f8String PosAmtType_CASHAMOUNTCORPORATEEVENT("CASH");
const f8String PosAmtType_CASHRESIDUALAMOUNT("CRES");
const f8String PosAmtType_FINALMARKTOMARKETAMOUNT("FMTM");
const f8String PosAmtType_INCREMENTALMARKTOMARKETAMOUNT("IMTM");
const f8String PosAmtType_PREMIUMAMOUNT("PREM");
const f8String PosAmtType_STARTOFDAYMARKTOMARKETAMOUNT("SMTM");
const f8String PosAmtType_TRADEVARIATIONAMOUNT("TVAR");
const f8String PosAmtType_VALUEADJUSTEDAMOUNT("VADJ");
const size_t PosAmtType_realm_els(8);
//-------------------------------------------------------------------------------------------------
using PosAmt = Field<Amt, 708>;
//-------------------------------------------------------------------------------------------------
using PosTransType = Field<int, 709>;
const int PosTransType_EXERCISE(1);
const int PosTransType_DONOTEXERCISE(2);
const int PosTransType_POSITIONADJUSTMENT(3);
const int PosTransType_POSITIONCHANGESUBMISSIONMARGINDISPOSITION(4);
const int PosTransType_PLEDGE(5);
const size_t PosTransType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using PosReqID = Field<f8String, 710>;
//-------------------------------------------------------------------------------------------------
using NoUnderlyings = Field<NumInGroup, 711>;
//-------------------------------------------------------------------------------------------------
using PosMaintAction = Field<int, 712>;
const int PosMaintAction_NEW(1);
const int PosMaintAction_REPLACE(2);
const int PosMaintAction_CANCEL(3);
const size_t PosMaintAction_realm_els(3);
//-------------------------------------------------------------------------------------------------
using OrigPosReqRefID = Field<f8String, 713>;
//-------------------------------------------------------------------------------------------------
using PosMaintRptRefID = Field<f8String, 714>;
//-------------------------------------------------------------------------------------------------
using ClearingBusinessDate = Field<LocalMktDate, 715>;
//-------------------------------------------------------------------------------------------------
using SettlSessID = Field<f8String, 716>;
//-------------------------------------------------------------------------------------------------
using SettlSessSubID = Field<f8String, 717>;
//-------------------------------------------------------------------------------------------------
using AdjustmentType = Field<int, 718>;
const int AdjustmentType_PROCESSREQUESTASMARGINDISPOSITION(0);
const int AdjustmentType_DELTAPLUS(1);
const int AdjustmentType_DELTAMINUS(2);
const int AdjustmentType_FINAL(3);
const size_t AdjustmentType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using ContraryInstructionIndicator = Field<Boolean, 719>;
//-------------------------------------------------------------------------------------------------
using PriorSpreadIndicator = Field<Boolean, 720>;
//-------------------------------------------------------------------------------------------------
using PosMaintRptID = Field<f8String, 721>;
//-------------------------------------------------------------------------------------------------
using PosMaintStatus = Field<int, 722>;
const int PosMaintStatus_ACCEPTED(0);
const int PosMaintStatus_ACCEPTEDWITHWARNINGS(1);
const int PosMaintStatus_REJECTED(2);
const int PosMaintStatus_COMPLETED(3);
const int PosMaintStatus_COMPLETEDWITHWARNINGS(4);
const size_t PosMaintStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using PosMaintResult = Field<int, 723>;
const int PosMaintResult_SUCCESSFULCOMPLETION(0);
const int PosMaintResult_REJECTED(1);
const int PosMaintResult_OTHER(99);
const size_t PosMaintResult_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PosReqType = Field<int, 724>;
const int PosReqType_POSITIONS(0);
const int PosReqType_TRADES(1);
const int PosReqType_EXERCISES(2);
const int PosReqType_ASSIGNMENTS(3);
const size_t PosReqType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using ResponseTransportType = Field<int, 725>;
const int ResponseTransportType_INBAND(0);
const int ResponseTransportType_OUTOFBAND(1);
const size_t ResponseTransportType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ResponseDestination = Field<f8String, 726>;
//-------------------------------------------------------------------------------------------------
using TotalNumPosReports = Field<int, 727>;
//-------------------------------------------------------------------------------------------------
using PosReqResult = Field<int, 728>;
const int PosReqResult_VALIDREQUEST(0);
const int PosReqResult_INVALIDORUNSUPPORTEDREQUEST(1);
const int PosReqResult_NOPOSITIONSFOUNDTHATMATCHCRITERIA(2);
const int PosReqResult_NOTAUTHORIZEDTOREQUESTPOSITIONS(3);
const int PosReqResult_REQUESTFORPOSITIONNOTSUPPORTED(4);
const int PosReqResult_OTHER(99);
const size_t PosReqResult_realm_els(6);
//-------------------------------------------------------------------------------------------------
using PosReqStatus = Field<int, 729>;
const int PosReqStatus_COMPLETED(0);
const int PosReqStatus_COMPLETEDWITHWARNINGS(1);
const int PosReqStatus_REJECTED(2);
const size_t PosReqStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using SettlPrice = Field<price, 730>;
//-------------------------------------------------------------------------------------------------
using SettlPriceType = Field<int, 731>;
const int SettlPriceType_FINAL(1);
const int SettlPriceType_THEORETICAL(2);
const size_t SettlPriceType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using UnderlyingSettlPrice = Field<price, 732>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSettlPriceType = Field<int, 733>;
//-------------------------------------------------------------------------------------------------
using PriorSettlPrice = Field<price, 734>;
//-------------------------------------------------------------------------------------------------
using NoQuoteQualifiers = Field<NumInGroup, 735>;
//-------------------------------------------------------------------------------------------------
using AllocSettlCurrency = Field<currency, 736>;
//-------------------------------------------------------------------------------------------------
using AllocSettlCurrAmt = Field<Amt, 737>;
//-------------------------------------------------------------------------------------------------
using InterestAtMaturity = Field<Amt, 738>;
//-------------------------------------------------------------------------------------------------
using LegDatedDate = Field<LocalMktDate, 739>;
//-------------------------------------------------------------------------------------------------
using LegPool = Field<f8String, 740>;
//-------------------------------------------------------------------------------------------------
using AllocInterestAtMaturity = Field<Amt, 741>;
//-------------------------------------------------------------------------------------------------
using AllocAccruedInterestAmt = Field<Amt, 742>;
//-------------------------------------------------------------------------------------------------
using DeliveryDate = Field<LocalMktDate, 743>;
//-------------------------------------------------------------------------------------------------
using AssignmentMethod = Field<char, 744>;
const char AssignmentMethod_PRORATA('P');
const char AssignmentMethod_RANDOM('R');
const size_t AssignmentMethod_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AssignmentUnit = Field<Qty, 745>;
//-------------------------------------------------------------------------------------------------
using OpenInterest = Field<Amt, 746>;
//-------------------------------------------------------------------------------------------------
using ExerciseMethod = Field<char, 747>;
const char ExerciseMethod_AUTOMATIC('A');
const char ExerciseMethod_MANUAL('M');
const size_t ExerciseMethod_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TotNumTradeReports = Field<int, 748>;
//-------------------------------------------------------------------------------------------------
using TradeRequestResult = Field<int, 749>;
const int TradeRequestResult_SUCCESSFUL(0);
const int TradeRequestResult_INVALIDORUNKNOWNINSTRUMENT(1);
const int TradeRequestResult_INVALIDTYPEOFTRADEREQUESTED(2);
const int TradeRequestResult_INVALIDPARTIES(3);
const int TradeRequestResult_INVALIDTRANSPORTTYPEREQUESTED(4);
const int TradeRequestResult_INVALIDDESTINATIONREQUESTED(5);
const int TradeRequestResult_TRADEREQUESTTYPENOTSUPPORTED(8);
const int TradeRequestResult_UNAUTHORIZEDFORTRADECAPTUREREPORTREQUEST(9);
const int TradeRequestResult_OTHER(99);
const size_t TradeRequestResult_realm_els(9);
//-------------------------------------------------------------------------------------------------
using TradeRequestStatus = Field<int, 750>;
const int TradeRequestStatus_ACCEPTED(0);
const int TradeRequestStatus_COMPLETED(1);
const int TradeRequestStatus_REJECTED(2);
const size_t TradeRequestStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradeReportRejectReason = Field<int, 751>;
const int TradeReportRejectReason_SUCCESSFULDEFAULT(0);
const int TradeReportRejectReason_INVALIDPARTYINFORMATION(1);
const int TradeReportRejectReason_UNKNOWNINSTRUMENT(2);
const int TradeReportRejectReason_UNAUTHORIZEDTOREPORTTRADES(3);
const int TradeReportRejectReason_INVALIDTRADETYPE(4);
const int TradeReportRejectReason_OTHER(99);
const size_t TradeReportRejectReason_realm_els(6);
//-------------------------------------------------------------------------------------------------
using SideMultiLegReportingType = Field<int, 752>;
const int SideMultiLegReportingType_SINGLESECURITY(1);
const int SideMultiLegReportingType_INDIVIDUALLEGOFAMULTILEGSECURITY(2);
const int SideMultiLegReportingType_MULTILEGSECURITY(3);
const size_t SideMultiLegReportingType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NoPosAmt = Field<NumInGroup, 753>;
//-------------------------------------------------------------------------------------------------
using AutoAcceptIndicator = Field<Boolean, 754>;
//-------------------------------------------------------------------------------------------------
using AllocReportID = Field<f8String, 755>;
//-------------------------------------------------------------------------------------------------
using NoNested2PartyIDs = Field<NumInGroup, 756>;
//-------------------------------------------------------------------------------------------------
using Nested2PartyID = Field<f8String, 757>;
//-------------------------------------------------------------------------------------------------
using Nested2PartyIDSource = Field<char, 758>;
//-------------------------------------------------------------------------------------------------
using Nested2PartyRole = Field<int, 759>;
//-------------------------------------------------------------------------------------------------
using Nested2PartySubID = Field<f8String, 760>;
//-------------------------------------------------------------------------------------------------
using BenchmarkSecurityIDSource = Field<f8String, 761>;
//-------------------------------------------------------------------------------------------------
using SecuritySubType = Field<f8String, 762>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecuritySubType = Field<f8String, 763>;
//-------------------------------------------------------------------------------------------------
using LegSecuritySubType = Field<f8String, 764>;
//-------------------------------------------------------------------------------------------------
using AllowableOneSidednessPct = Field<Percentage, 765>;
//-------------------------------------------------------------------------------------------------
using AllowableOneSidednessValue = Field<Amt, 766>;
//-------------------------------------------------------------------------------------------------
using AllowableOneSidednessCurr = Field<currency, 767>;
//-------------------------------------------------------------------------------------------------
using NoTrdRegTimestamps = Field<NumInGroup, 768>;
//-------------------------------------------------------------------------------------------------
using TrdRegTimestamp = Field<UTCTimestamp, 769>;
//-------------------------------------------------------------------------------------------------
using TrdRegTimestampType = Field<int, 770>;
const int TrdRegTimestampType_EXECUTIONTIME(1);
const int TrdRegTimestampType_TIMEIN(2);
const int TrdRegTimestampType_TIMEOUT(3);
const int TrdRegTimestampType_BROKERRECEIPT(4);
const int TrdRegTimestampType_BROKEREXECUTION(5);
const size_t TrdRegTimestampType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using TrdRegTimestampOrigin = Field<f8String, 771>;
//-------------------------------------------------------------------------------------------------
using ConfirmRefID = Field<f8String, 772>;
//-------------------------------------------------------------------------------------------------
using ConfirmType = Field<int, 773>;
const int ConfirmType_STATUS(1);
const int ConfirmType_CONFIRMATION(2);
const int ConfirmType_CONFIRMATIONREQUESTREJECTED(3);
const size_t ConfirmType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ConfirmRejReason = Field<int, 774>;
const int ConfirmRejReason_MISMATCHEDACCOUNT(1);
const int ConfirmRejReason_MISSINGSETTLEMENTINSTRUCTIONS(2);
const int ConfirmRejReason_OTHER(99);
const size_t ConfirmRejReason_realm_els(3);
//-------------------------------------------------------------------------------------------------
using BookingType = Field<int, 775>;
const int BookingType_REGULARBOOKING(0);
const int BookingType_CFDCONTRACTFORDIFFERENCE(1);
const int BookingType_TOTALRETURNSWAP(2);
const size_t BookingType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using IndividualAllocRejCode = Field<int, 776>;
//-------------------------------------------------------------------------------------------------
using SettlInstMsgID = Field<f8String, 777>;
//-------------------------------------------------------------------------------------------------
using NoSettlInst = Field<NumInGroup, 778>;
//-------------------------------------------------------------------------------------------------
using LastUpdateTime = Field<UTCTimestamp, 779>;
//-------------------------------------------------------------------------------------------------
using AllocSettlInstType = Field<int, 780>;
const int AllocSettlInstType_USEDEFAULTINSTRUCTIONS(0);
const int AllocSettlInstType_DERIVEFROMPARAMETERSPROVIDED(1);
const int AllocSettlInstType_FULLDETAILSPROVIDED(2);
const int AllocSettlInstType_SSIDBIDSPROVIDED(3);
const int AllocSettlInstType_PHONEFORINSTRUCTIONS(4);
const size_t AllocSettlInstType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using NoSettlPartyIDs = Field<NumInGroup, 781>;
//-------------------------------------------------------------------------------------------------
using SettlPartyID = Field<f8String, 782>;
//-------------------------------------------------------------------------------------------------
using SettlPartyIDSource = Field<char, 783>;
//-------------------------------------------------------------------------------------------------
using SettlPartyRole = Field<int, 784>;
//-------------------------------------------------------------------------------------------------
using SettlPartySubID = Field<f8String, 785>;
//-------------------------------------------------------------------------------------------------
using SettlPartySubIDType = Field<int, 786>;
//-------------------------------------------------------------------------------------------------
using DlvyInstType = Field<char, 787>;
const char DlvyInstType_CASH('C');
const char DlvyInstType_SECURITIES('S');
const size_t DlvyInstType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TerminationType = Field<int, 788>;
const int TerminationType_OVERNIGHT(1);
const int TerminationType_TERM(2);
const int TerminationType_FLEXIBLE(3);
const int TerminationType_OPEN(4);
const size_t TerminationType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NextExpectedMsgSeqNum = Field<SeqNum, 789>;
//-------------------------------------------------------------------------------------------------
using OrdStatusReqID = Field<f8String, 790>;
//-------------------------------------------------------------------------------------------------
using SettlInstReqID = Field<f8String, 791>;
//-------------------------------------------------------------------------------------------------
using SettlInstReqRejCode = Field<int, 792>;
const int SettlInstReqRejCode_UNABLETOPROCESSREQUEST(0);
const int SettlInstReqRejCode_UNKNOWNACCOUNT(1);
const int SettlInstReqRejCode_NOMATCHINGSETTLEMENTINSTRUCTIONSFOUND(2);
const int SettlInstReqRejCode_OTHER(99);
const size_t SettlInstReqRejCode_realm_els(4);
//-------------------------------------------------------------------------------------------------
using SecondaryAllocID = Field<f8String, 793>;
//-------------------------------------------------------------------------------------------------
using AllocReportType = Field<int, 794>;
const int AllocReportType_SELLSIDECALCULATEDUSINGPRELIMINARY(3);
const int AllocReportType_SELLSIDECALCULATEDWITHOUTPRELIMINARY(4);
const int AllocReportType_WAREHOUSERECAP(5);
const int AllocReportType_REQUESTTOINTERMEDIARY(8);
const size_t AllocReportType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using AllocReportRefID = Field<f8String, 795>;
//-------------------------------------------------------------------------------------------------
using AllocCancReplaceReason = Field<int, 796>;
const int AllocCancReplaceReason_ORIGINALDETAILSINCORRECT(1);
const int AllocCancReplaceReason_CHANGEINUNDERLYINGORDERDETAILS(2);
const int AllocCancReplaceReason_OTHER(99);
const size_t AllocCancReplaceReason_realm_els(3);
//-------------------------------------------------------------------------------------------------
using CopyMsgIndicator = Field<Boolean, 797>;
//-------------------------------------------------------------------------------------------------
using AllocAccountType = Field<int, 798>;
const int AllocAccountType_ACCOUNTISCARRIEDONCUSTOMERSIDEOFBOOKS(1);
const int AllocAccountType_ACCOUNTISCARRIEDONNONCUSTOMERSIDEOFBOOKS(2);
const int AllocAccountType_HOUSETRADER(3);
const int AllocAccountType_FLOORTRADER(4);
const int AllocAccountType_ACCOUNTISCARRIEDONNONCUSTOMERSIDEOFBOOKSANDISCROSSMARGINED(6);
const int AllocAccountType_ACCOUNTISHOUSETRADERANDISCROSSMARGINED(7);
const int AllocAccountType_JBO(8);
const size_t AllocAccountType_realm_els(7);
//-------------------------------------------------------------------------------------------------
using OrderAvgPx = Field<price, 799>;
//-------------------------------------------------------------------------------------------------
using OrderBookingQty = Field<Qty, 800>;
//-------------------------------------------------------------------------------------------------
using NoSettlPartySubIDs = Field<NumInGroup, 801>;
//-------------------------------------------------------------------------------------------------
using NoPartySubIDs = Field<NumInGroup, 802>;
//-------------------------------------------------------------------------------------------------
using PartySubIDType = Field<int, 803>;
const int PartySubIDType_FIRM(1);
const int PartySubIDType_PERSON(2);
const int PartySubIDType_SYSTEM(3);
const int PartySubIDType_APPLICATION(4);
const int PartySubIDType_FULLLEGALNAMEOFFIRM(5);
const int PartySubIDType_POSTALADDRESS(6);
const int PartySubIDType_PHONENUMBER(7);
const int PartySubIDType_EMAILADDRESS(8);
const int PartySubIDType_CONTACTNAME(9);
const int PartySubIDType_SECURITIESACCOUNTNUMBER(10);
const int PartySubIDType_REGISTRATIONNUMBER(11);
const int PartySubIDType_REGISTEREDADDRESS_12(12);
const int PartySubIDType_REGULATORYSTATUS(13);
const int PartySubIDType_REGISTRATIONNAME(14);
const int PartySubIDType_CASHACCOUNT(15);
const int PartySubIDType_BIC(16);
const int PartySubIDType_CSDPARTICIPANTMEMBERCODE(17);
const int PartySubIDType_REGISTEREDADDRESS_18(18);
const int PartySubIDType_FUNDACCOUNTNAME(19);
const int PartySubIDType_TELEXNUMBER(20);
const int PartySubIDType_FAXNUMBER(21);
const int PartySubIDType_SECURITIESACCOUNTNAME(22);
const int PartySubIDType_CASHACCOUNTNAME(23);
const int PartySubIDType_DEPARTMENT(24);
const int PartySubIDType_LOCATIONDESK(25);
const int PartySubIDType_POSITIONACCOUNTTYPE(26);
const int PartySubIDType_RESERVEDANDAVAILABLEFORBILATERALLYAGREEDUPONUSERDEFINEDVALUES(4000);
const size_t PartySubIDType_realm_els(27);
//-------------------------------------------------------------------------------------------------
using NoNestedPartySubIDs = Field<NumInGroup, 804>;
//-------------------------------------------------------------------------------------------------
using NestedPartySubIDType = Field<int, 805>;
//-------------------------------------------------------------------------------------------------
using NoNested2PartySubIDs = Field<NumInGroup, 806>;
//-------------------------------------------------------------------------------------------------
using Nested2PartySubIDType = Field<int, 807>;
//-------------------------------------------------------------------------------------------------
using AllocIntermedReqType = Field<int, 808>;
const int AllocIntermedReqType_PENDINGACCEPT(1);
const int AllocIntermedReqType_PENDINGRELEASE(2);
const int AllocIntermedReqType_PENDINGREVERSAL(3);
const int AllocIntermedReqType_ACCEPT(4);
const int AllocIntermedReqType_BLOCKLEVELREJECT(5);
const int AllocIntermedReqType_ACCOUNTLEVELREJECT(6);
const size_t AllocIntermedReqType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using UnderlyingPx = Field<price, 810>;
//-------------------------------------------------------------------------------------------------
using PriceDelta = Field<fp_type, 811>;
//-------------------------------------------------------------------------------------------------
using ApplQueueMax = Field<int, 812>;
//-------------------------------------------------------------------------------------------------
using ApplQueueDepth = Field<int, 813>;
//-------------------------------------------------------------------------------------------------
using ApplQueueResolution = Field<int, 814>;
const int ApplQueueResolution_NOACTIONTAKEN(0);
const int ApplQueueResolution_QUEUEFLUSHED(1);
const int ApplQueueResolution_OVERLAYLAST(2);
const int ApplQueueResolution_ENDSESSION(3);
const size_t ApplQueueResolution_realm_els(4);
//-------------------------------------------------------------------------------------------------
using ApplQueueAction = Field<int, 815>;
const int ApplQueueAction_NOACTIONTAKEN(0);
const int ApplQueueAction_QUEUEFLUSHED(1);
const int ApplQueueAction_OVERLAYLAST(2);
const int ApplQueueAction_ENDSESSION(3);
const size_t ApplQueueAction_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NoAltMDSource = Field<NumInGroup, 816>;
//-------------------------------------------------------------------------------------------------
using AltMDSourceID = Field<f8String, 817>;
//-------------------------------------------------------------------------------------------------
using SecondaryTradeReportID = Field<f8String, 818>;
//-------------------------------------------------------------------------------------------------
using AvgPxIndicator = Field<int, 819>;
const int AvgPxIndicator_NOAVERAGEPRICING(0);
const int AvgPxIndicator_TRADEAVERAGEPRICEGROUP(1);
const int AvgPxIndicator_LASTTRADEAVERAGEPRICEGROUP(2);
const size_t AvgPxIndicator_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradeLinkID = Field<f8String, 820>;
//-------------------------------------------------------------------------------------------------
using OrderInputDevice = Field<f8String, 821>;
//-------------------------------------------------------------------------------------------------
using UnderlyingTradingSessionID = Field<f8String, 822>;
//-------------------------------------------------------------------------------------------------
using UnderlyingTradingSessionSubID = Field<f8String, 823>;
//-------------------------------------------------------------------------------------------------
using TradeLegRefID = Field<f8String, 824>;
//-------------------------------------------------------------------------------------------------
using ExchangeRule = Field<f8String, 825>;
//-------------------------------------------------------------------------------------------------
using TradeAllocIndicator = Field<int, 826>;
const int TradeAllocIndicator_ALLOCATIONNOTREQUIRED(0);
const int TradeAllocIndicator_ALLOCATIONREQUIREDALLOCATIONINFORMATIONNOTPROVIDED(1);
const int TradeAllocIndicator_USEALLOCATIONPROVIDEDWITHTHETRADE(2);
const size_t TradeAllocIndicator_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ExpirationCycle = Field<int, 827>;
const int ExpirationCycle_EXPIREONTRADINGSESSIONCLOSE(0);
const int ExpirationCycle_EXPIREONTRADINGSESSIONOPEN(1);
const size_t ExpirationCycle_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TrdType = Field<int, 828>;
const int TrdType_REGULARTRADE(0);
const int TrdType_BLOCKTRADE(1);
const int TrdType_EFP(2);
const int TrdType_TRANSFER(3);
const int TrdType_LATETRADE(4);
const int TrdType_TTRADE(5);
const int TrdType_WEIGHTEDAVERAGEPRICETRADE(6);
const int TrdType_BUNCHEDTRADE(7);
const int TrdType_LATEBUNCHEDTRADE(8);
const int TrdType_PRIORREFERENCEPRICETRADE(9);
const int TrdType_AFTERHOURSTRADE(10);
const size_t TrdType_realm_els(11);
//-------------------------------------------------------------------------------------------------
using TrdSubType = Field<int, 829>;
//-------------------------------------------------------------------------------------------------
using TransferReason = Field<f8String, 830>;
//-------------------------------------------------------------------------------------------------
using TotNumAssignmentReports = Field<int, 832>;
//-------------------------------------------------------------------------------------------------
using AsgnRptID = Field<f8String, 833>;
//-------------------------------------------------------------------------------------------------
using ThresholdAmount = Field<PriceOffset, 834>;
//-------------------------------------------------------------------------------------------------
using PegMoveType = Field<int, 835>;
const int PegMoveType_FLOATING(0);
const int PegMoveType_FIXED(1);
const size_t PegMoveType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using PegOffsetType = Field<int, 836>;
const int PegOffsetType_PRICE(0);
const int PegOffsetType_BASISPOINTS(1);
const int PegOffsetType_TICKS(2);
const int PegOffsetType_PRICETIERLEVEL(3);
const size_t PegOffsetType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using PegLimitType = Field<int, 837>;
const int PegLimitType_ORBETTER(0);
const int PegLimitType_STRICT(1);
const int PegLimitType_ORWORSE(2);
const size_t PegLimitType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PegRoundDirection = Field<int, 838>;
const int PegRoundDirection_MOREAGGRESSIVE(1);
const int PegRoundDirection_MOREPASSIVE(2);
const size_t PegRoundDirection_realm_els(2);
//-------------------------------------------------------------------------------------------------
using PeggedPrice = Field<price, 839>;
//-------------------------------------------------------------------------------------------------
using PegScope = Field<int, 840>;
const int PegScope_LOCALEXCHANGEECNATS(1);
const int PegScope_NATIONAL(2);
const int PegScope_GLOBAL(3);
const int PegScope_NATIONALEXCLUDINGLOCAL(4);
const size_t PegScope_realm_els(4);
//-------------------------------------------------------------------------------------------------
using DiscretionMoveType = Field<int, 841>;
const int DiscretionMoveType_FLOATING(0);
const int DiscretionMoveType_FIXED(1);
const size_t DiscretionMoveType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using DiscretionOffsetType = Field<int, 842>;
const int DiscretionOffsetType_PRICE(0);
const int DiscretionOffsetType_BASISPOINTS(1);
const int DiscretionOffsetType_TICKS(2);
const int DiscretionOffsetType_PRICETIERLEVEL(3);
const size_t DiscretionOffsetType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using DiscretionLimitType = Field<int, 843>;
const int DiscretionLimitType_ORBETTER(0);
const int DiscretionLimitType_STRICT(1);
const int DiscretionLimitType_ORWORSE(2);
const size_t DiscretionLimitType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using DiscretionRoundDirection = Field<int, 844>;
const int DiscretionRoundDirection_MOREAGGRESSIVE(1);
const int DiscretionRoundDirection_MOREPASSIVE(2);
const size_t DiscretionRoundDirection_realm_els(2);
//-------------------------------------------------------------------------------------------------
using DiscretionPrice = Field<price, 845>;
//-------------------------------------------------------------------------------------------------
using DiscretionScope = Field<int, 846>;
const int DiscretionScope_LOCALEXCHANGEECNATS(1);
const int DiscretionScope_NATIONAL(2);
const int DiscretionScope_GLOBAL(3);
const int DiscretionScope_NATIONALEXCLUDINGLOCAL(4);
const size_t DiscretionScope_realm_els(4);
//-------------------------------------------------------------------------------------------------
using TargetStrategy = Field<int, 847>;
const int TargetStrategy_VWAP(1);
const int TargetStrategy_PARTICIPATE(2);
const int TargetStrategy_MININIZEMARKETIMPACT(3);
const int TargetStrategy_RESERVEDANDAVAILABLEFORBILATERALLYAGREEDUPONUSERDEFINEDVALUES(1000);
const size_t TargetStrategy_realm_els(4);
//-------------------------------------------------------------------------------------------------
using TargetStrategyParameters = Field<f8String, 848>;
//-------------------------------------------------------------------------------------------------
using ParticipationRate = Field<Percentage, 849>;
//-------------------------------------------------------------------------------------------------
using TargetStrategyPerformance = Field<fp_type, 850>;
//-------------------------------------------------------------------------------------------------
using LastLiquidityInd = Field<int, 851>;
const int LastLiquidityInd_ADDEDLIQUIDITY(1);
const int LastLiquidityInd_REMOVEDLIQUIDITY(2);
const int LastLiquidityInd_LIQUIDITYROUTEDOUT(3);
const size_t LastLiquidityInd_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PublishTrdIndicator = Field<Boolean, 852>;
const char PublishTrdIndicator_NO('N');
const char PublishTrdIndicator_YES('Y');
const size_t PublishTrdIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ShortSaleReason = Field<int, 853>;
const int ShortSaleReason_DEALERSOLDSHORT(0);
const int ShortSaleReason_DEALERSOLDSHORTEXEMPT(1);
const int ShortSaleReason_SELLINGCUSTOMERSOLDSHORT(2);
const int ShortSaleReason_SELLINGCUSTOMERSOLDSHORTEXEMPT(3);
const int ShortSaleReason_QSRORAGUCONTRASIDESOLDSHORT(4);
const int ShortSaleReason_QSRORAGUCONTRASIDESOLDSHORTEXEMPT(5);
const size_t ShortSaleReason_realm_els(6);
//-------------------------------------------------------------------------------------------------
using QtyType = Field<int, 854>;
const int QtyType_UNITS(0);
const int QtyType_CONTRACTS(1);
const size_t QtyType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SecondaryTrdType = Field<int, 855>;
//-------------------------------------------------------------------------------------------------
using TradeReportType = Field<int, 856>;
const int TradeReportType_SUBMIT(0);
const int TradeReportType_ALLEGED(1);
const int TradeReportType_ACCEPT(2);
const int TradeReportType_DECLINE(3);
const int TradeReportType_ADDENDUM(4);
const int TradeReportType_NOWAS(5);
const int TradeReportType_TRADEREPORTCANCEL(6);
const int TradeReportType_LOCKEDINTRADEBREAK(7);
const size_t TradeReportType_realm_els(8);
//-------------------------------------------------------------------------------------------------
using AllocNoOrdersType = Field<int, 857>;
const int AllocNoOrdersType_NOTSPECIFIED(0);
const int AllocNoOrdersType_EXPLICITLISTPROVIDED(1);
const size_t AllocNoOrdersType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SharedCommission = Field<Amt, 858>;
//-------------------------------------------------------------------------------------------------
using ConfirmReqID = Field<f8String, 859>;
//-------------------------------------------------------------------------------------------------
using AvgParPx = Field<price, 860>;
//-------------------------------------------------------------------------------------------------
using ReportedPx = Field<price, 861>;
//-------------------------------------------------------------------------------------------------
using NoCapacities = Field<NumInGroup, 862>;
//-------------------------------------------------------------------------------------------------
using OrderCapacityQty = Field<Qty, 863>;
//-------------------------------------------------------------------------------------------------
using NoEvents = Field<NumInGroup, 864>;
//-------------------------------------------------------------------------------------------------
using EventType = Field<int, 865>;
const int EventType_PUT(1);
const int EventType_CALL(2);
const int EventType_TENDER(3);
const int EventType_SINKINGFUNDCALL(4);
const int EventType_OTHER(99);
const size_t EventType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using EventDate = Field<LocalMktDate, 866>;
//-------------------------------------------------------------------------------------------------
using EventPx = Field<price, 867>;
//-------------------------------------------------------------------------------------------------
using EventText = Field<f8String, 868>;
//-------------------------------------------------------------------------------------------------
using PctAtRisk = Field<Percentage, 869>;
//-------------------------------------------------------------------------------------------------
using NoInstrAttrib = Field<NumInGroup, 870>;
//-------------------------------------------------------------------------------------------------
using InstrAttribType = Field<int, 871>;
const int InstrAttribType_FLAT(1);
const int InstrAttribType_ZEROCOUPON(2);
const int InstrAttribType_INTERESTBEARING(3);
const int InstrAttribType_NOPERIODICPAYMENTS(4);
const int InstrAttribType_VARIABLERATE(5);
const int InstrAttribType_LESSFEEFORPUT(6);
const int InstrAttribType_STEPPEDCOUPON(7);
const int InstrAttribType_COUPONPERIOD(8);
const int InstrAttribType_WHENISSUED(9);
const int InstrAttribType_ORIGINALISSUEDISCOUNT(10);
const int InstrAttribType_CALLABLEPUTTABLE(11);
const int InstrAttribType_ESCROWEDTOMATURITY(12);
const int InstrAttribType_ESCROWEDTOREDEMPTIONDATE(13);
const int InstrAttribType_PREREFUNDED(14);
const int InstrAttribType_INDEFAULT(15);
const int InstrAttribType_UNRATED(16);
const int InstrAttribType_TAXABLE(17);
const int InstrAttribType_INDEXED(18);
const int InstrAttribType_SUBJECTTOALTERNATIVEMINIMUMTAX(19);
const int InstrAttribType_ORIGINALISSUEDISCOUNTPRICE(20);
const int InstrAttribType_CALLABLEBELOWMATURITYVALUE(21);
const int InstrAttribType_CALLABLEWITHOUTNOTICEBYMAILTOHOLDERUNLESSREGISTERED(22);
const int InstrAttribType_TEXT(99);
const size_t InstrAttribType_realm_els(23);
//-------------------------------------------------------------------------------------------------
using InstrAttribValue = Field<f8String, 872>;
//-------------------------------------------------------------------------------------------------
using DatedDate = Field<LocalMktDate, 873>;
//-------------------------------------------------------------------------------------------------
using InterestAccrualDate = Field<LocalMktDate, 874>;
//-------------------------------------------------------------------------------------------------
using CPProgram = Field<int, 875>;
const int CPProgram_3A3(1);
const int CPProgram_42(2);
const int CPProgram_OTHER(99);
const size_t CPProgram_realm_els(3);
//-------------------------------------------------------------------------------------------------
using CPRegType = Field<f8String, 876>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCPProgram = Field<f8String, 877>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCPRegType = Field<f8String, 878>;
//-------------------------------------------------------------------------------------------------
using UnderlyingQty = Field<Qty, 879>;
//-------------------------------------------------------------------------------------------------
using TrdMatchID = Field<f8String, 880>;
//-------------------------------------------------------------------------------------------------
using SecondaryTradeReportRefID = Field<f8String, 881>;
//-------------------------------------------------------------------------------------------------
using UnderlyingDirtyPrice = Field<price, 882>;
//-------------------------------------------------------------------------------------------------
using UnderlyingEndPrice = Field<price, 883>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStartValue = Field<Amt, 884>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCurrentValue = Field<Amt, 885>;
//-------------------------------------------------------------------------------------------------
using UnderlyingEndValue = Field<Amt, 886>;
//-------------------------------------------------------------------------------------------------
using NoUnderlyingStips = Field<NumInGroup, 887>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStipType = Field<f8String, 888>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStipValue = Field<f8String, 889>;
//-------------------------------------------------------------------------------------------------
using MaturityNetMoney = Field<Amt, 890>;
//-------------------------------------------------------------------------------------------------
using MiscFeeBasis = Field<int, 891>;
const int MiscFeeBasis_ABSOLUTE(0);
const int MiscFeeBasis_PERUNIT(1);
const int MiscFeeBasis_PERCENTAGE(2);
const size_t MiscFeeBasis_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TotNoAllocs = Field<int, 892>;
//-------------------------------------------------------------------------------------------------
using LastFragment = Field<Boolean, 893>;
const char LastFragment_NO('N');
const char LastFragment_YES('Y');
const size_t LastFragment_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CollReqID = Field<f8String, 894>;
//-------------------------------------------------------------------------------------------------
using CollAsgnReason = Field<int, 895>;
const int CollAsgnReason_INITIAL(0);
const int CollAsgnReason_SCHEDULED(1);
const int CollAsgnReason_TIMEWARNING(2);
const int CollAsgnReason_MARGINDEFICIENCY(3);
const int CollAsgnReason_MARGINEXCESS(4);
const int CollAsgnReason_FORWARDCOLLATERALDEMAND(5);
const int CollAsgnReason_EVENTOFDEFAULT(6);
const int CollAsgnReason_ADVERSETAXEVENT(7);
const size_t CollAsgnReason_realm_els(8);
//-------------------------------------------------------------------------------------------------
using CollInquiryQualifier = Field<int, 896>;
const int CollInquiryQualifier_TRADEDATE(0);
const int CollInquiryQualifier_GCINSTRUMENT(1);
const int CollInquiryQualifier_COLLATERALINSTRUMENT(2);
const int CollInquiryQualifier_SUBSTITUTIONELIGIBLE(3);
const int CollInquiryQualifier_NOTASSIGNED(4);
const int CollInquiryQualifier_PARTIALLYASSIGNED(5);
const int CollInquiryQualifier_FULLYASSIGNED(6);
const int CollInquiryQualifier_OUTSTANDINGTRADES(7);
const size_t CollInquiryQualifier_realm_els(8);
//-------------------------------------------------------------------------------------------------
using NoTrades = Field<NumInGroup, 897>;
//-------------------------------------------------------------------------------------------------
using MarginRatio = Field<Percentage, 898>;
//-------------------------------------------------------------------------------------------------
using MarginExcess = Field<Amt, 899>;
//-------------------------------------------------------------------------------------------------
using TotalNetValue = Field<Amt, 900>;
//-------------------------------------------------------------------------------------------------
using CashOutstanding = Field<Amt, 901>;
//-------------------------------------------------------------------------------------------------
using CollAsgnID = Field<f8String, 902>;
//-------------------------------------------------------------------------------------------------
using CollAsgnTransType = Field<int, 903>;
const int CollAsgnTransType_NEW(0);
const int CollAsgnTransType_REPLACE(1);
const int CollAsgnTransType_CANCEL(2);
const int CollAsgnTransType_RELEASE(3);
const int CollAsgnTransType_REVERSE(4);
const size_t CollAsgnTransType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using CollRespID = Field<f8String, 904>;
//-------------------------------------------------------------------------------------------------
using CollAsgnRespType = Field<int, 905>;
const int CollAsgnRespType_RECEIVED(0);
const int CollAsgnRespType_ACCEPTED(1);
const int CollAsgnRespType_DECLINED(2);
const int CollAsgnRespType_REJECTED(3);
const size_t CollAsgnRespType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using CollAsgnRejectReason = Field<int, 906>;
const int CollAsgnRejectReason_UNKNOWNDEAL(0);
const int CollAsgnRejectReason_UNKNOWNORINVALIDINSTRUMENT(1);
const int CollAsgnRejectReason_UNAUTHORIZEDTRANSACTION(2);
const int CollAsgnRejectReason_INSUFFICIENTCOLLATERAL(3);
const int CollAsgnRejectReason_INVALIDTYPEOFCOLLATERAL(4);
const int CollAsgnRejectReason_EXCESSIVESUBSTITUTION(5);
const int CollAsgnRejectReason_OTHER(99);
const size_t CollAsgnRejectReason_realm_els(7);
//-------------------------------------------------------------------------------------------------
using CollAsgnRefID = Field<f8String, 907>;
//-------------------------------------------------------------------------------------------------
using CollRptID = Field<f8String, 908>;
//-------------------------------------------------------------------------------------------------
using CollInquiryID = Field<f8String, 909>;
//-------------------------------------------------------------------------------------------------
using CollStatus = Field<int, 910>;
const int CollStatus_UNASSIGNED(0);
const int CollStatus_PARTIALLYASSIGNED(1);
const int CollStatus_ASSIGNMENTPROPOSED(2);
const int CollStatus_ASSIGNEDACCEPTED(3);
const int CollStatus_CHALLENGED(4);
const size_t CollStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using TotNumReports = Field<int, 911>;
//-------------------------------------------------------------------------------------------------
using LastRptRequested = Field<Boolean, 912>;
const char LastRptRequested_NO('N');
const char LastRptRequested_YES('Y');
const size_t LastRptRequested_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AgreementDesc = Field<f8String, 913>;
//-------------------------------------------------------------------------------------------------
using AgreementID = Field<f8String, 914>;
//-------------------------------------------------------------------------------------------------
using AgreementDate = Field<LocalMktDate, 915>;
//-------------------------------------------------------------------------------------------------
using StartDate = Field<LocalMktDate, 916>;
//-------------------------------------------------------------------------------------------------
using EndDate = Field<LocalMktDate, 917>;
//-------------------------------------------------------------------------------------------------
using AgreementCurrency = Field<currency, 918>;
//-------------------------------------------------------------------------------------------------
using DeliveryType = Field<int, 919>;
const int DeliveryType_VERSUSPAYMENT(0);
const int DeliveryType_FREE(1);
const int DeliveryType_TRIPARTY(2);
const int DeliveryType_HOLDINCUSTODY(3);
const size_t DeliveryType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using EndAccruedInterestAmt = Field<Amt, 920>;
//-------------------------------------------------------------------------------------------------
using StartCash = Field<Amt, 921>;
//-------------------------------------------------------------------------------------------------
using EndCash = Field<Amt, 922>;
//-------------------------------------------------------------------------------------------------
using UserRequestID = Field<f8String, 923>;
//-------------------------------------------------------------------------------------------------
using UserRequestType = Field<int, 924>;
const int UserRequestType_LOGONUSER(1);
const int UserRequestType_LOGOFFUSER(2);
const int UserRequestType_CHANGEPASSWORDFORUSER(3);
const int UserRequestType_REQUESTINDIVIDUALUSERSTATUS(4);
const size_t UserRequestType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NewPassword = Field<f8String, 925>;
//-------------------------------------------------------------------------------------------------
using UserStatus = Field<int, 926>;
const int UserStatus_LOGGEDIN(1);
const int UserStatus_NOTLOGGEDIN(2);
const int UserStatus_USERNOTRECOGNISED(3);
const int UserStatus_PASSWORDINCORRECT(4);
const int UserStatus_PASSWORDCHANGED(5);
const int UserStatus_OTHER(6);
const size_t UserStatus_realm_els(6);
//-------------------------------------------------------------------------------------------------
using UserStatusText = Field<f8String, 927>;
//-------------------------------------------------------------------------------------------------
using StatusValue = Field<int, 928>;
const int StatusValue_CONNECTED(1);
const int StatusValue_NOTCONNECTEDDOWNEXPECTEDUP(2);
const int StatusValue_NOTCONNECTEDDOWNEXPECTEDDOWN(3);
const int StatusValue_INPROCESS(4);
const size_t StatusValue_realm_els(4);
//-------------------------------------------------------------------------------------------------
using StatusText = Field<f8String, 929>;
//-------------------------------------------------------------------------------------------------
using RefCompID = Field<f8String, 930>;
//-------------------------------------------------------------------------------------------------
using RefSubID = Field<f8String, 931>;
//-------------------------------------------------------------------------------------------------
using NetworkResponseID = Field<f8String, 932>;
//-------------------------------------------------------------------------------------------------
using NetworkRequestID = Field<f8String, 933>;
//-------------------------------------------------------------------------------------------------
using LastNetworkResponseID = Field<f8String, 934>;
//-------------------------------------------------------------------------------------------------
using NetworkRequestType = Field<int, 935>;
const int NetworkRequestType_SNAPSHOT(1);
const int NetworkRequestType_SUBSCRIBE(2);
const int NetworkRequestType_STOPSUBSCRIBING(4);
const int NetworkRequestType_LEVELOFDETAIL(8);
const size_t NetworkRequestType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NoCompIDs = Field<NumInGroup, 936>;
//-------------------------------------------------------------------------------------------------
using NetworkStatusResponseType = Field<int, 937>;
const int NetworkStatusResponseType_FULL(1);
const int NetworkStatusResponseType_INCREMENTALUPDATE(2);
const size_t NetworkStatusResponseType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoCollInquiryQualifier = Field<NumInGroup, 938>;
//-------------------------------------------------------------------------------------------------
using TrdRptStatus = Field<int, 939>;
const int TrdRptStatus_ACCEPTED(0);
const int TrdRptStatus_REJECTED(1);
const size_t TrdRptStatus_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AffirmStatus = Field<int, 940>;
const int AffirmStatus_RECEIVED(1);
const int AffirmStatus_CONFIRMREJECTED(2);
const int AffirmStatus_AFFIRMED(3);
const size_t AffirmStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using UnderlyingStrikeCurrency = Field<currency, 941>;
//-------------------------------------------------------------------------------------------------
using LegStrikeCurrency = Field<currency, 942>;
//-------------------------------------------------------------------------------------------------
using TimeBracket = Field<f8String, 943>;
//-------------------------------------------------------------------------------------------------
using CollAction = Field<int, 944>;
const int CollAction_RETAIN(0);
const int CollAction_ADD(1);
const int CollAction_REMOVE(2);
const size_t CollAction_realm_els(3);
//-------------------------------------------------------------------------------------------------
using CollInquiryStatus = Field<int, 945>;
const int CollInquiryStatus_ACCEPTED(0);
const int CollInquiryStatus_ACCEPTEDWITHWARNINGS(1);
const int CollInquiryStatus_COMPLETED(2);
const int CollInquiryStatus_COMPLETEDWITHWARNINGS(3);
const int CollInquiryStatus_REJECTED(4);
const size_t CollInquiryStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using CollInquiryResult = Field<int, 946>;
const int CollInquiryResult_SUCCESSFUL(0);
const int CollInquiryResult_INVALIDORUNKNOWNINSTRUMENT(1);
const int CollInquiryResult_INVALIDORUNKNOWNCOLLATERALTYPE(2);
const int CollInquiryResult_INVALIDPARTIES(3);
const int CollInquiryResult_INVALIDTRANSPORTTYPEREQUESTED(4);
const int CollInquiryResult_INVALIDDESTINATIONREQUESTED(5);
const int CollInquiryResult_NOCOLLATERALFOUNDFORTHETRADESPECIFIED(6);
const int CollInquiryResult_NOCOLLATERALFOUNDFORTHEORDERSPECIFIED(7);
const int CollInquiryResult_COLLATERALINQUIRYTYPENOTSUPPORTED(8);
const int CollInquiryResult_UNAUTHORIZEDFORCOLLATERALINQUIRY(9);
const int CollInquiryResult_OTHER(99);
const size_t CollInquiryResult_realm_els(11);
//-------------------------------------------------------------------------------------------------
using StrikeCurrency = Field<currency, 947>;
//-------------------------------------------------------------------------------------------------
using NoNested3PartyIDs = Field<NumInGroup, 948>;
//-------------------------------------------------------------------------------------------------
using Nested3PartyID = Field<f8String, 949>;
//-------------------------------------------------------------------------------------------------
using Nested3PartyIDSource = Field<char, 950>;
//-------------------------------------------------------------------------------------------------
using Nested3PartyRole = Field<int, 951>;
//-------------------------------------------------------------------------------------------------
using NoNested3PartySubIDs = Field<NumInGroup, 952>;
//-------------------------------------------------------------------------------------------------
using Nested3PartySubID = Field<f8String, 953>;
//-------------------------------------------------------------------------------------------------
using Nested3PartySubIDType = Field<int, 954>;
//-------------------------------------------------------------------------------------------------
using LegContractSettlMonth = Field<MonthYear, 955>;
//-------------------------------------------------------------------------------------------------
using LegInterestAccrualDate = Field<LocalMktDate, 956>;
//-------------------------------------------------------------------------------------------------
using Texfix_BaseEntry = FieldTable;

} // namespace TEX
} // namespace FIX8
#endif // FIX8_5465786669785F74797065732E687070_
